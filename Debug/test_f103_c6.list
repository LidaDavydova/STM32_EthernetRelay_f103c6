
test_f103_c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004174  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f0  080049f0  000061a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049f0  080049f0  000059f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f8  080049f8  000061a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f8  080049f8  000059f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049fc  080049fc  000059fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a8  20000000  08004a00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001100  200001a8  08004ba8  000061a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012a8  08004ba8  000062a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000061a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6da  00000000  00000000  000061d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bda  00000000  00000000  000158ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00006627  00000000  00000000  00019485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad8  00000000  00000000  0001fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7f  00000000  00000000  00020588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004714  00000000  00000000  00021107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a73  00000000  00000000  0002581b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e09a  00000000  00000000  0003628e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a4328  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002314  00000000  00000000  000a436c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000a6680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004268 	.word	0x08004268

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08004268 	.word	0x08004268

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <digest_client_parse>:
#include <stdarg.h>


int
digest_client_parse(digest_t *digest, const char *digest_string, ...)
{
 800015c:	b40e      	push	{r1, r2, r3}
 800015e:	b510      	push	{r4, lr}
 8000160:	f2ad 4d0c 	subw	sp, sp, #1036	@ 0x40c
 8000164:	f20d 4314 	addw	r3, sp, #1044	@ 0x414
 8000168:	f853 2b04 	ldr.w	r2, [r3], #4
 800016c:	4604      	mov	r4, r0
	char buffer[1024];
	va_list args;

	va_start(args, digest_string);
	vsnprintf(buffer, sizeof(buffer), digest_string, args);
 800016e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000172:	a802      	add	r0, sp, #8
	va_start(args, digest_string);
 8000174:	9301      	str	r3, [sp, #4]
	vsnprintf(buffer, sizeof(buffer), digest_string, args);
 8000176:	f003 fb53 	bl	8003820 <vsniprintf>
	va_end(args);

	digest_s *dig = (digest_s *) digest;

	/* Set default values */
	dig->nc = 1;
 800017a:	2301      	movs	r3, #1
	dig->cnonce = time(NULL);
 800017c:	2000      	movs	r0, #0
	dig->nc = 1;
 800017e:	62a3      	str	r3, [r4, #40]	@ 0x28
	dig->cnonce = time(NULL);
 8000180:	f003 fbb6 	bl	80038f0 <time>

	return parse_digest(dig, buffer);
 8000184:	a902      	add	r1, sp, #8
	dig->cnonce = time(NULL);
 8000186:	6120      	str	r0, [r4, #16]
	return parse_digest(dig, buffer);
 8000188:	4620      	mov	r0, r4
 800018a:	f001 f8a9 	bl	80012e0 <parse_digest>
}
 800018e:	f20d 4d0c 	addw	sp, sp, #1036	@ 0x40c
 8000192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000196:	b003      	add	sp, #12
 8000198:	4770      	bx	lr
	...

0800019c <digest_client_generate_header>:
 *
 * Returns the number of bytes in the result string.
 */
size_t
digest_client_generate_header(digest_t *digest, char *result, size_t max_length)
{
 800019c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80001a0:	b0ad      	sub	sp, #180	@ 0xb4
 80001a2:	4604      	mov	r4, r0
 80001a4:	460f      	mov	r7, r1
 80001a6:	4616      	mov	r6, r2
	char *qop_value, *algorithm_value, *method_value;
	size_t result_size; /* The size of the result string */
	int sz;

	/* Check length of char attributes to prevent buffer overflow */
	if (-1 == parse_validate_attributes(dig)) {
 80001a8:	f001 f962 	bl	8001470 <parse_validate_attributes>
 80001ac:	3001      	adds	r0, #1
 80001ae:	d105      	bne.n	80001bc <digest_client_generate_header+0x20>
		return -1;
 80001b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
			return -1;
		}
	}

	return result_size;
}
 80001b4:	4628      	mov	r0, r5
 80001b6:	b02d      	add	sp, #180	@ 0xb4
 80001b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (DIGEST_QOP_AUTH == (DIGEST_QOP_AUTH & dig->qop)) {
 80001bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80001be:	07d9      	lsls	r1, r3, #31
 80001c0:	d401      	bmi.n	80001c6 <digest_client_generate_header+0x2a>
	} else if (DIGEST_QOP_AUTH_INT == (DIGEST_QOP_AUTH_INT & dig->qop)) {
 80001c2:	079a      	lsls	r2, r3, #30
 80001c4:	d4f4      	bmi.n	80001b0 <digest_client_generate_header+0x14>
	if (DIGEST_ALGORITHM_MD5 == dig->algorithm) {
 80001c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80001ca:	69e2      	ldr	r2, [r4, #28]
	algorithm_value = NULL;
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	4b37      	ldr	r3, [pc, #220]	@ (80002ac <digest_client_generate_header+0x110>)
 80001d0:	f102 32ff 	add.w	r2, r2, #4294967295	@ 0xffffffff
 80001d4:	bf0c      	ite	eq
 80001d6:	4698      	moveq	r8, r3
 80001d8:	f04f 0800 	movne.w	r8, #0
	switch (dig->method) {
 80001dc:	2a06      	cmp	r2, #6
 80001de:	d8e7      	bhi.n	80001b0 <digest_client_generate_header+0x14>
 80001e0:	4b33      	ldr	r3, [pc, #204]	@ (80002b0 <digest_client_generate_header+0x114>)
	hash_generate_a1(hash_a1, dig->username, dig->realm, dig->password);
 80001e2:	6821      	ldr	r1, [r4, #0]
 80001e4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80001e8:	a805      	add	r0, sp, #20
 80001ea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
	hash_generate_a2(hash_a2, method_value, dig->uri);
 80001ee:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
	hash_generate_a1(hash_a1, dig->username, dig->realm, dig->password);
 80001f2:	f000 f8d1 	bl	8000398 <hash_generate_a1>
	hash_generate_a2(hash_a2, method_value, dig->uri);
 80001f6:	4629      	mov	r1, r5
 80001f8:	4648      	mov	r0, r9
 80001fa:	69a2      	ldr	r2, [r4, #24]
 80001fc:	f000 f8b8 	bl	8000370 <hash_generate_a2>
	if (DIGEST_QOP_NOT_SET != dig->qop) {
 8000200:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000202:	ad1f      	add	r5, sp, #124	@ 0x7c
 8000204:	2b00      	cmp	r3, #0
 8000206:	d03e      	beq.n	8000286 <digest_client_generate_header+0xea>
		hash_generate_response_auth(hash_res, hash_a1, dig->nonce, dig->nc, dig->cnonce, qop_value, hash_a2);
 8000208:	4b2a      	ldr	r3, [pc, #168]	@ (80002b4 <digest_client_generate_header+0x118>)
 800020a:	f8cd 9008 	str.w	r9, [sp, #8]
 800020e:	9301      	str	r3, [sp, #4]
 8000210:	6923      	ldr	r3, [r4, #16]
 8000212:	4628      	mov	r0, r5
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000218:	68e2      	ldr	r2, [r4, #12]
 800021a:	a905      	add	r1, sp, #20
 800021c:	f000 f8d0 	bl	80003c0 <hash_generate_response_auth>
	result_size = snprintf(result, max_length, "Digest username=\"%s\", realm=\"%s\", uri=\"%s\", response=\"%s\"",\
 8000220:	9502      	str	r5, [sp, #8]
 8000222:	69a3      	ldr	r3, [r4, #24]
 8000224:	4631      	mov	r1, r6
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	68a3      	ldr	r3, [r4, #8]
 800022a:	4638      	mov	r0, r7
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	6823      	ldr	r3, [r4, #0]
 8000230:	4a21      	ldr	r2, [pc, #132]	@ (80002b8 <digest_client_generate_header+0x11c>)
 8000232:	f003 fa6f 	bl	8003714 <sniprintf>
	if (result_size == -1 || result_size == max_length) {
 8000236:	1c43      	adds	r3, r0, #1
	result_size = snprintf(result, max_length, "Digest username=\"%s\", realm=\"%s\", uri=\"%s\", response=\"%s\"",\
 8000238:	4605      	mov	r5, r0
	if (result_size == -1 || result_size == max_length) {
 800023a:	d0b9      	beq.n	80001b0 <digest_client_generate_header+0x14>
 800023c:	4286      	cmp	r6, r0
 800023e:	d0b7      	beq.n	80001b0 <digest_client_generate_header+0x14>
	if (NULL != dig->opaque) {
 8000240:	6963      	ldr	r3, [r4, #20]
 8000242:	b14b      	cbz	r3, 8000258 <digest_client_generate_header+0xbc>
		sz = snprintf(result + result_size, max_length - result_size, ", opaque=\"%s\"", dig->opaque);
 8000244:	1a31      	subs	r1, r6, r0
 8000246:	4a1d      	ldr	r2, [pc, #116]	@ (80002bc <digest_client_generate_header+0x120>)
 8000248:	1838      	adds	r0, r7, r0
 800024a:	f003 fa63 	bl	8003714 <sniprintf>
		result_size += sz;
 800024e:	4405      	add	r5, r0
		if (sz == -1 || result_size >= max_length) {
 8000250:	3001      	adds	r0, #1
 8000252:	d0ad      	beq.n	80001b0 <digest_client_generate_header+0x14>
 8000254:	42ae      	cmp	r6, r5
 8000256:	d9ab      	bls.n	80001b0 <digest_client_generate_header+0x14>
	if (DIGEST_ALGORITHM_NOT_SET != dig->algorithm) {
 8000258:	f894 3020 	ldrb.w	r3, [r4, #32]
 800025c:	b9d3      	cbnz	r3, 8000294 <digest_client_generate_header+0xf8>
	if (DIGEST_QOP_NOT_SET != dig->qop) {
 800025e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0a7      	beq.n	80001b4 <digest_client_generate_header+0x18>
		sz = snprintf(result + result_size, max_length - result_size, ", qop=%s, nonce=\"%s\", cnonce=\"%08x\", nc=%08x",\
 8000264:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000266:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <digest_client_generate_header+0x124>)
 8000268:	9302      	str	r3, [sp, #8]
 800026a:	6923      	ldr	r3, [r4, #16]
 800026c:	1b71      	subs	r1, r6, r5
 800026e:	9301      	str	r3, [sp, #4]
 8000270:	68e3      	ldr	r3, [r4, #12]
 8000272:	1978      	adds	r0, r7, r5
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <digest_client_generate_header+0x118>)
 8000278:	f003 fa4c 	bl	8003714 <sniprintf>
		if (sz == -1 || result_size >= max_length) {
 800027c:	3001      	adds	r0, #1
 800027e:	d097      	beq.n	80001b0 <digest_client_generate_header+0x14>
 8000280:	42b5      	cmp	r5, r6
 8000282:	d397      	bcc.n	80001b4 <digest_client_generate_header+0x18>
 8000284:	e794      	b.n	80001b0 <digest_client_generate_header+0x14>
		hash_generate_response(hash_res, hash_a1, dig->nonce, hash_a2);
 8000286:	464b      	mov	r3, r9
 8000288:	4628      	mov	r0, r5
 800028a:	68e2      	ldr	r2, [r4, #12]
 800028c:	a905      	add	r1, sp, #20
 800028e:	f000 f8b1 	bl	80003f4 <hash_generate_response>
 8000292:	e7c5      	b.n	8000220 <digest_client_generate_header+0x84>
		sz = snprintf(result + result_size, max_length - result_size, ", algorithm=\"%s\"",\
 8000294:	4643      	mov	r3, r8
 8000296:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <digest_client_generate_header+0x128>)
 8000298:	1b71      	subs	r1, r6, r5
 800029a:	1978      	adds	r0, r7, r5
 800029c:	f003 fa3a 	bl	8003714 <sniprintf>
		if (sz == -1 || result_size >= max_length) {
 80002a0:	3001      	adds	r0, #1
 80002a2:	d085      	beq.n	80001b0 <digest_client_generate_header+0x14>
 80002a4:	42b5      	cmp	r5, r6
 80002a6:	d3da      	bcc.n	800025e <digest_client_generate_header+0xc2>
 80002a8:	e782      	b.n	80001b0 <digest_client_generate_header+0x14>
 80002aa:	bf00      	nop
 80002ac:	08004280 	.word	0x08004280
 80002b0:	080048b0 	.word	0x080048b0
 80002b4:	08004284 	.word	0x08004284
 80002b8:	08004289 	.word	0x08004289
 80002bc:	080042c3 	.word	0x080042c3
 80002c0:	080042d1 	.word	0x080042d1
 80002c4:	08004521 	.word	0x08004521

080002c8 <digest_init>:
#include <string.h>
#include "digest.h"

int
digest_init(digest_t *digest)
{
 80002c8:	b510      	push	{r4, lr}
	digest_s *dig = (digest_s *) digest;

	/* Clear */
	memset(dig, 0, sizeof (digest_s));
 80002ca:	222c      	movs	r2, #44	@ 0x2c
 80002cc:	2100      	movs	r1, #0
{
 80002ce:	4604      	mov	r4, r0
	memset(dig, 0, sizeof (digest_s));
 80002d0:	f003 fab4 	bl	800383c <memset>

	/* Set default values */
	dig->algorithm = DIGEST_ALGORITHM_MD5;
 80002d4:	2301      	movs	r3, #1
 80002d6:	f884 3020 	strb.w	r3, [r4, #32]

	return 0;
}
 80002da:	2000      	movs	r0, #0
 80002dc:	bd10      	pop	{r4, pc}

080002de <digest_set_attr>:
int
digest_set_attr(digest_t *digest, digest_attr_t attr, const digest_attr_value_t value)
{
	digest_s *dig = (digest_s *) digest;

	switch (attr) {
 80002de:	290a      	cmp	r1, #10
 80002e0:	d81f      	bhi.n	8000322 <digest_set_attr+0x44>
 80002e2:	e8df f001 	tbb	[pc, r1]
 80002e6:	0906      	.short	0x0906
 80002e8:	110f0d0b 	.word	0x110f0d0b
 80002ec:	1a171513 	.word	0x1a171513
 80002f0:	1c          	.byte	0x1c
 80002f1:	00          	.byte	0x00
	case D_ATTR_USERNAME:
		dig->username = value.string;
 80002f2:	6002      	str	r2, [r0, #0]
		break;
	default:
		return -1;
	}

	return 0;
 80002f4:	2000      	movs	r0, #0
 80002f6:	4770      	bx	lr
		dig->password = value.string;
 80002f8:	6042      	str	r2, [r0, #4]
		break;
 80002fa:	e7fb      	b.n	80002f4 <digest_set_attr+0x16>
		dig->realm = value.string;
 80002fc:	6082      	str	r2, [r0, #8]
		break;
 80002fe:	e7f9      	b.n	80002f4 <digest_set_attr+0x16>
		dig->nonce = value.string;
 8000300:	60c2      	str	r2, [r0, #12]
		break;
 8000302:	e7f7      	b.n	80002f4 <digest_set_attr+0x16>
		dig->cnonce = value.number;
 8000304:	6102      	str	r2, [r0, #16]
		break;
 8000306:	e7f5      	b.n	80002f4 <digest_set_attr+0x16>
		dig->opaque = value.string;
 8000308:	6142      	str	r2, [r0, #20]
		break;
 800030a:	e7f3      	b.n	80002f4 <digest_set_attr+0x16>
		dig->uri = value.string;
 800030c:	6182      	str	r2, [r0, #24]
		break;
 800030e:	e7f1      	b.n	80002f4 <digest_set_attr+0x16>
		dig->method = value.number;
 8000310:	61c2      	str	r2, [r0, #28]
		break;
 8000312:	e7ef      	b.n	80002f4 <digest_set_attr+0x16>
		dig->algorithm = value.number;
 8000314:	f880 2020 	strb.w	r2, [r0, #32]
		break;
 8000318:	e7ec      	b.n	80002f4 <digest_set_attr+0x16>
		dig->qop = value.number;
 800031a:	6242      	str	r2, [r0, #36]	@ 0x24
		break;
 800031c:	e7ea      	b.n	80002f4 <digest_set_attr+0x16>
		dig->nc = value.number;
 800031e:	6282      	str	r2, [r0, #40]	@ 0x28
		break;
 8000320:	e7e8      	b.n	80002f4 <digest_set_attr+0x16>
	switch (attr) {
 8000322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8000326:	4770      	bx	lr

08000328 <_get_md5>:
 * result is the buffer where to store the md5 hash. The length will always be
 * 32 characters long.
 */
static void
_get_md5(const char *string, char *result)
{
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032a:	4605      	mov	r5, r0
 800032c:	b09b      	sub	sp, #108	@ 0x6c
	int i = 0;
	unsigned char digest[16];

	MD5_CTX context;
	MD5_Init(&context);
 800032e:	a804      	add	r0, sp, #16
{
 8000330:	460c      	mov	r4, r1
	MD5_Init(&context);
 8000332:	f000 ff01 	bl	8001138 <MD5_Init>
	MD5_Update(&context, string, strlen(string));
 8000336:	4628      	mov	r0, r5
 8000338:	f7ff ff08 	bl	800014c <strlen>
 800033c:	4629      	mov	r1, r5
 800033e:	4602      	mov	r2, r0
 8000340:	a804      	add	r0, sp, #16
 8000342:	f000 ff11 	bl	8001168 <MD5_Update>
	MD5_Final(digest, &context);
 8000346:	4668      	mov	r0, sp
 8000348:	a904      	add	r1, sp, #16
 800034a:	f000 ff53 	bl	80011f4 <MD5_Final>

	for (i = 0; i < 16; ++i) {
 800034e:	466d      	mov	r5, sp
		sprintf(&result[i * 2], "%02x", (unsigned int) digest[i]);
 8000350:	4f06      	ldr	r7, [pc, #24]	@ (800036c <_get_md5+0x44>)
 8000352:	f104 0620 	add.w	r6, r4, #32
 8000356:	4620      	mov	r0, r4
 8000358:	4639      	mov	r1, r7
 800035a:	f815 2b01 	ldrb.w	r2, [r5], #1
	for (i = 0; i < 16; ++i) {
 800035e:	3402      	adds	r4, #2
		sprintf(&result[i * 2], "%02x", (unsigned int) digest[i]);
 8000360:	f003 fa0e 	bl	8003780 <siprintf>
	for (i = 0; i < 16; ++i) {
 8000364:	42b4      	cmp	r4, r6
 8000366:	d1f6      	bne.n	8000356 <_get_md5+0x2e>
	}
}
 8000368:	b01b      	add	sp, #108	@ 0x6c
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	08004325 	.word	0x08004325

08000370 <hash_generate_a2>:
 * result is the buffer where to store the generated md5 hash.
 * Both method and uri should be null terminated strings.
 */
void
hash_generate_a2(char *result, const char *method, const char *uri)
{
 8000370:	b510      	push	{r4, lr}
 8000372:	4604      	mov	r4, r0
 8000374:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000378:	4613      	mov	r3, r2
	char raw[512];
	sprintf(raw, "%s:%s", method, uri);
 800037a:	4668      	mov	r0, sp
 800037c:	460a      	mov	r2, r1
 800037e:	4905      	ldr	r1, [pc, #20]	@ (8000394 <hash_generate_a2+0x24>)
 8000380:	f003 f9fe 	bl	8003780 <siprintf>
	_get_md5(raw, result);
 8000384:	4621      	mov	r1, r4
 8000386:	4668      	mov	r0, sp
 8000388:	f7ff ffce 	bl	8000328 <_get_md5>
}
 800038c:	f50d 7d00 	add.w	sp, sp, #512	@ 0x200
 8000390:	bd10      	pop	{r4, pc}
 8000392:	bf00      	nop
 8000394:	0800432d 	.word	0x0800432d

08000398 <hash_generate_a1>:
 * result is the buffer where to store the generated md5 hash.
 * All other arguments should be null terminated strings.
 */
void
hash_generate_a1(char *result, const char *username, const char *realm, const char *password)
{
 8000398:	b510      	push	{r4, lr}
 800039a:	4604      	mov	r4, r0
 800039c:	f5ad 7d42 	sub.w	sp, sp, #776	@ 0x308
	char raw[768];
	sprintf(raw, "%s:%s:%s", username, realm, password);
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	a802      	add	r0, sp, #8
 80003a4:	4613      	mov	r3, r2
 80003a6:	460a      	mov	r2, r1
 80003a8:	4904      	ldr	r1, [pc, #16]	@ (80003bc <hash_generate_a1+0x24>)
 80003aa:	f003 f9e9 	bl	8003780 <siprintf>
	_get_md5(raw, result);
 80003ae:	4621      	mov	r1, r4
 80003b0:	a802      	add	r0, sp, #8
 80003b2:	f7ff ffb9 	bl	8000328 <_get_md5>
}
 80003b6:	f50d 7d42 	add.w	sp, sp, #776	@ 0x308
 80003ba:	bd10      	pop	{r4, pc}
 80003bc:	0800432a 	.word	0x0800432a

080003c0 <hash_generate_response_auth>:
 * result is the buffer where to store the generated md5 hash.
 * All other arguments should be null terminated strings.
 */
void
hash_generate_response_auth(char *result, const char *ha1, const char *nonce, unsigned int nc, unsigned int cnonce, const char *qop, const char *ha2)
{
 80003c0:	b510      	push	{r4, lr}
 80003c2:	4604      	mov	r4, r0
 80003c4:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
	char raw[512];
	sprintf(raw, "%s:%s:%08x:%08x:%s:%s", ha1, nonce, nc, cnonce, qop, ha2);
 80003c8:	9888      	ldr	r0, [sp, #544]	@ 0x220
 80003ca:	9003      	str	r0, [sp, #12]
 80003cc:	9887      	ldr	r0, [sp, #540]	@ 0x21c
 80003ce:	9002      	str	r0, [sp, #8]
 80003d0:	9886      	ldr	r0, [sp, #536]	@ 0x218
 80003d2:	e9cd 3000 	strd	r3, r0, [sp]
 80003d6:	4613      	mov	r3, r2
 80003d8:	a804      	add	r0, sp, #16
 80003da:	460a      	mov	r2, r1
 80003dc:	4904      	ldr	r1, [pc, #16]	@ (80003f0 <hash_generate_response_auth+0x30>)
 80003de:	f003 f9cf 	bl	8003780 <siprintf>
	_get_md5(raw, result);
 80003e2:	4621      	mov	r1, r4
 80003e4:	a804      	add	r0, sp, #16
 80003e6:	f7ff ff9f 	bl	8000328 <_get_md5>
}
 80003ea:	f50d 7d04 	add.w	sp, sp, #528	@ 0x210
 80003ee:	bd10      	pop	{r4, pc}
 80003f0:	08004333 	.word	0x08004333

080003f4 <hash_generate_response>:
 * result is the buffer where to store the generated md5 hash.
 * All other arguments should be null terminated strings.
 */
void
hash_generate_response(char *result, const char *ha1, const char *nonce, const char *ha2)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	4604      	mov	r4, r0
 80003f8:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
	char raw[512];
	sprintf(raw, "%s:%s:%s", ha1, nonce, ha2);
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	a802      	add	r0, sp, #8
 8000400:	4613      	mov	r3, r2
 8000402:	460a      	mov	r2, r1
 8000404:	4904      	ldr	r1, [pc, #16]	@ (8000418 <hash_generate_response+0x24>)
 8000406:	f003 f9bb 	bl	8003780 <siprintf>
	_get_md5(raw, result);
 800040a:	4621      	mov	r1, r4
 800040c:	a802      	add	r0, sp, #8
 800040e:	f7ff ff8b 	bl	8000328 <_get_md5>
}
 8000412:	f50d 7d02 	add.w	sp, sp, #520	@ 0x208
 8000416:	bd10      	pop	{r4, pc}
 8000418:	0800432a 	.word	0x0800432a

0800041c <extract_quoted.isra.0>:
	}
	return NULL;
}

/* Extract token like realm="..." or nonce="..." from header value string */
static int extract_quoted(const char *src, const char *name, char *out, size_t out_len) {
 800041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000420:	4604      	mov	r4, r0
	const char *p = src;
	size_t nlen = strlen(name);
 8000422:	4608      	mov	r0, r1
static int extract_quoted(const char *src, const char *name, char *out, size_t out_len) {
 8000424:	460f      	mov	r7, r1
 8000426:	4615      	mov	r5, r2
 8000428:	461e      	mov	r6, r3
	size_t nlen = strlen(name);
 800042a:	f7ff fe8f 	bl	800014c <strlen>
 800042e:	4680      	mov	r8, r0
	while ((p = strstr(p, name)) != NULL) {
 8000430:	4639      	mov	r1, r7
 8000432:	4620      	mov	r0, r4
 8000434:	f003 fa45 	bl	80038c2 <strstr>
 8000438:	b370      	cbz	r0, 8000498 <extract_quoted.isra.0+0x7c>
		const char *q = p + nlen;
 800043a:	eb00 0408 	add.w	r4, r0, r8
		while (*q == ' ') ++q;
 800043e:	4622      	mov	r2, r4
 8000440:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000444:	2920      	cmp	r1, #32
 8000446:	d0fb      	beq.n	8000440 <extract_quoted.isra.0+0x24>
		if (*q == '=') {
 8000448:	293d      	cmp	r1, #61	@ 0x3d
 800044a:	d1f1      	bne.n	8000430 <extract_quoted.isra.0+0x14>
			q++;
 800044c:	4613      	mov	r3, r2
			while (*q == ' ') ++q;
 800044e:	7819      	ldrb	r1, [r3, #0]
 8000450:	461f      	mov	r7, r3
 8000452:	2920      	cmp	r1, #32
 8000454:	461a      	mov	r2, r3
 8000456:	f103 0301 	add.w	r3, r3, #1
 800045a:	d0f8      	beq.n	800044e <extract_quoted.isra.0+0x32>
			if (*q == '\"') {
 800045c:	2922      	cmp	r1, #34	@ 0x22
 800045e:	d10b      	bne.n	8000478 <extract_quoted.isra.0+0x5c>
				q++;
				const char *end = strchr(q, '\"');
 8000460:	4618      	mov	r0, r3
				q++;
 8000462:	461f      	mov	r7, r3
				const char *end = strchr(q, '\"');
 8000464:	f003 f9f2 	bl	800384c <strchr>
				if (!end) return -1;
 8000468:	b1b0      	cbz	r0, 8000498 <extract_quoted.isra.0+0x7c>
				size_t copy = end - q;
 800046a:	1bc4      	subs	r4, r0, r7
				if (copy >= out_len) copy = out_len - 1;
 800046c:	42b4      	cmp	r4, r6
 800046e:	d30c      	bcc.n	800048a <extract_quoted.isra.0+0x6e>
			} else {
				/* unquoted value */
				const char *end = q;
				while (*end && *end != ',' && *end != ' ') ++end;
				size_t copy = end - q;
				if (copy >= out_len) copy = out_len - 1;
 8000470:	1e74      	subs	r4, r6, #1
 8000472:	e00a      	b.n	800048a <extract_quoted.isra.0+0x6e>
				while (*end && *end != ',' && *end != ' ') ++end;
 8000474:	2b2c      	cmp	r3, #44	@ 0x2c
 8000476:	d005      	beq.n	8000484 <extract_quoted.isra.0+0x68>
 8000478:	4614      	mov	r4, r2
 800047a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800047e:	f013 0fdf 	tst.w	r3, #223	@ 0xdf
 8000482:	d1f7      	bne.n	8000474 <extract_quoted.isra.0+0x58>
				size_t copy = end - q;
 8000484:	1be4      	subs	r4, r4, r7
				if (copy >= out_len) copy = out_len - 1;
 8000486:	42a6      	cmp	r6, r4
 8000488:	d9f2      	bls.n	8000470 <extract_quoted.isra.0+0x54>
				memcpy(out, q, copy);
 800048a:	4622      	mov	r2, r4
 800048c:	4639      	mov	r1, r7
 800048e:	4628      	mov	r0, r5
 8000490:	f003 fa88 	bl	80039a4 <memcpy>
				out[copy] = '\0';
 8000494:	2300      	movs	r3, #0
 8000496:	552b      	strb	r3, [r5, r4]
			}
		}
		p += nlen;
	}
	return -1;
}
 8000498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800049c <http_digest_init>:



void http_digest_init(uint8_t sock, uint8_t *ip, uint16_t port,
                      const char *url, const char *user, const char *pass)
{
 800049c:	b410      	push	{r4}
    s_sock = sock;
 800049e:	4c0b      	ldr	r4, [pc, #44]	@ (80004cc <http_digest_init+0x30>)
 80004a0:	7020      	strb	r0, [r4, #0]
    memcpy(s_ip, ip, 4);
 80004a2:	6808      	ldr	r0, [r1, #0]
 80004a4:	490a      	ldr	r1, [pc, #40]	@ (80004d0 <http_digest_init+0x34>)
 80004a6:	6008      	str	r0, [r1, #0]
    s_port = port;
 80004a8:	490a      	ldr	r1, [pc, #40]	@ (80004d4 <http_digest_init+0x38>)
    s_url = url;
    s_state = HTTP_STATE_CONNECT;
    ctx.user = user;
    ctx.password = pass;
    digest_init(&d);
 80004aa:	480b      	ldr	r0, [pc, #44]	@ (80004d8 <http_digest_init+0x3c>)
    s_port = port;
 80004ac:	800a      	strh	r2, [r1, #0]
    s_url = url;
 80004ae:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <http_digest_init+0x40>)
 80004b0:	6013      	str	r3, [r2, #0]
    s_state = HTTP_STATE_CONNECT;
 80004b2:	2200      	movs	r2, #0
 80004b4:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <http_digest_init+0x44>)
 80004b6:	701a      	strb	r2, [r3, #0]
    ctx.user = user;
 80004b8:	9a01      	ldr	r2, [sp, #4]
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <http_digest_init+0x48>)
 80004bc:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
    ctx.password = pass;
 80004c0:	9a02      	ldr	r2, [sp, #8]
}
 80004c2:	bc10      	pop	{r4}
    ctx.password = pass;
 80004c4:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4
    digest_init(&d);
 80004c8:	f7ff befe 	b.w	80002c8 <digest_init>
 80004cc:	20000eb2 	.word	0x20000eb2
 80004d0:	20000eae 	.word	0x20000eae
 80004d4:	20000eac 	.word	0x20000eac
 80004d8:	200008a8 	.word	0x200008a8
 80004dc:	20000ea8 	.word	0x20000ea8
 80004e0:	20000ea4 	.word	0x20000ea4
 80004e4:	200008d4 	.word	0x200008d4

080004e8 <http_digest_process>:

http_digest_status_t http_digest_process(void)
{
 80004e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    static char buf[HTTP_BUF_SIZE];
    int len;

    switch (s_state)
 80004ec:	4fa3      	ldr	r7, [pc, #652]	@ (800077c <http_digest_process+0x294>)
{
 80004ee:	f6ad 3df4 	subw	sp, sp, #3060	@ 0xbf4
    switch (s_state)
 80004f2:	783b      	ldrb	r3, [r7, #0]
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	f200 81b6 	bhi.w	8000866 <http_digest_process+0x37e>
 80004fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80004fe:	0006      	.short	0x0006
 8000500:	00500023 	.word	0x00500023
 8000504:	017d0112 	.word	0x017d0112
 8000508:	01e5      	.short	0x01e5
    {
    case HTTP_STATE_CONNECT:
        if (socket(s_sock, Sn_MR_TCP, 0, 0) != s_sock) {
 800050a:	2300      	movs	r3, #0
 800050c:	4c9c      	ldr	r4, [pc, #624]	@ (8000780 <http_digest_process+0x298>)
 800050e:	461a      	mov	r2, r3
 8000510:	2101      	movs	r1, #1
 8000512:	7820      	ldrb	r0, [r4, #0]
 8000514:	f001 fb16 	bl	8001b44 <socket>
 8000518:	7823      	ldrb	r3, [r4, #0]
 800051a:	4298      	cmp	r0, r3
 800051c:	f040 8123 	bne.w	8000766 <http_digest_process+0x27e>
            return HTTP_DIGEST_RETRY;
        }
        if (connect(s_sock, s_ip, s_port) == SOCK_OK) {
 8000520:	4b98      	ldr	r3, [pc, #608]	@ (8000784 <http_digest_process+0x29c>)
 8000522:	4999      	ldr	r1, [pc, #612]	@ (8000788 <http_digest_process+0x2a0>)
 8000524:	881a      	ldrh	r2, [r3, #0]
 8000526:	f001 fba9 	bl	8001c7c <connect_W5x00>
 800052a:	2801      	cmp	r0, #1
 800052c:	4604      	mov	r4, r0
 800052e:	d104      	bne.n	800053a <http_digest_process+0x52>
        	LOGD("HTTP_STATE_CONNECT: sock connected\n");
 8000530:	2000      	movs	r0, #0
 8000532:	4996      	ldr	r1, [pc, #600]	@ (800078c <http_digest_process+0x2a4>)
 8000534:	f001 fe8e 	bl	8002254 <log_message_internal>
            s_state = HTTP_STATE_SEND_REQ;
 8000538:	703c      	strb	r4, [r7, #0]
        }
        return HTTP_DIGEST_OK;
 800053a:	2000      	movs	r0, #0

        return HTTP_DIGEST_OK;
    }

    return HTTP_DIGEST_ERROR;
}
 800053c:	f60d 3df4 	addw	sp, sp, #3060	@ 0xbf4
 8000540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            s_url, s_ip[0], s_ip[1], s_ip[2], s_ip[3]);
 8000544:	4b90      	ldr	r3, [pc, #576]	@ (8000788 <http_digest_process+0x2a0>)
        snprintf(buf, sizeof(buf),
 8000546:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800054a:	78da      	ldrb	r2, [r3, #3]
 800054c:	4890      	ldr	r0, [pc, #576]	@ (8000790 <http_digest_process+0x2a8>)
 800054e:	9203      	str	r2, [sp, #12]
 8000550:	789a      	ldrb	r2, [r3, #2]
    int sent = 0;
 8000552:	2400      	movs	r4, #0
        snprintf(buf, sizeof(buf),
 8000554:	9202      	str	r2, [sp, #8]
 8000556:	785a      	ldrb	r2, [r3, #1]
        int ret = send(sock, (uint8_t *)buf + sent, len - sent);
 8000558:	f8df 9234 	ldr.w	r9, [pc, #564]	@ 8000790 <http_digest_process+0x2a8>
        snprintf(buf, sizeof(buf),
 800055c:	9201      	str	r2, [sp, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4a8c      	ldr	r2, [pc, #560]	@ (8000794 <http_digest_process+0x2ac>)
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	4b8c      	ldr	r3, [pc, #560]	@ (8000798 <http_digest_process+0x2b0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f003 f8d4 	bl	8003714 <sniprintf>
        if (send_all(s_sock, buf, strlen(buf)) < 0)
 800056c:	4b84      	ldr	r3, [pc, #528]	@ (8000780 <http_digest_process+0x298>)
 800056e:	4888      	ldr	r0, [pc, #544]	@ (8000790 <http_digest_process+0x2a8>)
 8000570:	781e      	ldrb	r6, [r3, #0]
 8000572:	f7ff fdeb 	bl	800014c <strlen>
 8000576:	4605      	mov	r5, r0
 8000578:	fa1f f880 	uxth.w	r8, r0
    while (sent < (int)len) {
 800057c:	42ac      	cmp	r4, r5
 800057e:	db01      	blt.n	8000584 <http_digest_process+0x9c>
        s_state = HTTP_STATE_WAIT_RESP;
 8000580:	2302      	movs	r3, #2
 8000582:	e0c7      	b.n	8000714 <http_digest_process+0x22c>
        int ret = send(sock, (uint8_t *)buf + sent, len - sent);
 8000584:	eba8 0204 	sub.w	r2, r8, r4
 8000588:	4630      	mov	r0, r6
 800058a:	b292      	uxth	r2, r2
 800058c:	eb09 0104 	add.w	r1, r9, r4
 8000590:	f001 fb78 	bl	8001c84 <send>
        if (ret <= 0) return -1;
 8000594:	2800      	cmp	r0, #0
 8000596:	f340 8166 	ble.w	8000866 <http_digest_process+0x37e>
        sent += ret;
 800059a:	4404      	add	r4, r0
 800059c:	e7ee      	b.n	800057c <http_digest_process+0x94>
        len = recv_once(s_sock, (uint8_t *)buf, sizeof(buf) - 1);
 800059e:	4b78      	ldr	r3, [pc, #480]	@ (8000780 <http_digest_process+0x298>)
    int r = recv(sock, buf, bufsize);
 80005a0:	4c7b      	ldr	r4, [pc, #492]	@ (8000790 <http_digest_process+0x2a8>)
        len = recv_once(s_sock, (uint8_t *)buf, sizeof(buf) - 1);
 80005a2:	781d      	ldrb	r5, [r3, #0]
    LOGI("RECV_ONCE: trying to recv %d bytes\n", bufsize);
 80005a4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80005a8:	2001      	movs	r0, #1
 80005aa:	497c      	ldr	r1, [pc, #496]	@ (800079c <http_digest_process+0x2b4>)
 80005ac:	f001 fe52 	bl	8002254 <log_message_internal>
    int r = recv(sock, buf, bufsize);
 80005b0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80005b4:	4621      	mov	r1, r4
 80005b6:	4628      	mov	r0, r5
 80005b8:	f001 fc1a 	bl	8001df0 <recv>
 80005bc:	4605      	mov	r5, r0
        Logger_Process();
 80005be:	f001 fec9 	bl	8002354 <Logger_Process>
        if (len > 0) {
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	ddb9      	ble.n	800053a <http_digest_process+0x52>
            buf[len] = 0;
 80005c6:	2300      	movs	r3, #0
            if (strstr(buf, "HTTP/1.1 200")) {
 80005c8:	4620      	mov	r0, r4
 80005ca:	4975      	ldr	r1, [pc, #468]	@ (80007a0 <http_digest_process+0x2b8>)
            buf[len] = 0;
 80005cc:	5563      	strb	r3, [r4, r5]
            if (strstr(buf, "HTTP/1.1 200")) {
 80005ce:	f003 f978 	bl	80038c2 <strstr>
 80005d2:	b128      	cbz	r0, 80005e0 <http_digest_process+0xf8>
            	LOGI("SUCCESS: Already connected! Starting stream...\n");
 80005d4:	4973      	ldr	r1, [pc, #460]	@ (80007a4 <http_digest_process+0x2bc>)
        	   LOGI("Connected successfully, switching to stream mode\n");
 80005d6:	2001      	movs	r0, #1
 80005d8:	f001 fe3c 	bl	8002254 <log_message_internal>
            s_state = HTTP_STATE_STREAM;
 80005dc:	2305      	movs	r3, #5
 80005de:	e099      	b.n	8000714 <http_digest_process+0x22c>
            if (strstr(buf, "401 Unauthorized")) {
 80005e0:	4620      	mov	r0, r4
 80005e2:	4971      	ldr	r1, [pc, #452]	@ (80007a8 <http_digest_process+0x2c0>)
 80005e4:	f003 f96d 	bl	80038c2 <strstr>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	f040 8095 	bne.w	8000718 <http_digest_process+0x230>
           else if (strstr(buf, "HTTP/1.1") && strstr(buf, "200")) {
 80005ee:	4620      	mov	r0, r4
 80005f0:	496e      	ldr	r1, [pc, #440]	@ (80007ac <http_digest_process+0x2c4>)
 80005f2:	f003 f966 	bl	80038c2 <strstr>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d09f      	beq.n	800053a <http_digest_process+0x52>
 80005fa:	4620      	mov	r0, r4
 80005fc:	496c      	ldr	r1, [pc, #432]	@ (80007b0 <http_digest_process+0x2c8>)
 80005fe:	f003 f960 	bl	80038c2 <strstr>
 8000602:	2800      	cmp	r0, #0
 8000604:	d099      	beq.n	800053a <http_digest_process+0x52>
        	   LOGI("Connected successfully, switching to stream mode\n");
 8000606:	496b      	ldr	r1, [pc, #428]	@ (80007b4 <http_digest_process+0x2cc>)
 8000608:	e7e5      	b.n	80005d6 <http_digest_process+0xee>
				while (*val == ' ' && val < nl) ++val;
 800060a:	3401      	adds	r4, #1
 800060c:	e02a      	b.n	8000664 <http_digest_process+0x17c>
		p = nl + 2;
 800060e:	1c84      	adds	r4, r0, #2
	while (p && *p) {
 8000610:	7823      	ldrb	r3, [r4, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d091      	beq.n	800053a <http_digest_process+0x52>
		char *nl = strstr(line, "\r\n");
 8000616:	4641      	mov	r1, r8
 8000618:	4620      	mov	r0, r4
 800061a:	f003 f952 	bl	80038c2 <strstr>
		if (!nl) break;
 800061e:	2800      	cmp	r0, #0
 8000620:	d08b      	beq.n	800053a <http_digest_process+0x52>
		size_t linelen = nl - line;
 8000622:	1b03      	subs	r3, r0, r4
		if (linelen >= keylen) {
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d9f2      	bls.n	800060e <http_digest_process+0x126>
 8000628:	4963      	ldr	r1, [pc, #396]	@ (80007b8 <http_digest_process+0x2d0>)
 800062a:	1e65      	subs	r5, r4, #1
 800062c:	f104 0c0f 	add.w	ip, r4, #15
				if (tolower((unsigned char)line[i]) != tolower((unsigned char)key[i])) {
 8000630:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8000634:	f819 3002 	ldrb.w	r3, [r9, r2]
 8000638:	f003 0303 	and.w	r3, r3, #3
 800063c:	2b01      	cmp	r3, #1
 800063e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000642:	bf08      	it	eq
 8000644:	3220      	addeq	r2, #32
 8000646:	f819 6003 	ldrb.w	r6, [r9, r3]
 800064a:	f006 0603 	and.w	r6, r6, #3
 800064e:	2e01      	cmp	r6, #1
 8000650:	bf08      	it	eq
 8000652:	3320      	addeq	r3, #32
 8000654:	429a      	cmp	r2, r3
 8000656:	d1da      	bne.n	800060e <http_digest_process+0x126>
			for (size_t i = 0; i < keylen; ++i) {
 8000658:	4565      	cmp	r5, ip
 800065a:	d1e9      	bne.n	8000630 <http_digest_process+0x148>
			if (match && line[keylen] == ':') {
 800065c:	7c23      	ldrb	r3, [r4, #16]
 800065e:	2b3a      	cmp	r3, #58	@ 0x3a
 8000660:	d1d5      	bne.n	800060e <http_digest_process+0x126>
				char *val = line + keylen + 1;
 8000662:	3411      	adds	r4, #17
				while (*val == ' ' && val < nl) ++val;
 8000664:	7823      	ldrb	r3, [r4, #0]
 8000666:	2b20      	cmp	r3, #32
 8000668:	d101      	bne.n	800066e <http_digest_process+0x186>
 800066a:	42a0      	cmp	r0, r4
 800066c:	d8cd      	bhi.n	800060a <http_digest_process+0x122>
				*nl = '\0';
 800066e:	2600      	movs	r6, #0
				   extract_quoted(val, "realm", ctx.realm, sizeof(ctx.realm));
 8000670:	4d52      	ldr	r5, [pc, #328]	@ (80007bc <http_digest_process+0x2d4>)
 8000672:	2380      	movs	r3, #128	@ 0x80
				   extract_quoted(val, "nonce", ctx.nonce, sizeof(ctx.nonce));
 8000674:	f105 0980 	add.w	r9, r5, #128	@ 0x80
				   extract_quoted(val, "realm", ctx.realm, sizeof(ctx.realm));
 8000678:	462a      	mov	r2, r5
 800067a:	4951      	ldr	r1, [pc, #324]	@ (80007c0 <http_digest_process+0x2d8>)
				*nl = '\0';
 800067c:	7006      	strb	r6, [r0, #0]
				   extract_quoted(val, "realm", ctx.realm, sizeof(ctx.realm));
 800067e:	4620      	mov	r0, r4
 8000680:	f7ff fecc 	bl	800041c <extract_quoted.isra.0>
				   extract_quoted(val, "opaque", ctx.opaque, sizeof(ctx.opaque));
 8000684:	f105 0ac0 	add.w	sl, r5, #192	@ 0xc0
				   extract_quoted(val, "nonce", ctx.nonce, sizeof(ctx.nonce));
 8000688:	2340      	movs	r3, #64	@ 0x40
 800068a:	464a      	mov	r2, r9
 800068c:	4620      	mov	r0, r4
 800068e:	494d      	ldr	r1, [pc, #308]	@ (80007c4 <http_digest_process+0x2dc>)
 8000690:	f7ff fec4 	bl	800041c <extract_quoted.isra.0>
				   extract_quoted(val, "qop", ctx.qop, sizeof(ctx.qop));
 8000694:	f505 7880 	add.w	r8, r5, #256	@ 0x100
				   extract_quoted(val, "opaque", ctx.opaque, sizeof(ctx.opaque));
 8000698:	2340      	movs	r3, #64	@ 0x40
 800069a:	4652      	mov	r2, sl
 800069c:	4620      	mov	r0, r4
 800069e:	494a      	ldr	r1, [pc, #296]	@ (80007c8 <http_digest_process+0x2e0>)
 80006a0:	f7ff febc 	bl	800041c <extract_quoted.isra.0>
				   extract_quoted(val, "algorithm", ctx.algorithm, sizeof(ctx.algorithm));
 80006a4:	f505 7b88 	add.w	fp, r5, #272	@ 0x110
				   extract_quoted(val, "qop", ctx.qop, sizeof(ctx.qop));
 80006a8:	2310      	movs	r3, #16
 80006aa:	4642      	mov	r2, r8
 80006ac:	4620      	mov	r0, r4
 80006ae:	4947      	ldr	r1, [pc, #284]	@ (80007cc <http_digest_process+0x2e4>)
 80006b0:	f7ff feb4 	bl	800041c <extract_quoted.isra.0>
				   extract_quoted(val, "algorithm", ctx.algorithm, sizeof(ctx.algorithm));
 80006b4:	2310      	movs	r3, #16
 80006b6:	465a      	mov	r2, fp
 80006b8:	4620      	mov	r0, r4
 80006ba:	4945      	ldr	r1, [pc, #276]	@ (80007d0 <http_digest_process+0x2e8>)
 80006bc:	f7ff feae 	bl	800041c <extract_quoted.isra.0>
				   log_printf("Extracted auth params: realm=%s, nonce=%s, opaque=%s, qop=%s, algorithm=%s\n",
 80006c0:	4653      	mov	r3, sl
 80006c2:	464a      	mov	r2, r9
 80006c4:	4629      	mov	r1, r5
 80006c6:	4843      	ldr	r0, [pc, #268]	@ (80007d4 <http_digest_process+0x2ec>)
				   ctx.nc = 0;
 80006c8:	f8c5 63a8 	str.w	r6, [r5, #936]	@ 0x3a8
				   log_printf("Extracted auth params: realm=%s, nonce=%s, opaque=%s, qop=%s, algorithm=%s\n",
 80006cc:	e9cd 8b00 	strd	r8, fp, [sp]
 80006d0:	f001 fe10 	bl	80022f4 <log_printf>
				   digest_client_parse(&d, "Digest realm=\"%s\", qop=\"%s\", nonce=\"%s\", opaque=\"%s\", algorithm=\"%s\"",
 80006d4:	4643      	mov	r3, r8
 80006d6:	462a      	mov	r2, r5
 80006d8:	493f      	ldr	r1, [pc, #252]	@ (80007d8 <http_digest_process+0x2f0>)
 80006da:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80006de:	483f      	ldr	r0, [pc, #252]	@ (80007dc <http_digest_process+0x2f4>)
 80006e0:	f8cd 9000 	str.w	r9, [sp]
 80006e4:	f7ff fd3a 	bl	800015c <digest_client_parse>
				   digest_set_attr(&d, D_ATTR_USERNAME, (digest_attr_value_t) "admin");
 80006e8:	4631      	mov	r1, r6
 80006ea:	4a3d      	ldr	r2, [pc, #244]	@ (80007e0 <http_digest_process+0x2f8>)
 80006ec:	483b      	ldr	r0, [pc, #236]	@ (80007dc <http_digest_process+0x2f4>)
 80006ee:	f7ff fdf6 	bl	80002de <digest_set_attr>
				   digest_set_attr(&d, D_ATTR_PASSWORD, (digest_attr_value_t) "sdfSDF543");
 80006f2:	2101      	movs	r1, #1
 80006f4:	4a3b      	ldr	r2, [pc, #236]	@ (80007e4 <http_digest_process+0x2fc>)
 80006f6:	4839      	ldr	r0, [pc, #228]	@ (80007dc <http_digest_process+0x2f4>)
 80006f8:	f7ff fdf1 	bl	80002de <digest_set_attr>
				   digest_set_attr(&d, D_ATTR_URI, (digest_attr_value_t) s_url);
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <http_digest_process+0x2b0>)
 80006fe:	2106      	movs	r1, #6
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4836      	ldr	r0, [pc, #216]	@ (80007dc <http_digest_process+0x2f4>)
 8000704:	f7ff fdeb 	bl	80002de <digest_set_attr>
				   digest_set_attr(&d, D_ATTR_METHOD, (digest_attr_value_t) DIGEST_METHOD_GET);
 8000708:	2202      	movs	r2, #2
 800070a:	2107      	movs	r1, #7
 800070c:	4833      	ldr	r0, [pc, #204]	@ (80007dc <http_digest_process+0x2f4>)
 800070e:	f7ff fde6 	bl	80002de <digest_set_attr>
				   s_state = HTTP_STATE_SEND_AUTH;
 8000712:	2304      	movs	r3, #4
            s_state = HTTP_STATE_STREAM;
 8000714:	703b      	strb	r3, [r7, #0]
        	return HTTP_DIGEST_OK;
 8000716:	e710      	b.n	800053a <http_digest_process+0x52>
		char *nl = strstr(line, "\r\n");
 8000718:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 80007e8 <http_digest_process+0x300>
				if (tolower((unsigned char)line[i]) != tolower((unsigned char)key[i])) {
 800071c:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 80007ec <http_digest_process+0x304>
 8000720:	e776      	b.n	8000610 <http_digest_process+0x128>
    	close(s_sock);
 8000722:	4c17      	ldr	r4, [pc, #92]	@ (8000780 <http_digest_process+0x298>)
 8000724:	7820      	ldrb	r0, [r4, #0]
 8000726:	f001 f9cf 	bl	8001ac8 <close>
    	for(volatile int i = 0; i < 500000; i++);
 800072a:	2300      	movs	r3, #0
 800072c:	4a30      	ldr	r2, [pc, #192]	@ (80007f0 <http_digest_process+0x308>)
 800072e:	9306      	str	r3, [sp, #24]
 8000730:	9b06      	ldr	r3, [sp, #24]
 8000732:	4293      	cmp	r3, r2
 8000734:	dd19      	ble.n	800076a <http_digest_process+0x282>
        if (socket(s_sock, Sn_MR_TCP, 0, 0) != s_sock)
 8000736:	2300      	movs	r3, #0
 8000738:	2101      	movs	r1, #1
 800073a:	461a      	mov	r2, r3
 800073c:	7820      	ldrb	r0, [r4, #0]
 800073e:	f001 fa01 	bl	8001b44 <socket>
 8000742:	4603      	mov	r3, r0
 8000744:	7820      	ldrb	r0, [r4, #0]
 8000746:	4283      	cmp	r3, r0
 8000748:	d10d      	bne.n	8000766 <http_digest_process+0x27e>
        for(volatile int i = 0; i < 200000; i++);
 800074a:	2300      	movs	r3, #0
 800074c:	4a29      	ldr	r2, [pc, #164]	@ (80007f4 <http_digest_process+0x30c>)
 800074e:	930e      	str	r3, [sp, #56]	@ 0x38
 8000750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000752:	4293      	cmp	r3, r2
 8000754:	dd0d      	ble.n	8000772 <http_digest_process+0x28a>
        uint8_t connect_result = connect(s_sock, s_ip, s_port);
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <http_digest_process+0x29c>)
 8000758:	490b      	ldr	r1, [pc, #44]	@ (8000788 <http_digest_process+0x2a0>)
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	f001 fa8e 	bl	8001c7c <connect_W5x00>
        if (connect_result == SOCK_OK) {
 8000760:	2801      	cmp	r0, #1
 8000762:	f43f af3b 	beq.w	80005dc <http_digest_process+0xf4>
            return HTTP_DIGEST_RETRY;
 8000766:	2001      	movs	r0, #1
 8000768:	e6e8      	b.n	800053c <http_digest_process+0x54>
    	for(volatile int i = 0; i < 500000; i++);
 800076a:	9b06      	ldr	r3, [sp, #24]
 800076c:	3301      	adds	r3, #1
 800076e:	9306      	str	r3, [sp, #24]
 8000770:	e7de      	b.n	8000730 <http_digest_process+0x248>
        for(volatile int i = 0; i < 200000; i++);
 8000772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000774:	3301      	adds	r3, #1
 8000776:	930e      	str	r3, [sp, #56]	@ 0x38
 8000778:	e7ea      	b.n	8000750 <http_digest_process+0x268>
 800077a:	bf00      	nop
 800077c:	20000ea4 	.word	0x20000ea4
 8000780:	20000eb2 	.word	0x20000eb2
 8000784:	20000eac 	.word	0x20000eac
 8000788:	20000eae 	.word	0x20000eae
 800078c:	08004349 	.word	0x08004349
 8000790:	200001c4 	.word	0x200001c4
 8000794:	0800436d 	.word	0x0800436d
 8000798:	20000ea8 	.word	0x20000ea8
 800079c:	080043fd 	.word	0x080043fd
 80007a0:	08004421 	.word	0x08004421
 80007a4:	0800442e 	.word	0x0800442e
 80007a8:	0800445e 	.word	0x0800445e
 80007ac:	08004542 	.word	0x08004542
 80007b0:	0800442a 	.word	0x0800442a
 80007b4:	0800454b 	.word	0x0800454b
 80007b8:	0800446f 	.word	0x0800446f
 80007bc:	200008d4 	.word	0x200008d4
 80007c0:	08004480 	.word	0x08004480
 80007c4:	08004486 	.word	0x08004486
 80007c8:	0800448c 	.word	0x0800448c
 80007cc:	08004493 	.word	0x08004493
 80007d0:	08004497 	.word	0x08004497
 80007d4:	080044a1 	.word	0x080044a1
 80007d8:	080044ed 	.word	0x080044ed
 80007dc:	200008a8 	.word	0x200008a8
 80007e0:	08004532 	.word	0x08004532
 80007e4:	08004538 	.word	0x08004538
 80007e8:	080043fa 	.word	0x080043fa
 80007ec:	080048ed 	.word	0x080048ed
 80007f0:	0007a11f 	.word	0x0007a11f
 80007f4:	00030d3f 	.word	0x00030d3f
    	Logger_Process();
 80007f8:	f001 fdac 	bl	8002354 <Logger_Process>
    	digest_client_generate_header(&d, result, sizeof (result));
 80007fc:	ac0e      	add	r4, sp, #56	@ 0x38
    	LOGD("HTTP_STATE_SEND_AUTH\n");
 80007fe:	2000      	movs	r0, #0
 8000800:	497f      	ldr	r1, [pc, #508]	@ (8000a00 <http_digest_process+0x518>)
 8000802:	f001 fd27 	bl	8002254 <log_message_internal>
    	digest_client_generate_header(&d, result, sizeof (result));
 8000806:	4621      	mov	r1, r4
 8000808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800080c:	487d      	ldr	r0, [pc, #500]	@ (8000a04 <http_digest_process+0x51c>)
 800080e:	f7ff fcc5 	bl	800019c <digest_client_generate_header>
			s_url, s_ip[0], s_ip[1], s_ip[2], s_ip[3],
 8000812:	4d7d      	ldr	r5, [pc, #500]	@ (8000a08 <http_digest_process+0x520>)
    	LOGD("result: %s\n", result);
 8000814:	4622      	mov	r2, r4
 8000816:	2000      	movs	r0, #0
 8000818:	497c      	ldr	r1, [pc, #496]	@ (8000a0c <http_digest_process+0x524>)
 800081a:	f001 fd1b 	bl	8002254 <log_message_internal>
        snprintf(buf, sizeof(buf),
 800081e:	9404      	str	r4, [sp, #16]
 8000820:	78eb      	ldrb	r3, [r5, #3]
        close(s_sock);
 8000822:	4c7b      	ldr	r4, [pc, #492]	@ (8000a10 <http_digest_process+0x528>)
        snprintf(buf, sizeof(buf),
 8000824:	9303      	str	r3, [sp, #12]
 8000826:	78ab      	ldrb	r3, [r5, #2]
 8000828:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	786b      	ldrb	r3, [r5, #1]
 8000830:	4a78      	ldr	r2, [pc, #480]	@ (8000a14 <http_digest_process+0x52c>)
 8000832:	9301      	str	r3, [sp, #4]
 8000834:	782b      	ldrb	r3, [r5, #0]
 8000836:	4878      	ldr	r0, [pc, #480]	@ (8000a18 <http_digest_process+0x530>)
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4b78      	ldr	r3, [pc, #480]	@ (8000a1c <http_digest_process+0x534>)
 800083c:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8000a18 <http_digest_process+0x530>
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f002 ff67 	bl	8003714 <sniprintf>
        close(s_sock);
 8000846:	7820      	ldrb	r0, [r4, #0]
 8000848:	f001 f93e 	bl	8001ac8 <close>
		if (socket(s_sock, Sn_MR_TCP, 0, 0) != s_sock) {
 800084c:	2300      	movs	r3, #0
 800084e:	2101      	movs	r1, #1
 8000850:	461a      	mov	r2, r3
 8000852:	7820      	ldrb	r0, [r4, #0]
 8000854:	f001 f976 	bl	8001b44 <socket>
 8000858:	7823      	ldrb	r3, [r4, #0]
 800085a:	4298      	cmp	r0, r3
 800085c:	d005      	beq.n	800086a <http_digest_process+0x382>
		   LOGE("Failed to create socket\n");
 800085e:	2003      	movs	r0, #3
 8000860:	496f      	ldr	r1, [pc, #444]	@ (8000a20 <http_digest_process+0x538>)
 8000862:	f001 fcf7 	bl	8002254 <log_message_internal>
            return HTTP_DIGEST_ERROR;
 8000866:	2002      	movs	r0, #2
 8000868:	e668      	b.n	800053c <http_digest_process+0x54>
		if (connect(s_sock, s_ip, s_port) != SOCK_OK) {
 800086a:	4b6e      	ldr	r3, [pc, #440]	@ (8000a24 <http_digest_process+0x53c>)
 800086c:	4629      	mov	r1, r5
 800086e:	881a      	ldrh	r2, [r3, #0]
 8000870:	f001 fa04 	bl	8001c7c <connect_W5x00>
 8000874:	2801      	cmp	r0, #1
 8000876:	d007      	beq.n	8000888 <http_digest_process+0x3a0>
		   LOGE("Failed to connect socket\n");
 8000878:	2003      	movs	r0, #3
 800087a:	496b      	ldr	r1, [pc, #428]	@ (8000a28 <http_digest_process+0x540>)
 800087c:	f001 fcea 	bl	8002254 <log_message_internal>
		   close(s_sock);
 8000880:	7820      	ldrb	r0, [r4, #0]
 8000882:	f001 f921 	bl	8001ac8 <close>
		   return HTTP_DIGEST_RETRY;
 8000886:	e76e      	b.n	8000766 <http_digest_process+0x27e>
		LOGD("SENDING REQUEST: %s\n", buf);
 8000888:	4642      	mov	r2, r8
 800088a:	2000      	movs	r0, #0
 800088c:	4967      	ldr	r1, [pc, #412]	@ (8000a2c <http_digest_process+0x544>)
 800088e:	f001 fce1 	bl	8002254 <log_message_internal>
    	if (send_all(s_sock, buf, strlen(buf)) < 0) {
 8000892:	4640      	mov	r0, r8
 8000894:	f7ff fc5a 	bl	800014c <strlen>
    int sent = 0;
 8000898:	2500      	movs	r5, #0
    	if (send_all(s_sock, buf, strlen(buf)) < 0) {
 800089a:	4606      	mov	r6, r0
 800089c:	f894 9000 	ldrb.w	r9, [r4]
 80008a0:	fa1f fa80 	uxth.w	sl, r0
    while (sent < (int)len) {
 80008a4:	42b5      	cmp	r5, r6
 80008a6:	db02      	blt.n	80008ae <http_digest_process+0x3c6>
		s_state = HTTP_STATE_STREAM;
 80008a8:	2305      	movs	r3, #5
 80008aa:	703b      	strb	r3, [r7, #0]
		break;
 80008ac:	e7db      	b.n	8000866 <http_digest_process+0x37e>
        int ret = send(sock, (uint8_t *)buf + sent, len - sent);
 80008ae:	ebaa 0205 	sub.w	r2, sl, r5
 80008b2:	4648      	mov	r0, r9
 80008b4:	b292      	uxth	r2, r2
 80008b6:	eb08 0105 	add.w	r1, r8, r5
 80008ba:	f001 f9e3 	bl	8001c84 <send>
        if (ret <= 0) return -1;
 80008be:	2800      	cmp	r0, #0
 80008c0:	f340 8096 	ble.w	80009f0 <http_digest_process+0x508>
        sent += ret;
 80008c4:	4405      	add	r5, r0
 80008c6:	e7ed      	b.n	80008a4 <http_digest_process+0x3bc>
    	LOGI("HTTP_STATE_STREAM: start streaming...\n");
 80008c8:	2001      	movs	r0, #1
 80008ca:	4959      	ldr	r1, [pc, #356]	@ (8000a30 <http_digest_process+0x548>)
    	recv_len = recv_once(s_sock, recv_buf, sizeof(recv_buf) - 1);
 80008cc:	4c50      	ldr	r4, [pc, #320]	@ (8000a10 <http_digest_process+0x528>)
    	LOGI("HTTP_STATE_STREAM: start streaming...\n");
 80008ce:	f001 fcc1 	bl	8002254 <log_message_internal>
    	memset(recv_buf, 0, sizeof(recv_buf));
 80008d2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80008d6:	2100      	movs	r1, #0
 80008d8:	a80e      	add	r0, sp, #56	@ 0x38
 80008da:	f002 ffaf 	bl	800383c <memset>
    	recv_len = recv_once(s_sock, recv_buf, sizeof(recv_buf) - 1);
 80008de:	7825      	ldrb	r5, [r4, #0]
    LOGI("RECV_ONCE: trying to recv %d bytes\n", bufsize);
 80008e0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008e4:	2001      	movs	r0, #1
 80008e6:	4953      	ldr	r1, [pc, #332]	@ (8000a34 <http_digest_process+0x54c>)
 80008e8:	f001 fcb4 	bl	8002254 <log_message_internal>
    int r = recv(sock, buf, bufsize);
 80008ec:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80008f0:	4628      	mov	r0, r5
 80008f2:	a90e      	add	r1, sp, #56	@ 0x38
 80008f4:	f001 fa7c 	bl	8001df0 <recv>
    	if (recv_len > 0) {
 80008f8:	1e06      	subs	r6, r0, #0
 80008fa:	dd62      	ble.n	80009c2 <http_digest_process+0x4da>
    for (int i = 0; i < len; i++) {
 80008fc:	2700      	movs	r7, #0
        if (scan_len >= SCAN_BUF - 1) {
 80008fe:	4d4e      	ldr	r5, [pc, #312]	@ (8000a38 <http_digest_process+0x550>)
            memmove(scan_buf, scan_buf + 128, SCAN_BUF - 128);
 8000900:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8000a3c <http_digest_process+0x554>
 8000904:	ac0e      	add	r4, sp, #56	@ 0x38
        if (scan_len >= SCAN_BUF - 1) {
 8000906:	f8d5 8000 	ldr.w	r8, [r5]
 800090a:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 800090e:	dd07      	ble.n	8000920 <http_digest_process+0x438>
            memmove(scan_buf, scan_buf + 128, SCAN_BUF - 128);
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	4649      	mov	r1, r9
 8000914:	484a      	ldr	r0, [pc, #296]	@ (8000a40 <http_digest_process+0x558>)
 8000916:	f003 f845 	bl	80039a4 <memcpy>
            scan_len -= 128;
 800091a:	f1a8 0380 	sub.w	r3, r8, #128	@ 0x80
 800091e:	602b      	str	r3, [r5, #0]
        scan_buf[scan_len++] = data[i];
 8000920:	682a      	ldr	r2, [r5, #0]
 8000922:	4847      	ldr	r0, [pc, #284]	@ (8000a40 <http_digest_process+0x558>)
 8000924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000928:	1c53      	adds	r3, r2, #1
 800092a:	5481      	strb	r1, [r0, r2]
        scan_buf[scan_len] = '\0';
 800092c:	2200      	movs	r2, #0
        if (!in_whitelist) {
 800092e:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8000a44 <http_digest_process+0x55c>
        scan_buf[scan_len++] = data[i];
 8000932:	602b      	str	r3, [r5, #0]
        if (!in_whitelist) {
 8000934:	f8d8 a000 	ldr.w	sl, [r8]
        scan_buf[scan_len] = '\0';
 8000938:	54c2      	strb	r2, [r0, r3]
        if (!in_whitelist) {
 800093a:	f1ba 0f00 	cmp.w	sl, #0
 800093e:	d108      	bne.n	8000952 <http_digest_process+0x46a>
            if (strstr(scan_buf, "\"WhiteList\"")) {
 8000940:	4941      	ldr	r1, [pc, #260]	@ (8000a48 <http_digest_process+0x560>)
 8000942:	f002 ffbe 	bl	80038c2 <strstr>
 8000946:	b3a0      	cbz	r0, 80009b2 <http_digest_process+0x4ca>
                in_whitelist = 1;
 8000948:	2301      	movs	r3, #1
                scan_len = 0;
 800094a:	f8c5 a000 	str.w	sl, [r5]
                in_whitelist = 1;
 800094e:	f8c8 3000 	str.w	r3, [r8]
            char *p = strstr(scan_buf, "\"PlateNumber\"");
 8000952:	493e      	ldr	r1, [pc, #248]	@ (8000a4c <http_digest_process+0x564>)
 8000954:	483a      	ldr	r0, [pc, #232]	@ (8000a40 <http_digest_process+0x558>)
 8000956:	f002 ffb4 	bl	80038c2 <strstr>
            if (p) {
 800095a:	b350      	cbz	r0, 80009b2 <http_digest_process+0x4ca>
                char *colon = strchr(p, ':');
 800095c:	213a      	movs	r1, #58	@ 0x3a
 800095e:	f002 ff75 	bl	800384c <strchr>
                if (colon) {
 8000962:	b330      	cbz	r0, 80009b2 <http_digest_process+0x4ca>
                    colon++;
 8000964:	3001      	adds	r0, #1
 8000966:	4682      	mov	sl, r0
                    while (*colon == ' ' || *colon == '\"') colon++;
 8000968:	f810 3b01 	ldrb.w	r3, [r0], #1
 800096c:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8000970:	2b20      	cmp	r3, #32
 8000972:	d0f8      	beq.n	8000966 <http_digest_process+0x47e>
                    char plate[32] = {0};
 8000974:	f10d 0b18 	add.w	fp, sp, #24
 8000978:	2100      	movs	r1, #0
 800097a:	2220      	movs	r2, #32
 800097c:	4658      	mov	r0, fp
 800097e:	f002 ff5d 	bl	800383c <memset>
                    while (*colon && *colon != '\"' && j < (int)sizeof(plate)-1) {
 8000982:	4659      	mov	r1, fp
                    int j = 0;
 8000984:	2300      	movs	r3, #0
                    while (*colon && *colon != '\"' && j < (int)sizeof(plate)-1) {
 8000986:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800098a:	b11a      	cbz	r2, 8000994 <http_digest_process+0x4ac>
 800098c:	2a22      	cmp	r2, #34	@ 0x22
 800098e:	d001      	beq.n	8000994 <http_digest_process+0x4ac>
 8000990:	2b1f      	cmp	r3, #31
 8000992:	d112      	bne.n	80009ba <http_digest_process+0x4d2>
                    plate[j] = '\0';
 8000994:	f04f 0a00 	mov.w	sl, #0
                    LOGI("WhiteList Plate detected: %s\n", plate);
 8000998:	465a      	mov	r2, fp
 800099a:	2001      	movs	r0, #1
 800099c:	492c      	ldr	r1, [pc, #176]	@ (8000a50 <http_digest_process+0x568>)
                    plate[j] = '\0';
 800099e:	f80b a003 	strb.w	sl, [fp, r3]
                    LOGI("WhiteList Plate detected: %s\n", plate);
 80009a2:	f001 fc57 	bl	8002254 <log_message_internal>
                    Relay_Off();
 80009a6:	f001 fdb9 	bl	800251c <Relay_Off>
                    in_whitelist = 0;
 80009aa:	f8c8 a000 	str.w	sl, [r8]
                    scan_len = 0;
 80009ae:	f8c5 a000 	str.w	sl, [r5]
    for (int i = 0; i < len; i++) {
 80009b2:	3701      	adds	r7, #1
 80009b4:	42be      	cmp	r6, r7
 80009b6:	d1a6      	bne.n	8000906 <http_digest_process+0x41e>
 80009b8:	e5bf      	b.n	800053a <http_digest_process+0x52>
                        plate[j++] = *colon++;
 80009ba:	3301      	adds	r3, #1
 80009bc:	f801 2b01 	strb.w	r2, [r1], #1
 80009c0:	e7e1      	b.n	8000986 <http_digest_process+0x49e>
    	else if (recv_len == 0) {
 80009c2:	d108      	bne.n	80009d6 <http_digest_process+0x4ee>
    		LOGI("STREAM: peer closed connection\n");
 80009c4:	4923      	ldr	r1, [pc, #140]	@ (8000a54 <http_digest_process+0x56c>)
    	    	LOGI("STREAM: socket closed by peer\n");
 80009c6:	2001      	movs	r0, #1
 80009c8:	f001 fc44 	bl	8002254 <log_message_internal>
    	        close(s_sock);
 80009cc:	7820      	ldrb	r0, [r4, #0]
 80009ce:	f001 f87b 	bl	8001ac8 <close>
    	        s_state = HTTP_STATE_RECONNECT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e69e      	b.n	8000714 <http_digest_process+0x22c>
    	    uint8_t st = getSn_SR(s_sock);
 80009d6:	7820      	ldrb	r0, [r4, #0]
 80009d8:	0140      	lsls	r0, r0, #5
 80009da:	f500 7042 	add.w	r0, r0, #776	@ 0x308
 80009de:	f000 fd71 	bl	80014c4 <WIZCHIP_READ>
    	    if (st == SOCK_CLOSE_WAIT || st == SOCK_CLOSED) {
 80009e2:	281c      	cmp	r0, #28
 80009e4:	d002      	beq.n	80009ec <http_digest_process+0x504>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	f47f ada7 	bne.w	800053a <http_digest_process+0x52>
    	    	LOGI("STREAM: socket closed by peer\n");
 80009ec:	491a      	ldr	r1, [pc, #104]	@ (8000a58 <http_digest_process+0x570>)
 80009ee:	e7ea      	b.n	80009c6 <http_digest_process+0x4de>
    		LOGE("Send failed after reconnect\n");
 80009f0:	2003      	movs	r0, #3
 80009f2:	491a      	ldr	r1, [pc, #104]	@ (8000a5c <http_digest_process+0x574>)
 80009f4:	f001 fc2e 	bl	8002254 <log_message_internal>
			close(s_sock);
 80009f8:	7820      	ldrb	r0, [r4, #0]
 80009fa:	f001 f865 	bl	8001ac8 <close>
			return HTTP_DIGEST_ERROR;
 80009fe:	e732      	b.n	8000866 <http_digest_process+0x37e>
 8000a00:	0800457d 	.word	0x0800457d
 8000a04:	200008a8 	.word	0x200008a8
 8000a08:	20000eae 	.word	0x20000eae
 8000a0c:	08004593 	.word	0x08004593
 8000a10:	20000eb2 	.word	0x20000eb2
 8000a14:	0800459f 	.word	0x0800459f
 8000a18:	200001c4 	.word	0x200001c4
 8000a1c:	20000ea8 	.word	0x20000ea8
 8000a20:	08004642 	.word	0x08004642
 8000a24:	20000eac 	.word	0x20000eac
 8000a28:	0800465b 	.word	0x0800465b
 8000a2c:	08004675 	.word	0x08004675
 8000a30:	0800468a 	.word	0x0800468a
 8000a34:	080043fd 	.word	0x080043fd
 8000a38:	200007a4 	.word	0x200007a4
 8000a3c:	20000828 	.word	0x20000828
 8000a40:	200007a8 	.word	0x200007a8
 8000a44:	200007a0 	.word	0x200007a0
 8000a48:	080046b1 	.word	0x080046b1
 8000a4c:	0800471a 	.word	0x0800471a
 8000a50:	080046bd 	.word	0x080046bd
 8000a54:	080046db 	.word	0x080046db
 8000a58:	080046fb 	.word	0x080046fb
 8000a5c:	08004728 	.word	0x08004728

08000a60 <md5_transform>:
          ((uint32_t)data[n*4+2] << 16) |
          ((uint32_t)data[n*4+3] << 24);
}

// Основная функция преобразования блока
static void md5_transform(MD5_CTX *ctx, const uint8_t data[64]) {
 8000a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t a = ctx->a;
    uint32_t b = ctx->b;
    uint32_t c = ctx->c;
 8000a64:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
    uint32_t a = ctx->a;
 8000a68:	6883      	ldr	r3, [r0, #8]
static void md5_transform(MD5_CTX *ctx, const uint8_t data[64]) {
 8000a6a:	b093      	sub	sp, #76	@ 0x4c
    uint32_t d = ctx->d;
 8000a6c:	f8d0 c014 	ldr.w	ip, [r0, #20]
    uint32_t a = ctx->a;
 8000a70:	9301      	str	r3, [sp, #4]

    uint32_t x[16];

    // Копируем данные во временный буфер гарантированно правильным образом
    for(int i = 0; i < 16; i++) {
 8000a72:	aa02      	add	r2, sp, #8
 8000a74:	f101 0440 	add.w	r4, r1, #64	@ 0x40
          ((uint32_t)data[n*4+2] << 16) |
 8000a78:	788b      	ldrb	r3, [r1, #2]
          ((uint32_t)data[n*4+1] << 8) |
 8000a7a:	784d      	ldrb	r5, [r1, #1]
          ((uint32_t)data[n*4+2] << 16) |
 8000a7c:	041b      	lsls	r3, r3, #16
          ((uint32_t)data[n*4+1] << 8) |
 8000a7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    return (uint32_t)data[n*4] |
 8000a82:	780d      	ldrb	r5, [r1, #0]
    for(int i = 0; i < 16; i++) {
 8000a84:	3104      	adds	r1, #4
          ((uint32_t)data[n*4+1] << 8) |
 8000a86:	432b      	orrs	r3, r5
          ((uint32_t)data[n*4+3] << 24);
 8000a88:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    for(int i = 0; i < 16; i++) {
 8000a8c:	428c      	cmp	r4, r1
          ((uint32_t)data[n*4+2] << 16) |
 8000a8e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
        x[i] = get_word(data, i);
 8000a92:	f842 3b04 	str.w	r3, [r2], #4
    for(int i = 0; i < 16; i++) {
 8000a96:	d1ef      	bne.n	8000a78 <md5_transform+0x18>
    }

    // Round 1
    STEP(F, a, b, c, d, x[0],  0xd76aa478,  7);
 8000a98:	9b02      	ldr	r3, [sp, #8]
 8000a9a:	4ae8      	ldr	r2, [pc, #928]	@ (8000e3c <md5_transform+0x3dc>)
 8000a9c:	9903      	ldr	r1, [sp, #12]
 8000a9e:	441a      	add	r2, r3
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	9c04      	ldr	r4, [sp, #16]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	ea87 030c 	eor.w	r3, r7, ip
 8000aaa:	4033      	ands	r3, r6
 8000aac:	ea83 030c 	eor.w	r3, r3, ip
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4ae3      	ldr	r2, [pc, #908]	@ (8000e40 <md5_transform+0x3e0>)
 8000ab4:	eb06 6373 	add.w	r3, r6, r3, ror #25
    STEP(F, d, a, b, c, x[1],  0xe8c7b756, 12);
 8000ab8:	440a      	add	r2, r1
 8000aba:	ea86 0107 	eor.w	r1, r6, r7
 8000abe:	4019      	ands	r1, r3
 8000ac0:	4462      	add	r2, ip
 8000ac2:	4079      	eors	r1, r7
 8000ac4:	4411      	add	r1, r2
 8000ac6:	4adf      	ldr	r2, [pc, #892]	@ (8000e44 <md5_transform+0x3e4>)
 8000ac8:	eb03 5131 	add.w	r1, r3, r1, ror #20
    STEP(F, c, d, a, b, x[2],  0x242070db, 17);
 8000acc:	4422      	add	r2, r4
 8000ace:	ea86 0403 	eor.w	r4, r6, r3
 8000ad2:	400c      	ands	r4, r1
 8000ad4:	443a      	add	r2, r7
 8000ad6:	4074      	eors	r4, r6
 8000ad8:	4414      	add	r4, r2
 8000ada:	4ddb      	ldr	r5, [pc, #876]	@ (8000e48 <md5_transform+0x3e8>)
 8000adc:	9a05      	ldr	r2, [sp, #20]
 8000ade:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    STEP(F, b, c, d, a, x[3],  0xc1bdceee, 22);
 8000ae2:	4415      	add	r5, r2
 8000ae4:	ea83 0201 	eor.w	r2, r3, r1
 8000ae8:	4022      	ands	r2, r4
 8000aea:	4435      	add	r5, r6
 8000aec:	405a      	eors	r2, r3
 8000aee:	f8dd e018 	ldr.w	lr, [sp, #24]
 8000af2:	442a      	add	r2, r5
 8000af4:	4dd5      	ldr	r5, [pc, #852]	@ (8000e4c <md5_transform+0x3ec>)
 8000af6:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    STEP(F, a, b, c, d, x[4],  0xf57c0faf,  7);
 8000afa:	4475      	add	r5, lr
 8000afc:	441d      	add	r5, r3
 8000afe:	ea81 0304 	eor.w	r3, r1, r4
 8000b02:	4013      	ands	r3, r2
 8000b04:	404b      	eors	r3, r1
 8000b06:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8000b0a:	442b      	add	r3, r5
 8000b0c:	4dd0      	ldr	r5, [pc, #832]	@ (8000e50 <md5_transform+0x3f0>)
 8000b0e:	eb02 6373 	add.w	r3, r2, r3, ror #25
    STEP(F, d, a, b, c, x[5],  0x4787c62a, 12);
 8000b12:	4475      	add	r5, lr
 8000b14:	440d      	add	r5, r1
 8000b16:	ea84 0102 	eor.w	r1, r4, r2
 8000b1a:	4019      	ands	r1, r3
 8000b1c:	4061      	eors	r1, r4
 8000b1e:	f8dd e020 	ldr.w	lr, [sp, #32]
 8000b22:	4429      	add	r1, r5
 8000b24:	4dcb      	ldr	r5, [pc, #812]	@ (8000e54 <md5_transform+0x3f4>)
 8000b26:	eb03 5131 	add.w	r1, r3, r1, ror #20
    STEP(F, c, d, a, b, x[6],  0xa8304613, 17);
 8000b2a:	4475      	add	r5, lr
 8000b2c:	4425      	add	r5, r4
 8000b2e:	ea82 0403 	eor.w	r4, r2, r3
 8000b32:	400c      	ands	r4, r1
 8000b34:	4054      	eors	r4, r2
    STEP(F, b, c, d, a, x[7],  0xfd469501, 22);
 8000b36:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
    STEP(F, c, d, a, b, x[6],  0xa8304613, 17);
 8000b3a:	442c      	add	r4, r5
 8000b3c:	4dc6      	ldr	r5, [pc, #792]	@ (8000e58 <md5_transform+0x3f8>)
 8000b3e:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    STEP(F, b, c, d, a, x[7],  0xfd469501, 22);
 8000b42:	4455      	add	r5, sl
 8000b44:	4415      	add	r5, r2
 8000b46:	ea83 0201 	eor.w	r2, r3, r1
 8000b4a:	4022      	ands	r2, r4
 8000b4c:	405a      	eors	r2, r3
 8000b4e:	f8dd e028 	ldr.w	lr, [sp, #40]	@ 0x28
 8000b52:	442a      	add	r2, r5
 8000b54:	4dc1      	ldr	r5, [pc, #772]	@ (8000e5c <md5_transform+0x3fc>)
 8000b56:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    STEP(F, a, b, c, d, x[8],  0x698098d8,  7);
 8000b5a:	4475      	add	r5, lr
 8000b5c:	441d      	add	r5, r3
 8000b5e:	ea81 0304 	eor.w	r3, r1, r4
 8000b62:	4013      	ands	r3, r2
 8000b64:	404b      	eors	r3, r1
 8000b66:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 8000b6a:	442b      	add	r3, r5
 8000b6c:	4dbc      	ldr	r5, [pc, #752]	@ (8000e60 <md5_transform+0x400>)
 8000b6e:	eb02 6373 	add.w	r3, r2, r3, ror #25
    STEP(F, d, a, b, c, x[9],  0x8b44f7af, 12);
 8000b72:	4475      	add	r5, lr
 8000b74:	440d      	add	r5, r1
 8000b76:	ea84 0102 	eor.w	r1, r4, r2
 8000b7a:	4019      	ands	r1, r3
 8000b7c:	4061      	eors	r1, r4
 8000b7e:	4429      	add	r1, r5
 8000b80:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000b82:	eb03 5131 	add.w	r1, r3, r1, ror #20
    STEP(F, c, d, a, b, x[10], 0xffff5bb1, 17);
 8000b86:	f5a5 4524 	sub.w	r5, r5, #41984	@ 0xa400
 8000b8a:	3d4f      	subs	r5, #79	@ 0x4f
 8000b8c:	4425      	add	r5, r4
 8000b8e:	ea82 0403 	eor.w	r4, r2, r3
 8000b92:	400c      	ands	r4, r1
 8000b94:	4054      	eors	r4, r2
 8000b96:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 8000b9a:	442c      	add	r4, r5
 8000b9c:	4db1      	ldr	r5, [pc, #708]	@ (8000e64 <md5_transform+0x404>)
 8000b9e:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    STEP(F, b, c, d, a, x[11], 0x895cd7be, 22);
 8000ba2:	4475      	add	r5, lr
 8000ba4:	4415      	add	r5, r2
 8000ba6:	ea83 0201 	eor.w	r2, r3, r1
 8000baa:	4022      	ands	r2, r4
 8000bac:	405a      	eors	r2, r3
    STEP(F, a, b, c, d, x[12], 0x6b901122,  7);
 8000bae:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
    STEP(F, b, c, d, a, x[11], 0x895cd7be, 22);
 8000bb2:	442a      	add	r2, r5
 8000bb4:	4dac      	ldr	r5, [pc, #688]	@ (8000e68 <md5_transform+0x408>)
 8000bb6:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    STEP(F, a, b, c, d, x[12], 0x6b901122,  7);
 8000bba:	4445      	add	r5, r8
 8000bbc:	441d      	add	r5, r3
 8000bbe:	ea81 0304 	eor.w	r3, r1, r4
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	404b      	eors	r3, r1
 8000bc6:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8000bca:	442b      	add	r3, r5
 8000bcc:	4da7      	ldr	r5, [pc, #668]	@ (8000e6c <md5_transform+0x40c>)
 8000bce:	eb02 6373 	add.w	r3, r2, r3, ror #25
    STEP(F, d, a, b, c, x[13], 0xfd987193, 12);
 8000bd2:	4475      	add	r5, lr
 8000bd4:	440d      	add	r5, r1
 8000bd6:	ea84 0102 	eor.w	r1, r4, r2
 8000bda:	4019      	ands	r1, r3
 8000bdc:	4061      	eors	r1, r4
    STEP(F, c, d, a, b, x[14], 0xa679438e, 17);
 8000bde:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
    STEP(F, d, a, b, c, x[13], 0xfd987193, 12);
 8000be2:	4429      	add	r1, r5
 8000be4:	4da2      	ldr	r5, [pc, #648]	@ (8000e70 <md5_transform+0x410>)
 8000be6:	eb03 5131 	add.w	r1, r3, r1, ror #20
    STEP(F, c, d, a, b, x[14], 0xa679438e, 17);
 8000bea:	444d      	add	r5, r9
 8000bec:	4425      	add	r5, r4
 8000bee:	ea82 0403 	eor.w	r4, r2, r3
 8000bf2:	400c      	ands	r4, r1
 8000bf4:	4054      	eors	r4, r2
    STEP(F, b, c, d, a, x[15], 0x49b40821, 22);
 8000bf6:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
    STEP(F, c, d, a, b, x[14], 0xa679438e, 17);
 8000bfa:	442c      	add	r4, r5
 8000bfc:	4d9d      	ldr	r5, [pc, #628]	@ (8000e74 <md5_transform+0x414>)
 8000bfe:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    STEP(F, b, c, d, a, x[15], 0x49b40821, 22);
 8000c02:	4475      	add	r5, lr
 8000c04:	4415      	add	r5, r2
 8000c06:	ea83 0201 	eor.w	r2, r3, r1
 8000c0a:	4022      	ands	r2, r4
 8000c0c:	405a      	eors	r2, r3
 8000c0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000c12:	442a      	add	r2, r5
 8000c14:	4d98      	ldr	r5, [pc, #608]	@ (8000e78 <md5_transform+0x418>)
 8000c16:	eb04 22b2 	add.w	r2, r4, r2, ror #10

    // Round 2
    STEP(G, a, b, c, d, x[1],  0xf61e2562,  5);
 8000c1a:	445d      	add	r5, fp
 8000c1c:	441d      	add	r5, r3
 8000c1e:	ea84 0302 	eor.w	r3, r4, r2
 8000c22:	400b      	ands	r3, r1
 8000c24:	4063      	eors	r3, r4
 8000c26:	f8dd b020 	ldr.w	fp, [sp, #32]
 8000c2a:	442b      	add	r3, r5
 8000c2c:	4d93      	ldr	r5, [pc, #588]	@ (8000e7c <md5_transform+0x41c>)
 8000c2e:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    STEP(G, d, a, b, c, x[6],  0xc040b340,  9);
 8000c32:	445d      	add	r5, fp
 8000c34:	440d      	add	r5, r1
 8000c36:	ea82 0103 	eor.w	r1, r2, r3
 8000c3a:	4021      	ands	r1, r4
 8000c3c:	4051      	eors	r1, r2
 8000c3e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8000c42:	4429      	add	r1, r5
 8000c44:	4d8e      	ldr	r5, [pc, #568]	@ (8000e80 <md5_transform+0x420>)
 8000c46:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    STEP(G, c, d, a, b, x[11], 0x265e5a51, 14);
 8000c4a:	445d      	add	r5, fp
 8000c4c:	4425      	add	r5, r4
 8000c4e:	ea83 0401 	eor.w	r4, r3, r1
 8000c52:	4014      	ands	r4, r2
 8000c54:	405c      	eors	r4, r3
 8000c56:	f8dd b008 	ldr.w	fp, [sp, #8]
 8000c5a:	442c      	add	r4, r5
 8000c5c:	4d89      	ldr	r5, [pc, #548]	@ (8000e84 <md5_transform+0x424>)
 8000c5e:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    STEP(G, b, c, d, a, x[0],  0xe9b6c7aa, 20);
 8000c62:	445d      	add	r5, fp
 8000c64:	4415      	add	r5, r2
 8000c66:	ea81 0204 	eor.w	r2, r1, r4
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	404a      	eors	r2, r1
 8000c6e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8000c72:	442a      	add	r2, r5
 8000c74:	4d84      	ldr	r5, [pc, #528]	@ (8000e88 <md5_transform+0x428>)
 8000c76:	eb04 3232 	add.w	r2, r4, r2, ror #12
    STEP(G, a, b, c, d, x[5],  0xd62f105d,  5);
 8000c7a:	445d      	add	r5, fp
 8000c7c:	441d      	add	r5, r3
 8000c7e:	ea84 0302 	eor.w	r3, r4, r2
 8000c82:	400b      	ands	r3, r1
 8000c84:	4063      	eors	r3, r4
 8000c86:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8000c8a:	442b      	add	r3, r5
 8000c8c:	4d7f      	ldr	r5, [pc, #508]	@ (8000e8c <md5_transform+0x42c>)
 8000c8e:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    STEP(G, d, a, b, c, x[10], 0x02441453,  9);
 8000c92:	445d      	add	r5, fp
 8000c94:	440d      	add	r5, r1
 8000c96:	ea82 0103 	eor.w	r1, r2, r3
 8000c9a:	4021      	ands	r1, r4
 8000c9c:	4051      	eors	r1, r2
 8000c9e:	4429      	add	r1, r5
 8000ca0:	4d7b      	ldr	r5, [pc, #492]	@ (8000e90 <md5_transform+0x430>)
 8000ca2:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    STEP(G, c, d, a, b, x[15], 0xd8a1e681, 14);
 8000ca6:	4475      	add	r5, lr
 8000ca8:	4425      	add	r5, r4
 8000caa:	ea83 0401 	eor.w	r4, r3, r1
 8000cae:	4014      	ands	r4, r2
 8000cb0:	405c      	eors	r4, r3
 8000cb2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8000cb6:	442c      	add	r4, r5
 8000cb8:	4d76      	ldr	r5, [pc, #472]	@ (8000e94 <md5_transform+0x434>)
 8000cba:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    STEP(G, b, c, d, a, x[4],  0xe7d3fbc8, 20);
 8000cbe:	445d      	add	r5, fp
 8000cc0:	4415      	add	r5, r2
 8000cc2:	ea81 0204 	eor.w	r2, r1, r4
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	404a      	eors	r2, r1
 8000cca:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8000cce:	442a      	add	r2, r5
 8000cd0:	4d71      	ldr	r5, [pc, #452]	@ (8000e98 <md5_transform+0x438>)
 8000cd2:	eb04 3232 	add.w	r2, r4, r2, ror #12
    STEP(G, a, b, c, d, x[9],  0x21e1cde6,  5);
 8000cd6:	445d      	add	r5, fp
 8000cd8:	441d      	add	r5, r3
 8000cda:	ea84 0302 	eor.w	r3, r4, r2
 8000cde:	400b      	ands	r3, r1
 8000ce0:	4063      	eors	r3, r4
 8000ce2:	442b      	add	r3, r5
 8000ce4:	4d6d      	ldr	r5, [pc, #436]	@ (8000e9c <md5_transform+0x43c>)
 8000ce6:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    STEP(G, d, a, b, c, x[14], 0xc33707d6,  9);
 8000cea:	444d      	add	r5, r9
 8000cec:	440d      	add	r5, r1
 8000cee:	ea82 0103 	eor.w	r1, r2, r3
 8000cf2:	4021      	ands	r1, r4
 8000cf4:	4051      	eors	r1, r2
 8000cf6:	f8dd b014 	ldr.w	fp, [sp, #20]
 8000cfa:	4429      	add	r1, r5
 8000cfc:	4d68      	ldr	r5, [pc, #416]	@ (8000ea0 <md5_transform+0x440>)
 8000cfe:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    STEP(G, c, d, a, b, x[3],  0xf4d50d87, 14);
 8000d02:	445d      	add	r5, fp
 8000d04:	4425      	add	r5, r4
 8000d06:	ea83 0401 	eor.w	r4, r3, r1
 8000d0a:	4014      	ands	r4, r2
 8000d0c:	405c      	eors	r4, r3
 8000d0e:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8000d12:	442c      	add	r4, r5
 8000d14:	4d63      	ldr	r5, [pc, #396]	@ (8000ea4 <md5_transform+0x444>)
 8000d16:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    STEP(G, b, c, d, a, x[8],  0x455a14ed, 20);
 8000d1a:	445d      	add	r5, fp
 8000d1c:	4415      	add	r5, r2
 8000d1e:	ea81 0204 	eor.w	r2, r1, r4
 8000d22:	401a      	ands	r2, r3
 8000d24:	404a      	eors	r2, r1
 8000d26:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8000d2a:	442a      	add	r2, r5
 8000d2c:	4d5e      	ldr	r5, [pc, #376]	@ (8000ea8 <md5_transform+0x448>)
 8000d2e:	eb04 3232 	add.w	r2, r4, r2, ror #12
    STEP(G, a, b, c, d, x[13], 0xa9e3e905,  5);
 8000d32:	445d      	add	r5, fp
 8000d34:	441d      	add	r5, r3
 8000d36:	ea84 0302 	eor.w	r3, r4, r2
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	4063      	eors	r3, r4
 8000d3e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000d42:	442b      	add	r3, r5
 8000d44:	4d59      	ldr	r5, [pc, #356]	@ (8000eac <md5_transform+0x44c>)
 8000d46:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    STEP(G, d, a, b, c, x[2],  0xfcefa3f8,  9);
 8000d4a:	445d      	add	r5, fp
 8000d4c:	440d      	add	r5, r1
 8000d4e:	ea82 0103 	eor.w	r1, r2, r3
 8000d52:	4021      	ands	r1, r4
 8000d54:	4051      	eors	r1, r2
 8000d56:	4429      	add	r1, r5
 8000d58:	4d55      	ldr	r5, [pc, #340]	@ (8000eb0 <md5_transform+0x450>)
 8000d5a:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    STEP(G, c, d, a, b, x[7],  0x676f02d9, 14);
 8000d5e:	4455      	add	r5, sl
 8000d60:	442c      	add	r4, r5
 8000d62:	ea83 0501 	eor.w	r5, r3, r1
 8000d66:	4015      	ands	r5, r2
 8000d68:	405d      	eors	r5, r3
 8000d6a:	4425      	add	r5, r4
 8000d6c:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8000eb4 <md5_transform+0x454>
 8000d70:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    STEP(G, b, c, d, a, x[12], 0x8d2a4c8a, 20);
 8000d74:	ea81 0405 	eor.w	r4, r1, r5
 8000d78:	44c3      	add	fp, r8
 8000d7a:	4493      	add	fp, r2
 8000d7c:	ea04 0203 	and.w	r2, r4, r3
 8000d80:	404a      	eors	r2, r1
 8000d82:	445a      	add	r2, fp
 8000d84:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8000d88:	eb05 3232 	add.w	r2, r5, r2, ror #12

    // Round 3
    STEP(H, a, b, c, d, x[5],  0xfffa3942,  4);
 8000d8c:	f5ab 2bb8 	sub.w	fp, fp, #376832	@ 0x5c000
 8000d90:	f2ab 6bbe 	subw	fp, fp, #1726	@ 0x6be
 8000d94:	449b      	add	fp, r3
 8000d96:	4054      	eors	r4, r2
 8000d98:	445c      	add	r4, fp
 8000d9a:	4b47      	ldr	r3, [pc, #284]	@ (8000eb8 <md5_transform+0x458>)
 8000d9c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8000da0:	eb02 7434 	add.w	r4, r2, r4, ror #28
    STEP(H, d, a, b, c, x[8],  0x8771f681, 11);
 8000da4:	445b      	add	r3, fp
 8000da6:	440b      	add	r3, r1
 8000da8:	ea85 0102 	eor.w	r1, r5, r2
 8000dac:	4061      	eors	r1, r4
 8000dae:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8000db2:	4419      	add	r1, r3
 8000db4:	4b41      	ldr	r3, [pc, #260]	@ (8000ebc <md5_transform+0x45c>)
 8000db6:	eb04 5171 	add.w	r1, r4, r1, ror #21
    STEP(H, c, d, a, b, x[11], 0x6d9d6122, 16);
 8000dba:	445b      	add	r3, fp
 8000dbc:	442b      	add	r3, r5
 8000dbe:	ea82 0504 	eor.w	r5, r2, r4
 8000dc2:	404d      	eors	r5, r1
 8000dc4:	441d      	add	r5, r3
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec0 <md5_transform+0x460>)
 8000dc8:	eb01 4535 	add.w	r5, r1, r5, ror #16
    STEP(H, b, c, d, a, x[14], 0xfde5380c, 23);
 8000dcc:	444b      	add	r3, r9
 8000dce:	441a      	add	r2, r3
 8000dd0:	ea84 0301 	eor.w	r3, r4, r1
 8000dd4:	406b      	eors	r3, r5
 8000dd6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a39      	ldr	r2, [pc, #228]	@ (8000ec4 <md5_transform+0x464>)
 8000dde:	eb05 2373 	add.w	r3, r5, r3, ror #9
    STEP(H, a, b, c, d, x[1],  0xa4beea44,  4);
 8000de2:	445a      	add	r2, fp
 8000de4:	4422      	add	r2, r4
 8000de6:	ea81 0405 	eor.w	r4, r1, r5
 8000dea:	405c      	eors	r4, r3
 8000dec:	f8dd b018 	ldr.w	fp, [sp, #24]
 8000df0:	4414      	add	r4, r2
 8000df2:	4a35      	ldr	r2, [pc, #212]	@ (8000ec8 <md5_transform+0x468>)
 8000df4:	eb03 7434 	add.w	r4, r3, r4, ror #28
    STEP(H, d, a, b, c, x[4],  0x4bdecfa9, 11);
 8000df8:	445a      	add	r2, fp
 8000dfa:	440a      	add	r2, r1
 8000dfc:	ea85 0103 	eor.w	r1, r5, r3
 8000e00:	4061      	eors	r1, r4
 8000e02:	4411      	add	r1, r2
 8000e04:	4a31      	ldr	r2, [pc, #196]	@ (8000ecc <md5_transform+0x46c>)
 8000e06:	eb04 5171 	add.w	r1, r4, r1, ror #21
    STEP(H, c, d, a, b, x[7],  0xf6bb4b60, 16);
 8000e0a:	4452      	add	r2, sl
 8000e0c:	4415      	add	r5, r2
 8000e0e:	ea83 0204 	eor.w	r2, r3, r4
 8000e12:	404a      	eors	r2, r1
 8000e14:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8000e18:	442a      	add	r2, r5
 8000e1a:	4d2d      	ldr	r5, [pc, #180]	@ (8000ed0 <md5_transform+0x470>)
 8000e1c:	eb01 4232 	add.w	r2, r1, r2, ror #16
    STEP(H, b, c, d, a, x[10], 0xbebfbc70, 23);
 8000e20:	445d      	add	r5, fp
 8000e22:	442b      	add	r3, r5
 8000e24:	ea84 0501 	eor.w	r5, r4, r1
 8000e28:	4055      	eors	r5, r2
 8000e2a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 8000e2e:	441d      	add	r5, r3
 8000e30:	4b28      	ldr	r3, [pc, #160]	@ (8000ed4 <md5_transform+0x474>)
 8000e32:	eb02 2575 	add.w	r5, r2, r5, ror #9
    STEP(H, a, b, c, d, x[13], 0x289b7ec6,  4);
 8000e36:	445b      	add	r3, fp
 8000e38:	4423      	add	r3, r4
 8000e3a:	e04d      	b.n	8000ed8 <md5_transform+0x478>
 8000e3c:	d76aa478 	.word	0xd76aa478
 8000e40:	e8c7b756 	.word	0xe8c7b756
 8000e44:	242070db 	.word	0x242070db
 8000e48:	c1bdceee 	.word	0xc1bdceee
 8000e4c:	f57c0faf 	.word	0xf57c0faf
 8000e50:	4787c62a 	.word	0x4787c62a
 8000e54:	a8304613 	.word	0xa8304613
 8000e58:	fd469501 	.word	0xfd469501
 8000e5c:	698098d8 	.word	0x698098d8
 8000e60:	8b44f7af 	.word	0x8b44f7af
 8000e64:	895cd7be 	.word	0x895cd7be
 8000e68:	6b901122 	.word	0x6b901122
 8000e6c:	fd987193 	.word	0xfd987193
 8000e70:	a679438e 	.word	0xa679438e
 8000e74:	49b40821 	.word	0x49b40821
 8000e78:	f61e2562 	.word	0xf61e2562
 8000e7c:	c040b340 	.word	0xc040b340
 8000e80:	265e5a51 	.word	0x265e5a51
 8000e84:	e9b6c7aa 	.word	0xe9b6c7aa
 8000e88:	d62f105d 	.word	0xd62f105d
 8000e8c:	02441453 	.word	0x02441453
 8000e90:	d8a1e681 	.word	0xd8a1e681
 8000e94:	e7d3fbc8 	.word	0xe7d3fbc8
 8000e98:	21e1cde6 	.word	0x21e1cde6
 8000e9c:	c33707d6 	.word	0xc33707d6
 8000ea0:	f4d50d87 	.word	0xf4d50d87
 8000ea4:	455a14ed 	.word	0x455a14ed
 8000ea8:	a9e3e905 	.word	0xa9e3e905
 8000eac:	fcefa3f8 	.word	0xfcefa3f8
 8000eb0:	676f02d9 	.word	0x676f02d9
 8000eb4:	8d2a4c8a 	.word	0x8d2a4c8a
 8000eb8:	8771f681 	.word	0x8771f681
 8000ebc:	6d9d6122 	.word	0x6d9d6122
 8000ec0:	fde5380c 	.word	0xfde5380c
 8000ec4:	a4beea44 	.word	0xa4beea44
 8000ec8:	4bdecfa9 	.word	0x4bdecfa9
 8000ecc:	f6bb4b60 	.word	0xf6bb4b60
 8000ed0:	bebfbc70 	.word	0xbebfbc70
 8000ed4:	289b7ec6 	.word	0x289b7ec6
 8000ed8:	ea81 0402 	eor.w	r4, r1, r2
 8000edc:	406c      	eors	r4, r5
 8000ede:	f8dd b008 	ldr.w	fp, [sp, #8]
 8000ee2:	441c      	add	r4, r3
 8000ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80010e0 <md5_transform+0x680>)
 8000ee6:	eb05 7434 	add.w	r4, r5, r4, ror #28
    STEP(H, d, a, b, c, x[0],  0xeaa127fa, 11);
 8000eea:	445b      	add	r3, fp
 8000eec:	4419      	add	r1, r3
 8000eee:	ea82 0305 	eor.w	r3, r2, r5
 8000ef2:	4063      	eors	r3, r4
 8000ef4:	f8dd b014 	ldr.w	fp, [sp, #20]
 8000ef8:	440b      	add	r3, r1
 8000efa:	497a      	ldr	r1, [pc, #488]	@ (80010e4 <md5_transform+0x684>)
 8000efc:	eb04 5373 	add.w	r3, r4, r3, ror #21
    STEP(H, c, d, a, b, x[3],  0xd4ef3085, 16);
 8000f00:	4459      	add	r1, fp
 8000f02:	440a      	add	r2, r1
 8000f04:	ea85 0104 	eor.w	r1, r5, r4
 8000f08:	4059      	eors	r1, r3
 8000f0a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8000f0e:	4411      	add	r1, r2
 8000f10:	4a75      	ldr	r2, [pc, #468]	@ (80010e8 <md5_transform+0x688>)
 8000f12:	eb03 4131 	add.w	r1, r3, r1, ror #16
    STEP(H, b, c, d, a, x[6],  0x04881d05, 23);
 8000f16:	445a      	add	r2, fp
 8000f18:	442a      	add	r2, r5
 8000f1a:	ea84 0503 	eor.w	r5, r4, r3
 8000f1e:	404d      	eors	r5, r1
 8000f20:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8000f24:	4415      	add	r5, r2
 8000f26:	4a71      	ldr	r2, [pc, #452]	@ (80010ec <md5_transform+0x68c>)
 8000f28:	eb01 2575 	add.w	r5, r1, r5, ror #9
    STEP(H, a, b, c, d, x[9],  0xd9d4d039,  4);
 8000f2c:	445a      	add	r2, fp
 8000f2e:	4414      	add	r4, r2
 8000f30:	ea83 0201 	eor.w	r2, r3, r1
 8000f34:	406a      	eors	r2, r5
 8000f36:	4422      	add	r2, r4
 8000f38:	4c6d      	ldr	r4, [pc, #436]	@ (80010f0 <md5_transform+0x690>)
 8000f3a:	eb05 7232 	add.w	r2, r5, r2, ror #28
    STEP(H, d, a, b, c, x[12], 0xe6db99e5, 11);
 8000f3e:	4444      	add	r4, r8
 8000f40:	4423      	add	r3, r4
 8000f42:	ea81 0405 	eor.w	r4, r1, r5
 8000f46:	4054      	eors	r4, r2
 8000f48:	441c      	add	r4, r3
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80010f4 <md5_transform+0x694>)
 8000f4c:	eb02 5474 	add.w	r4, r2, r4, ror #21
    STEP(H, c, d, a, b, x[15], 0x1fa27cf8, 16);
 8000f50:	4473      	add	r3, lr
 8000f52:	440b      	add	r3, r1
 8000f54:	ea85 0102 	eor.w	r1, r5, r2
 8000f58:	4061      	eors	r1, r4
 8000f5a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000f5e:	4419      	add	r1, r3
 8000f60:	4b65      	ldr	r3, [pc, #404]	@ (80010f8 <md5_transform+0x698>)
 8000f62:	eb04 4131 	add.w	r1, r4, r1, ror #16
    STEP(H, b, c, d, a, x[2],  0xc4ac5665, 23);
 8000f66:	445b      	add	r3, fp
 8000f68:	441d      	add	r5, r3
 8000f6a:	ea82 0304 	eor.w	r3, r2, r4
 8000f6e:	404b      	eors	r3, r1
 8000f70:	f8dd b008 	ldr.w	fp, [sp, #8]
 8000f74:	442b      	add	r3, r5
 8000f76:	4d61      	ldr	r5, [pc, #388]	@ (80010fc <md5_transform+0x69c>)
 8000f78:	eb01 2373 	add.w	r3, r1, r3, ror #9

    // Round 4
    STEP(I, a, b, c, d, x[0],  0xf4292244,  6);
 8000f7c:	445d      	add	r5, fp
 8000f7e:	4415      	add	r5, r2
 8000f80:	ea63 0204 	orn	r2, r3, r4
 8000f84:	404a      	eors	r2, r1
 8000f86:	442a      	add	r2, r5
 8000f88:	4d5d      	ldr	r5, [pc, #372]	@ (8001100 <md5_transform+0x6a0>)
 8000f8a:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    STEP(I, d, a, b, c, x[7],  0x432aff97, 10);
 8000f8e:	4455      	add	r5, sl
 8000f90:	4425      	add	r5, r4
 8000f92:	ea62 0401 	orn	r4, r2, r1
 8000f96:	405c      	eors	r4, r3
 8000f98:	442c      	add	r4, r5
 8000f9a:	4d5a      	ldr	r5, [pc, #360]	@ (8001104 <md5_transform+0x6a4>)
 8000f9c:	eb02 54b4 	add.w	r4, r2, r4, ror #22
    STEP(I, c, d, a, b, x[14], 0xab9423a7, 15);
 8000fa0:	444d      	add	r5, r9
 8000fa2:	440d      	add	r5, r1
 8000fa4:	ea64 0103 	orn	r1, r4, r3
 8000fa8:	4051      	eors	r1, r2
 8000faa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8000fae:	4429      	add	r1, r5
 8000fb0:	4d55      	ldr	r5, [pc, #340]	@ (8001108 <md5_transform+0x6a8>)
 8000fb2:	eb04 4171 	add.w	r1, r4, r1, ror #17
    STEP(I, b, c, d, a, x[5],  0xfc93a039, 21);
 8000fb6:	444d      	add	r5, r9
 8000fb8:	441d      	add	r5, r3
 8000fba:	ea61 0302 	orn	r3, r1, r2
 8000fbe:	4063      	eors	r3, r4
 8000fc0:	442b      	add	r3, r5
 8000fc2:	4d52      	ldr	r5, [pc, #328]	@ (800110c <md5_transform+0x6ac>)
 8000fc4:	eb01 23f3 	add.w	r3, r1, r3, ror #11
    STEP(I, a, b, c, d, x[12], 0x655b59c3,  6);
 8000fc8:	4445      	add	r5, r8
 8000fca:	4415      	add	r5, r2
 8000fcc:	ea63 0204 	orn	r2, r3, r4
 8000fd0:	404a      	eors	r2, r1
 8000fd2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8000fd6:	442a      	add	r2, r5
 8000fd8:	4d4d      	ldr	r5, [pc, #308]	@ (8001110 <md5_transform+0x6b0>)
 8000fda:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    STEP(I, d, a, b, c, x[3],  0x8f0ccc92, 10);
 8000fde:	4445      	add	r5, r8
 8000fe0:	4425      	add	r5, r4
 8000fe2:	ea62 0401 	orn	r4, r2, r1
 8000fe6:	405c      	eors	r4, r3
 8000fe8:	442c      	add	r4, r5
 8000fea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8000fec:	eb02 54b4 	add.w	r4, r2, r4, ror #22
    STEP(I, c, d, a, b, x[10], 0xffeff47d, 15);
 8000ff0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000ff4:	f6a5 3583 	subw	r5, r5, #2947	@ 0xb83
 8000ff8:	440d      	add	r5, r1
 8000ffa:	ea64 0103 	orn	r1, r4, r3
 8000ffe:	4051      	eors	r1, r2
 8001000:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001004:	4429      	add	r1, r5
 8001006:	4d43      	ldr	r5, [pc, #268]	@ (8001114 <md5_transform+0x6b4>)
 8001008:	eb04 4171 	add.w	r1, r4, r1, ror #17
    STEP(I, b, c, d, a, x[1],  0x85845dd1, 21);
 800100c:	4445      	add	r5, r8
 800100e:	441d      	add	r5, r3
 8001010:	ea61 0302 	orn	r3, r1, r2
 8001014:	4063      	eors	r3, r4
 8001016:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800101a:	442b      	add	r3, r5
 800101c:	4d3e      	ldr	r5, [pc, #248]	@ (8001118 <md5_transform+0x6b8>)
 800101e:	eb01 23f3 	add.w	r3, r1, r3, ror #11
    STEP(I, a, b, c, d, x[8],  0x6fa87e4f,  6);
 8001022:	4445      	add	r5, r8
 8001024:	4415      	add	r5, r2
 8001026:	ea63 0204 	orn	r2, r3, r4
 800102a:	404a      	eors	r2, r1
 800102c:	442a      	add	r2, r5
 800102e:	4d3b      	ldr	r5, [pc, #236]	@ (800111c <md5_transform+0x6bc>)
 8001030:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    STEP(I, d, a, b, c, x[15], 0xfe2ce6e0, 10);
 8001034:	4475      	add	r5, lr
 8001036:	4425      	add	r5, r4
 8001038:	ea62 0401 	orn	r4, r2, r1
 800103c:	405c      	eors	r4, r3
 800103e:	f8dd e020 	ldr.w	lr, [sp, #32]
 8001042:	442c      	add	r4, r5
 8001044:	4d36      	ldr	r5, [pc, #216]	@ (8001120 <md5_transform+0x6c0>)
 8001046:	eb02 54b4 	add.w	r4, r2, r4, ror #22
    STEP(I, c, d, a, b, x[6],  0xa3014314, 15);
 800104a:	4475      	add	r5, lr
 800104c:	440d      	add	r5, r1
 800104e:	ea64 0103 	orn	r1, r4, r3
 8001052:	4051      	eors	r1, r2
 8001054:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 8001058:	4429      	add	r1, r5
 800105a:	4d32      	ldr	r5, [pc, #200]	@ (8001124 <md5_transform+0x6c4>)
 800105c:	eb04 4171 	add.w	r1, r4, r1, ror #17
    STEP(I, b, c, d, a, x[13], 0x4e0811a1, 21);
 8001060:	4475      	add	r5, lr
 8001062:	442b      	add	r3, r5
 8001064:	ea61 0502 	orn	r5, r1, r2
 8001068:	4065      	eors	r5, r4
 800106a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800106e:	441d      	add	r5, r3
 8001070:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <md5_transform+0x6c8>)
 8001072:	eb01 25f5 	add.w	r5, r1, r5, ror #11
    STEP(I, a, b, c, d, x[4],  0xf7537e82,  6);
 8001076:	4473      	add	r3, lr
 8001078:	441a      	add	r2, r3
 800107a:	ea65 0304 	orn	r3, r5, r4
 800107e:	404b      	eors	r3, r1
 8001080:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
 8001084:	4413      	add	r3, r2
 8001086:	4a29      	ldr	r2, [pc, #164]	@ (800112c <md5_transform+0x6cc>)
 8001088:	eb05 63b3 	add.w	r3, r5, r3, ror #26
    STEP(I, d, a, b, c, x[11], 0xbd3af235, 10);
 800108c:	4472      	add	r2, lr
 800108e:	4414      	add	r4, r2
 8001090:	ea63 0201 	orn	r2, r3, r1
 8001094:	406a      	eors	r2, r5
 8001096:	f8dd e010 	ldr.w	lr, [sp, #16]
 800109a:	4422      	add	r2, r4
 800109c:	4c24      	ldr	r4, [pc, #144]	@ (8001130 <md5_transform+0x6d0>)
 800109e:	eb03 52b2 	add.w	r2, r3, r2, ror #22
    STEP(I, c, d, a, b, x[2],  0x2ad7d2bb, 15);
 80010a2:	4474      	add	r4, lr
 80010a4:	440c      	add	r4, r1
 80010a6:	ea62 0105 	orn	r1, r2, r5
 80010aa:	4059      	eors	r1, r3
 80010ac:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
 80010b0:	4421      	add	r1, r4
 80010b2:	4c20      	ldr	r4, [pc, #128]	@ (8001134 <md5_transform+0x6d4>)
 80010b4:	eb02 4171 	add.w	r1, r2, r1, ror #17
    STEP(I, b, c, d, a, x[9],  0xeb86d391, 21);
 80010b8:	4474      	add	r4, lr
 80010ba:	4425      	add	r5, r4
 80010bc:	ea61 0403 	orn	r4, r1, r3
 80010c0:	4054      	eors	r4, r2
 80010c2:	442c      	add	r4, r5

    ctx->a += a;
 80010c4:	9d01      	ldr	r5, [sp, #4]
    ctx->b += b;
 80010c6:	440e      	add	r6, r1
    ctx->a += a;
 80010c8:	442b      	add	r3, r5
    ctx->b += b;
 80010ca:	eb06 26f4 	add.w	r6, r6, r4, ror #11
    ctx->c += c;
 80010ce:	440f      	add	r7, r1
    ctx->d += d;
 80010d0:	4462      	add	r2, ip
    ctx->a += a;
 80010d2:	6083      	str	r3, [r0, #8]
    ctx->b += b;
 80010d4:	60c6      	str	r6, [r0, #12]
    ctx->c += c;
 80010d6:	6107      	str	r7, [r0, #16]
    ctx->d += d;
 80010d8:	6142      	str	r2, [r0, #20]
}
 80010da:	b013      	add	sp, #76	@ 0x4c
 80010dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010e0:	eaa127fa 	.word	0xeaa127fa
 80010e4:	d4ef3085 	.word	0xd4ef3085
 80010e8:	04881d05 	.word	0x04881d05
 80010ec:	d9d4d039 	.word	0xd9d4d039
 80010f0:	e6db99e5 	.word	0xe6db99e5
 80010f4:	1fa27cf8 	.word	0x1fa27cf8
 80010f8:	c4ac5665 	.word	0xc4ac5665
 80010fc:	f4292244 	.word	0xf4292244
 8001100:	432aff97 	.word	0x432aff97
 8001104:	ab9423a7 	.word	0xab9423a7
 8001108:	fc93a039 	.word	0xfc93a039
 800110c:	655b59c3 	.word	0x655b59c3
 8001110:	8f0ccc92 	.word	0x8f0ccc92
 8001114:	85845dd1 	.word	0x85845dd1
 8001118:	6fa87e4f 	.word	0x6fa87e4f
 800111c:	fe2ce6e0 	.word	0xfe2ce6e0
 8001120:	a3014314 	.word	0xa3014314
 8001124:	4e0811a1 	.word	0x4e0811a1
 8001128:	f7537e82 	.word	0xf7537e82
 800112c:	bd3af235 	.word	0xbd3af235
 8001130:	2ad7d2bb 	.word	0x2ad7d2bb
 8001134:	eb86d391 	.word	0xeb86d391

08001138 <MD5_Init>:

void MD5_Init(MD5_CTX *ctx) {
 8001138:	b510      	push	{r4, lr}
 800113a:	4604      	mov	r4, r0
    memset(ctx, 0, sizeof(*ctx)); // Обнуляем всю структуру
 800113c:	2258      	movs	r2, #88	@ 0x58
 800113e:	2100      	movs	r1, #0
 8001140:	f002 fb7c 	bl	800383c <memset>
    ctx->a = 0x67452301;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <MD5_Init+0x2c>)
 8001146:	60a3      	str	r3, [r4, #8]
    ctx->b = 0xefcdab89;
 8001148:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 800114c:	60e3      	str	r3, [r4, #12]
    ctx->c = 0x98badcfe;
 800114e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8001152:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8001156:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 800115a:	6123      	str	r3, [r4, #16]
    ctx->d = 0x10325476;
 800115c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8001160:	6163      	str	r3, [r4, #20]
}
 8001162:	bd10      	pop	{r4, pc}
 8001164:	67452301 	.word	0x67452301

08001168 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *vdata, uint32_t len) {
 8001168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800116c:	4614      	mov	r4, r2
    const uint8_t *data = (const uint8_t*)vdata;
    uint32_t have;

    // Вычисляем сколько байт уже есть в буфере
    have = (ctx->lo >> 3) & 0x3F; // lo - счетчик бит, сдвигаем чтобы получить байты
 800116e:	6803      	ldr	r3, [r0, #0]

    // Обновляем счетчик бит
    ctx->lo += len << 3;
 8001170:	00d2      	lsls	r2, r2, #3
    have = (ctx->lo >> 3) & 0x3F; // lo - счетчик бит, сдвигаем чтобы получить байты
 8001172:	f3c3 07c5 	ubfx	r7, r3, #3, #6
    ctx->lo += len << 3;
 8001176:	189b      	adds	r3, r3, r2
 8001178:	6003      	str	r3, [r0, #0]
    if(ctx->lo < (len << 3)) ctx->hi++; // Перенос если было переполнение
 800117a:	bf28      	it	cs
 800117c:	6843      	ldrcs	r3, [r0, #4]
void MD5_Update(MD5_CTX *ctx, const void *vdata, uint32_t len) {
 800117e:	4605      	mov	r5, r0
    if(ctx->lo < (len << 3)) ctx->hi++; // Перенос если было переполнение
 8001180:	bf24      	itt	cs
 8001182:	3301      	addcs	r3, #1
 8001184:	6043      	strcs	r3, [r0, #4]
    ctx->hi += len >> 29;
 8001186:	6843      	ldr	r3, [r0, #4]
void MD5_Update(MD5_CTX *ctx, const void *vdata, uint32_t len) {
 8001188:	460e      	mov	r6, r1
    ctx->hi += len >> 29;
 800118a:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800118e:	6043      	str	r3, [r0, #4]

    if(have) { // Если в буфере уже есть данные
 8001190:	b1c7      	cbz	r7, 80011c4 <MD5_Update+0x5c>
        uint32_t need = 64 - have; // Сколько нужно до полного блока
 8001192:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
        if(len < need) {
 8001196:	4544      	cmp	r4, r8
 8001198:	f100 0918 	add.w	r9, r0, #24
 800119c:	d206      	bcs.n	80011ac <MD5_Update+0x44>
            memcpy(ctx->buffer + have, data, len);
 800119e:	4622      	mov	r2, r4
 80011a0:	eb09 0007 	add.w	r0, r9, r7
    }

    if(len) { // Сохраняем оставшиеся данные
        memcpy(ctx->buffer, data, len);
    }
}
 80011a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy(ctx->buffer, data, len);
 80011a8:	f002 bbfc 	b.w	80039a4 <memcpy>
        memcpy(ctx->buffer + have, data, need);
 80011ac:	4642      	mov	r2, r8
 80011ae:	eb09 0007 	add.w	r0, r9, r7
 80011b2:	f002 fbf7 	bl	80039a4 <memcpy>
        md5_transform(ctx, ctx->buffer);
 80011b6:	4649      	mov	r1, r9
 80011b8:	4628      	mov	r0, r5
 80011ba:	f7ff fc51 	bl	8000a60 <md5_transform>
        data += need;
 80011be:	3c40      	subs	r4, #64	@ 0x40
 80011c0:	4446      	add	r6, r8
        len -= need;
 80011c2:	443c      	add	r4, r7
void MD5_Update(MD5_CTX *ctx, const void *vdata, uint32_t len) {
 80011c4:	4627      	mov	r7, r4
 80011c6:	eb06 0804 	add.w	r8, r6, r4
    while(len >= 64) { // Обрабатываем полные блоки
 80011ca:	2f3f      	cmp	r7, #63	@ 0x3f
 80011cc:	eba8 0107 	sub.w	r1, r8, r7
 80011d0:	d809      	bhi.n	80011e6 <MD5_Update+0x7e>
    if(len) { // Сохраняем оставшиеся данные
 80011d2:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 80011d6:	09a1      	lsrs	r1, r4, #6
 80011d8:	4359      	muls	r1, r3
 80011da:	1862      	adds	r2, r4, r1
 80011dc:	d008      	beq.n	80011f0 <MD5_Update+0x88>
        memcpy(ctx->buffer, data, len);
 80011de:	1a71      	subs	r1, r6, r1
 80011e0:	f105 0018 	add.w	r0, r5, #24
 80011e4:	e7de      	b.n	80011a4 <MD5_Update+0x3c>
        md5_transform(ctx, data);
 80011e6:	4628      	mov	r0, r5
 80011e8:	f7ff fc3a 	bl	8000a60 <md5_transform>
        len -= 64;
 80011ec:	3f40      	subs	r7, #64	@ 0x40
 80011ee:	e7ec      	b.n	80011ca <MD5_Update+0x62>
}
 80011f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080011f4 <MD5_Final>:

void MD5_Final(uint8_t digest[16], MD5_CTX *ctx) {
 80011f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t size;
    uint32_t padlen;

    // Сохраняем размер сообщения в битах
    uint64_t bits = ((uint64_t)ctx->hi << 32) | ctx->lo;
 80011f8:	e9d1 8700 	ldrd	r8, r7, [r1]
void MD5_Final(uint8_t digest[16], MD5_CTX *ctx) {
 80011fc:	460c      	mov	r4, r1

    // Паддинг: добавляем 0x80 и нули
    size = (ctx->lo >> 3) & 0x3F; // Размер текущих данных в буфере в байтах
 80011fe:	f3c8 05c5 	ubfx	r5, r8, #3, #6
    padlen = (size < 56) ? (56 - size) : (120 - size);
 8001202:	2d37      	cmp	r5, #55	@ 0x37
 8001204:	bf94      	ite	ls
 8001206:	f1c5 0538 	rsbls	r5, r5, #56	@ 0x38
 800120a:	f1c5 0578 	rsbhi	r5, r5, #120	@ 0x78
void MD5_Final(uint8_t digest[16], MD5_CTX *ctx) {
 800120e:	4606      	mov	r6, r0

    MD5_Update(ctx, "\x80", 1); // Добавляем байт 0x80
 8001210:	2201      	movs	r2, #1
 8001212:	4620      	mov	r0, r4
 8001214:	4920      	ldr	r1, [pc, #128]	@ (8001298 <MD5_Final+0xa4>)
void MD5_Final(uint8_t digest[16], MD5_CTX *ctx) {
 8001216:	b090      	sub	sp, #64	@ 0x40
    MD5_Update(ctx, "\x80", 1); // Добавляем байт 0x80
 8001218:	f7ff ffa6 	bl	8001168 <MD5_Update>
    padlen--;

    // Добавляем нули
    if(padlen) {
 800121c:	3d01      	subs	r5, #1
 800121e:	d009      	beq.n	8001234 <MD5_Final+0x40>
        uint8_t zeros[64] = {0};
 8001220:	2240      	movs	r2, #64	@ 0x40
 8001222:	2100      	movs	r1, #0
 8001224:	4668      	mov	r0, sp
 8001226:	f002 fb09 	bl	800383c <memset>
        MD5_Update(ctx, zeros, padlen);
 800122a:	462a      	mov	r2, r5
 800122c:	4669      	mov	r1, sp
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff ff9a 	bl	8001168 <MD5_Update>
    }

    // Добавляем размер сообщения в битах (little-endian)
    uint8_t length_bytes[8];
    for(int i = 0; i < 8; i++) {
 8001234:	466d      	mov	r5, sp
void MD5_Final(uint8_t digest[16], MD5_CTX *ctx) {
 8001236:	2300      	movs	r3, #0
        length_bytes[i] = (bits >> (i * 8)) & 0xFF;
 8001238:	f1c3 0020 	rsb	r0, r3, #32
 800123c:	f1a3 0120 	sub.w	r1, r3, #32
 8001240:	fa28 f203 	lsr.w	r2, r8, r3
 8001244:	fa07 f000 	lsl.w	r0, r7, r0
 8001248:	4302      	orrs	r2, r0
 800124a:	fa27 f101 	lsr.w	r1, r7, r1
    for(int i = 0; i < 8; i++) {
 800124e:	3308      	adds	r3, #8
        length_bytes[i] = (bits >> (i * 8)) & 0xFF;
 8001250:	430a      	orrs	r2, r1
    for(int i = 0; i < 8; i++) {
 8001252:	2b40      	cmp	r3, #64	@ 0x40
        length_bytes[i] = (bits >> (i * 8)) & 0xFF;
 8001254:	f805 2b01 	strb.w	r2, [r5], #1
    for(int i = 0; i < 8; i++) {
 8001258:	d1ee      	bne.n	8001238 <MD5_Final+0x44>
    }
    MD5_Update(ctx, length_bytes, 8);
 800125a:	4620      	mov	r0, r4
 800125c:	2208      	movs	r2, #8
 800125e:	4669      	mov	r1, sp
 8001260:	f7ff ff82 	bl	8001168 <MD5_Update>
 8001264:	2300      	movs	r3, #0
 8001266:	1e70      	subs	r0, r6, #1

    // Формируем итоговый хэш (little-endian)
    for(int i = 0; i < 4; i++) {
        digest[i]      = (ctx->a >> (i * 8)) & 0xFF;
 8001268:	68a2      	ldr	r2, [r4, #8]
 800126a:	40da      	lsrs	r2, r3
 800126c:	f800 2f01 	strb.w	r2, [r0, #1]!
        digest[i + 4]  = (ctx->b >> (i * 8)) & 0xFF;
 8001270:	68e2      	ldr	r2, [r4, #12]
 8001272:	40da      	lsrs	r2, r3
 8001274:	7102      	strb	r2, [r0, #4]
        digest[i + 8]  = (ctx->c >> (i * 8)) & 0xFF;
 8001276:	6922      	ldr	r2, [r4, #16]
 8001278:	40da      	lsrs	r2, r3
 800127a:	7202      	strb	r2, [r0, #8]
        digest[i + 12] = (ctx->d >> (i * 8)) & 0xFF;
 800127c:	6962      	ldr	r2, [r4, #20]
 800127e:	40da      	lsrs	r2, r3
    for(int i = 0; i < 4; i++) {
 8001280:	3308      	adds	r3, #8
 8001282:	2b20      	cmp	r3, #32
        digest[i + 12] = (ctx->d >> (i * 8)) & 0xFF;
 8001284:	7302      	strb	r2, [r0, #12]
    for(int i = 0; i < 4; i++) {
 8001286:	d1ef      	bne.n	8001268 <MD5_Final+0x74>
    }

    // Очищаем контекст
    memset(ctx, 0, sizeof(*ctx));
 8001288:	2258      	movs	r2, #88	@ 0x58
 800128a:	2100      	movs	r1, #0
 800128c:	4620      	mov	r0, r4
}
 800128e:	b010      	add	sp, #64	@ 0x40
 8001290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    memset(ctx, 0, sizeof(*ctx));
 8001294:	f002 bad2 	b.w	800383c <memset>
 8001298:	08004745 	.word	0x08004745

0800129c <_dgst_get_val>:
 *
 * Returns a pointer to the start of the value on success, otherwise NULL.
 */
static char *
_dgst_get_val(char *parameter)
{
 800129c:	b510      	push	{r4, lr}
	char *cursor, *q;

	/* Find start of value */
	if (NULL == (cursor = strchr(parameter, '='))) {
 800129e:	213d      	movs	r1, #61	@ 0x3d
 80012a0:	f002 fad4 	bl	800384c <strchr>
 80012a4:	b118      	cbz	r0, 80012ae <_dgst_get_val+0x12>
		return (char *) NULL;
	}

	if (*(++cursor) != '"') {
 80012a6:	7841      	ldrb	r1, [r0, #1]
 80012a8:	2922      	cmp	r1, #34	@ 0x22
 80012aa:	d001      	beq.n	80012b0 <_dgst_get_val+0x14>
 80012ac:	3001      	adds	r0, #1
		return (char *) NULL;
	}
	*q = '\0';

	return cursor;
}
 80012ae:	bd10      	pop	{r4, pc}
	cursor++;
 80012b0:	1c84      	adds	r4, r0, #2
	if (NULL == (q = strchr(cursor, '"'))) {
 80012b2:	4620      	mov	r0, r4
 80012b4:	f002 faca 	bl	800384c <strchr>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d0f8      	beq.n	80012ae <_dgst_get_val+0x12>
	*q = '\0';
 80012bc:	2300      	movs	r3, #0
 80012be:	7003      	strb	r3, [r0, #0]
	return cursor;
 80012c0:	4620      	mov	r0, r4
 80012c2:	e7f4      	b.n	80012ae <_dgst_get_val+0x12>

080012c4 <_check_string>:
 *
 * Returns 0 if not NULL and length is below 256 characters, otherwise -1.
 */
int
_check_string(const char *string)
{
 80012c4:	b508      	push	{r3, lr}
	if (NULL == string || 255 < strlen(string)) {
 80012c6:	b138      	cbz	r0, 80012d8 <_check_string+0x14>
 80012c8:	f7fe ff40 	bl	800014c <strlen>
 80012cc:	28ff      	cmp	r0, #255	@ 0xff
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d2:	bf98      	it	ls
 80012d4:	2000      	movls	r0, #0
		return -1;
	}

	return 0;
}
 80012d6:	bd08      	pop	{r3, pc}
		return -1;
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012dc:	e7fb      	b.n	80012d6 <_check_string+0x12>
	...

080012e0 <parse_digest>:
 *
 * Returns the hash as a null terminated string. Should be free'd manually.
 */
int
parse_digest(digest_s *dig, const char *digest_string)
{
 80012e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int i = 0;
 80012e4:	2600      	movs	r6, #0
{
 80012e6:	b08f      	sub	sp, #60	@ 0x3c
 80012e8:	4605      	mov	r5, r0
 80012ea:	f10d 0808 	add.w	r8, sp, #8
	return strdup(header_value + 7);
 80012ee:	1dc8      	adds	r0, r1, #7
 80012f0:	f002 faba 	bl	8003868 <strdup>
 80012f4:	4644      	mov	r4, r8
		*(cursor++) = '\0';
 80012f6:	4637      	mov	r7, r6
	while (i < max_values && *cursor != '\0') {
 80012f8:	7803      	ldrb	r3, [r0, #0]
 80012fa:	b313      	cbz	r3, 8001342 <parse_digest+0x62>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
		while (' ' == *cursor || ',' == *cursor) {
 8001300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001304:	2a20      	cmp	r2, #32
 8001306:	d0fa      	beq.n	80012fe <parse_digest+0x1e>
 8001308:	2a2c      	cmp	r2, #44	@ 0x2c
 800130a:	d0f8      	beq.n	80012fe <parse_digest+0x1e>
		if ('\0' == *cursor) {
 800130c:	b1ca      	cbz	r2, 8001342 <parse_digest+0x62>
		if (NULL == (cursor = strchr(cursor, '='))) {
 800130e:	213d      	movs	r1, #61	@ 0x3d
		values[i++] = cursor;
 8001310:	f844 0b04 	str.w	r0, [r4], #4
 8001314:	3601      	adds	r6, #1
		if (NULL == (cursor = strchr(cursor, '='))) {
 8001316:	f002 fa99 	bl	800384c <strchr>
 800131a:	b190      	cbz	r0, 8001342 <parse_digest+0x62>
		if ('\"' == *(++cursor)) {
 800131c:	7841      	ldrb	r1, [r0, #1]
 800131e:	2922      	cmp	r1, #34	@ 0x22
 8001320:	d109      	bne.n	8001336 <parse_digest+0x56>
			if (NULL == (cursor = strchr(++cursor, '\"'))) {
 8001322:	3002      	adds	r0, #2
 8001324:	f002 fa92 	bl	800384c <strchr>
 8001328:	b158      	cbz	r0, 8001342 <parse_digest+0x62>
			cursor++;
 800132a:	3001      	adds	r0, #1
	while (i < max_values && *cursor != '\0') {
 800132c:	2e0c      	cmp	r6, #12
		*(cursor++) = '\0';
 800132e:	f800 7b01 	strb.w	r7, [r0], #1
	while (i < max_values && *cursor != '\0') {
 8001332:	d1e1      	bne.n	80012f8 <parse_digest+0x18>
 8001334:	e005      	b.n	8001342 <parse_digest+0x62>
			if (NULL == (cursor = strchr(cursor, ','))) {
 8001336:	212c      	movs	r1, #44	@ 0x2c
 8001338:	3001      	adds	r0, #1
 800133a:	f002 fa87 	bl	800384c <strchr>
 800133e:	2800      	cmp	r0, #0
 8001340:	d1f4      	bne.n	800132c <parse_digest+0x4c>
	int n, i = 0;
 8001342:	2700      	movs	r7, #0
	char *values[12];

	parameters = _crop_sentence(digest_string);
	n = _tokenize_sentence(parameters, values, ARRAY_LENGTH(values));

	while (i < n) {
 8001344:	42b7      	cmp	r7, r6
 8001346:	db03      	blt.n	8001350 <parse_digest+0x70>
			}
		}
	}

	return i;
}
 8001348:	4630      	mov	r0, r6
 800134a:	b00f      	add	sp, #60	@ 0x3c
 800134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (NULL == (val = values[i++])) {
 8001350:	f858 9b04 	ldr.w	r9, [r8], #4
 8001354:	3701      	adds	r7, #1
 8001356:	f1b9 0f00 	cmp.w	r9, #0
 800135a:	d0f3      	beq.n	8001344 <parse_digest+0x64>
		if (0 == strncmp("nonce=", val, strlen("nonce="))) {
 800135c:	2206      	movs	r2, #6
 800135e:	4649      	mov	r1, r9
 8001360:	483b      	ldr	r0, [pc, #236]	@ (8001450 <parse_digest+0x170>)
 8001362:	f002 fa9c 	bl	800389e <strncmp>
 8001366:	b920      	cbnz	r0, 8001372 <parse_digest+0x92>
			dig->nonce = _dgst_get_val(val);
 8001368:	4648      	mov	r0, r9
 800136a:	f7ff ff97 	bl	800129c <_dgst_get_val>
 800136e:	60e8      	str	r0, [r5, #12]
 8001370:	e7e8      	b.n	8001344 <parse_digest+0x64>
		} else if (0 == strncmp("realm=", val, strlen("realm="))) {
 8001372:	2206      	movs	r2, #6
 8001374:	4649      	mov	r1, r9
 8001376:	4837      	ldr	r0, [pc, #220]	@ (8001454 <parse_digest+0x174>)
 8001378:	f002 fa91 	bl	800389e <strncmp>
 800137c:	b920      	cbnz	r0, 8001388 <parse_digest+0xa8>
			dig->realm = _dgst_get_val(val);
 800137e:	4648      	mov	r0, r9
 8001380:	f7ff ff8c 	bl	800129c <_dgst_get_val>
 8001384:	60a8      	str	r0, [r5, #8]
 8001386:	e7dd      	b.n	8001344 <parse_digest+0x64>
		} else if (0 == strncmp("qop=", val, strlen("qop="))) {
 8001388:	2204      	movs	r2, #4
 800138a:	4649      	mov	r1, r9
 800138c:	4832      	ldr	r0, [pc, #200]	@ (8001458 <parse_digest+0x178>)
 800138e:	f002 fa86 	bl	800389e <strncmp>
 8001392:	4604      	mov	r4, r0
 8001394:	2800      	cmp	r0, #0
 8001396:	d13b      	bne.n	8001410 <parse_digest+0x130>
			char *qop_options = _dgst_get_val(val);
 8001398:	46ea      	mov	sl, sp
 800139a:	4648      	mov	r0, r9
 800139c:	f7ff ff7e 	bl	800129c <_dgst_get_val>
	while (i < max_values && '\0' != *sentence) {
 80013a0:	46d1      	mov	r9, sl
		*(sentence++) = '\0';
 80013a2:	46a3      	mov	fp, r4
	while (i < max_values && '\0' != *sentence) {
 80013a4:	7803      	ldrb	r3, [r0, #0]
 80013a6:	b143      	cbz	r3, 80013ba <parse_digest+0xda>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4618      	mov	r0, r3
		while (' ' == *sentence || ',' == *sentence) {
 80013ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013b0:	2a20      	cmp	r2, #32
 80013b2:	d0fa      	beq.n	80013aa <parse_digest+0xca>
 80013b4:	2a2c      	cmp	r2, #44	@ 0x2c
 80013b6:	d0f8      	beq.n	80013aa <parse_digest+0xca>
		if ('\0' == *sentence) {
 80013b8:	b98a      	cbnz	r2, 80013de <parse_digest+0xfe>
				if (0 == strncmp(qop_values[n_qops], "auth-int", strlen("auth-int"))) {
 80013ba:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 800145c <parse_digest+0x17c>
			while (n_qops-- > 0) {
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d0c0      	beq.n	8001344 <parse_digest+0x64>
 80013c2:	3c01      	subs	r4, #1
				if (0 == strncmp(qop_values[n_qops], "auth", strlen("auth"))) {
 80013c4:	f859 a024 	ldr.w	sl, [r9, r4, lsl #2]
 80013c8:	2204      	movs	r2, #4
 80013ca:	4650      	mov	r0, sl
 80013cc:	4924      	ldr	r1, [pc, #144]	@ (8001460 <parse_digest+0x180>)
 80013ce:	f002 fa66 	bl	800389e <strncmp>
 80013d2:	b990      	cbnz	r0, 80013fa <parse_digest+0x11a>
					dig->qop |= DIGEST_QOP_AUTH;
 80013d4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80013d6:	f043 0301 	orr.w	r3, r3, #1
					dig->qop |= DIGEST_QOP_AUTH_INT;
 80013da:	626b      	str	r3, [r5, #36]	@ 0x24
 80013dc:	e7ef      	b.n	80013be <parse_digest+0xde>
		if (NULL == (sentence = strchr(sentence, ','))) {
 80013de:	212c      	movs	r1, #44	@ 0x2c
		values[i++] = sentence;
 80013e0:	f84a 0b04 	str.w	r0, [sl], #4
 80013e4:	3401      	adds	r4, #1
		if (NULL == (sentence = strchr(sentence, ','))) {
 80013e6:	f002 fa31 	bl	800384c <strchr>
 80013ea:	2800      	cmp	r0, #0
 80013ec:	d0e5      	beq.n	80013ba <parse_digest+0xda>
	while (i < max_values && '\0' != *sentence) {
 80013ee:	2c02      	cmp	r4, #2
		*(sentence++) = '\0';
 80013f0:	f800 bb01 	strb.w	fp, [r0], #1
	while (i < max_values && '\0' != *sentence) {
 80013f4:	d0e1      	beq.n	80013ba <parse_digest+0xda>
 80013f6:	2401      	movs	r4, #1
 80013f8:	e7d4      	b.n	80013a4 <parse_digest+0xc4>
				if (0 == strncmp(qop_values[n_qops], "auth-int", strlen("auth-int"))) {
 80013fa:	2208      	movs	r2, #8
 80013fc:	4659      	mov	r1, fp
 80013fe:	4650      	mov	r0, sl
 8001400:	f002 fa4d 	bl	800389e <strncmp>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1da      	bne.n	80013be <parse_digest+0xde>
					dig->qop |= DIGEST_QOP_AUTH_INT;
 8001408:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	e7e4      	b.n	80013da <parse_digest+0xfa>
		} else if (0 == strncmp("opaque=", val, strlen("opaque="))) {
 8001410:	2207      	movs	r2, #7
 8001412:	4649      	mov	r1, r9
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <parse_digest+0x184>)
 8001416:	f002 fa42 	bl	800389e <strncmp>
 800141a:	b920      	cbnz	r0, 8001426 <parse_digest+0x146>
			dig->opaque = _dgst_get_val(val);
 800141c:	4648      	mov	r0, r9
 800141e:	f7ff ff3d 	bl	800129c <_dgst_get_val>
 8001422:	6168      	str	r0, [r5, #20]
 8001424:	e78e      	b.n	8001344 <parse_digest+0x64>
		} else if (0 == strncmp("algorithm=", val, strlen("algorithm="))) {
 8001426:	220a      	movs	r2, #10
 8001428:	4649      	mov	r1, r9
 800142a:	480f      	ldr	r0, [pc, #60]	@ (8001468 <parse_digest+0x188>)
 800142c:	f002 fa37 	bl	800389e <strncmp>
 8001430:	2800      	cmp	r0, #0
 8001432:	d187      	bne.n	8001344 <parse_digest+0x64>
			char *algorithm = _dgst_get_val(val);
 8001434:	4648      	mov	r0, r9
 8001436:	f7ff ff31 	bl	800129c <_dgst_get_val>
			if (0 == strncmp(algorithm, "MD5", strlen("MD5"))) {
 800143a:	2203      	movs	r2, #3
 800143c:	490b      	ldr	r1, [pc, #44]	@ (800146c <parse_digest+0x18c>)
 800143e:	f002 fa2e 	bl	800389e <strncmp>
 8001442:	2800      	cmp	r0, #0
 8001444:	f47f af7e 	bne.w	8001344 <parse_digest+0x64>
				dig->algorithm = DIGEST_ALGORITHM_MD5;
 8001448:	2301      	movs	r3, #1
 800144a:	f885 3020 	strb.w	r3, [r5, #32]
 800144e:	e779      	b.n	8001344 <parse_digest+0x64>
 8001450:	08004747 	.word	0x08004747
 8001454:	0800474e 	.word	0x0800474e
 8001458:	08004755 	.word	0x08004755
 800145c:	0800475a 	.word	0x0800475a
 8001460:	08004284 	.word	0x08004284
 8001464:	08004763 	.word	0x08004763
 8001468:	0800476b 	.word	0x0800476b
 800146c:	08004280 	.word	0x08004280

08001470 <parse_validate_attributes>:
 *
 * Returns 0 if valid, otherwise -1.
 */
int
parse_validate_attributes(digest_s *dig)
{
 8001470:	b510      	push	{r4, lr}
 8001472:	4604      	mov	r4, r0
	if (-1 == _check_string(dig->username)) {
 8001474:	6800      	ldr	r0, [r0, #0]
 8001476:	f7ff ff25 	bl	80012c4 <_check_string>
 800147a:	1c43      	adds	r3, r0, #1
 800147c:	d01e      	beq.n	80014bc <parse_validate_attributes+0x4c>
		return -1;
	}
	if (-1 == _check_string(dig->password)) {
 800147e:	6860      	ldr	r0, [r4, #4]
 8001480:	f7ff ff20 	bl	80012c4 <_check_string>
 8001484:	1c41      	adds	r1, r0, #1
 8001486:	d019      	beq.n	80014bc <parse_validate_attributes+0x4c>
		return -1;
	}
	if (-1 == _check_string(dig->uri)) {
 8001488:	69a0      	ldr	r0, [r4, #24]
 800148a:	f7ff ff1b 	bl	80012c4 <_check_string>
 800148e:	1c42      	adds	r2, r0, #1
 8001490:	d014      	beq.n	80014bc <parse_validate_attributes+0x4c>
		return -1;
	}
	if (-1 == _check_string(dig->realm)) {
 8001492:	68a0      	ldr	r0, [r4, #8]
 8001494:	f7ff ff16 	bl	80012c4 <_check_string>
 8001498:	1c43      	adds	r3, r0, #1
 800149a:	d00f      	beq.n	80014bc <parse_validate_attributes+0x4c>
		return -1;
	}
	if (NULL != dig->opaque && 255 < strlen(dig->opaque)) {
 800149c:	6960      	ldr	r0, [r4, #20]
 800149e:	b118      	cbz	r0, 80014a8 <parse_validate_attributes+0x38>
 80014a0:	f7fe fe54 	bl	800014c <strlen>
 80014a4:	28ff      	cmp	r0, #255	@ 0xff
 80014a6:	d80a      	bhi.n	80014be <parse_validate_attributes+0x4e>
		return -1;
	}

	/* nonce */
	if (DIGEST_QOP_NOT_SET != dig->qop && -1 == _check_string(dig->nonce)) {
 80014a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80014aa:	b138      	cbz	r0, 80014bc <parse_validate_attributes+0x4c>
 80014ac:	68e0      	ldr	r0, [r4, #12]
 80014ae:	f7ff ff09 	bl	80012c4 <_check_string>
 80014b2:	3001      	adds	r0, #1
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b8:	bf18      	it	ne
 80014ba:	2000      	movne	r0, #0
		return -1;
	}

	return 0;
}
 80014bc:	bd10      	pop	{r4, pc}
		return -1;
 80014be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014c2:	e7fb      	b.n	80014bc <parse_validate_attributes+0x4c>

080014c4 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80014c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014c6:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80014c8:	4c14      	ldr	r4, [pc, #80]	@ (800151c <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014ca:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 80014ce:	68e3      	ldr	r3, [r4, #12]
 80014d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80014d2:	6963      	ldr	r3, [r4, #20]
 80014d4:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014d8:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014dc:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014de:	b10b      	cbz	r3, 80014e4 <WIZCHIP_READ+0x20>
 80014e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80014e2:	b98b      	cbnz	r3, 8001508 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80014e4:	6a23      	ldr	r3, [r4, #32]
 80014e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80014e8:	4630      	mov	r0, r6
 80014ea:	6a23      	ldr	r3, [r4, #32]
 80014ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80014ee:	4628      	mov	r0, r5
 80014f0:	6a23      	ldr	r3, [r4, #32]
 80014f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80014f4:	69e3      	ldr	r3, [r4, #28]
 80014f6:	4798      	blx	r3
 80014f8:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 80014fa:	69a3      	ldr	r3, [r4, #24]
 80014fc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014fe:	6923      	ldr	r3, [r4, #16]
 8001500:	4798      	blx	r3
   return ret;
}
 8001502:	4628      	mov	r0, r5
 8001504:	b002      	add	sp, #8
 8001506:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001508:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800150c:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800150e:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001512:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001516:	a801      	add	r0, sp, #4
 8001518:	4798      	blx	r3
 800151a:	e7eb      	b.n	80014f4 <WIZCHIP_READ+0x30>
 800151c:	2000001c 	.word	0x2000001c

08001520 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001522:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8001524:	4c16      	ldr	r4, [pc, #88]	@ (8001580 <WIZCHIP_WRITE+0x60>)
{
 8001526:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8001528:	68e3      	ldr	r3, [r4, #12]
 800152a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800152c:	6963      	ldr	r3, [r4, #20]
 800152e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001530:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001532:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001536:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800153a:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800153c:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001540:	b983      	cbnz	r3, 8001564 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001542:	6a23      	ldr	r3, [r4, #32]
 8001544:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001546:	4628      	mov	r0, r5
 8001548:	6a23      	ldr	r3, [r4, #32]
 800154a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800154c:	4638      	mov	r0, r7
 800154e:	6a23      	ldr	r3, [r4, #32]
 8001550:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001552:	4630      	mov	r0, r6
 8001554:	6a23      	ldr	r3, [r4, #32]
 8001556:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8001558:	69a3      	ldr	r3, [r4, #24]
 800155a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800155c:	6923      	ldr	r3, [r4, #16]
 800155e:	4798      	blx	r3
}
 8001560:	b003      	add	sp, #12
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001564:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001566:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800156a:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800156e:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 8001572:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001576:	eb0d 0001 	add.w	r0, sp, r1
 800157a:	4798      	blx	r3
 800157c:	e7ec      	b.n	8001558 <WIZCHIP_WRITE+0x38>
 800157e:	bf00      	nop
 8001580:	2000001c 	.word	0x2000001c

08001584 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001588:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800158a:	4c1a      	ldr	r4, [pc, #104]	@ (80015f4 <WIZCHIP_READ_BUF+0x70>)
{
 800158c:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 800158e:	68e3      	ldr	r3, [r4, #12]
{
 8001590:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 8001592:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001594:	6963      	ldr	r3, [r4, #20]
 8001596:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001598:	6a63      	ldr	r3, [r4, #36]	@ 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800159a:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800159e:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015a2:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015a4:	b10b      	cbz	r3, 80015aa <WIZCHIP_READ_BUF+0x26>
 80015a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80015a8:	b9b3      	cbnz	r3, 80015d8 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80015aa:	6a23      	ldr	r3, [r4, #32]
 80015ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80015ae:	4640      	mov	r0, r8
 80015b0:	6a23      	ldr	r3, [r4, #32]
 80015b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80015b4:	4628      	mov	r0, r5
 80015b6:	6a23      	ldr	r3, [r4, #32]
 80015b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80015ba:	4437      	add	r7, r6
 80015bc:	42b7      	cmp	r7, r6
 80015be:	d106      	bne.n	80015ce <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 80015c0:	69a3      	ldr	r3, [r4, #24]
 80015c2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015c4:	6923      	ldr	r3, [r4, #16]
 80015c6:	4798      	blx	r3
}
 80015c8:	b002      	add	sp, #8
 80015ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80015ce:	69e3      	ldr	r3, [r4, #28]
 80015d0:	4798      	blx	r3
 80015d2:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 80015d6:	e7f1      	b.n	80015bc <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015d8:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015dc:	2103      	movs	r1, #3
 80015de:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015e0:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015e4:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80015ea:	4639      	mov	r1, r7
 80015ec:	4630      	mov	r0, r6
 80015ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80015f0:	4798      	blx	r3
 80015f2:	e7e5      	b.n	80015c0 <WIZCHIP_READ_BUF+0x3c>
 80015f4:	2000001c 	.word	0x2000001c

080015f8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80015f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80015fc:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80015fe:	4c1a      	ldr	r4, [pc, #104]	@ (8001668 <WIZCHIP_WRITE_BUF+0x70>)
{
 8001600:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 8001602:	68e3      	ldr	r3, [r4, #12]
{
 8001604:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 8001606:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001608:	6963      	ldr	r3, [r4, #20]
 800160a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800160c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800160e:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001612:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001616:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001618:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800161c:	b9b3      	cbnz	r3, 800164c <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800161e:	6a23      	ldr	r3, [r4, #32]
 8001620:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001622:	4628      	mov	r0, r5
 8001624:	6a23      	ldr	r3, [r4, #32]
 8001626:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001628:	4630      	mov	r0, r6
 800162a:	6a23      	ldr	r3, [r4, #32]
 800162c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800162e:	44b8      	add	r8, r7
 8001630:	45b8      	cmp	r8, r7
 8001632:	d106      	bne.n	8001642 <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8001634:	69a3      	ldr	r3, [r4, #24]
 8001636:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001638:	6923      	ldr	r3, [r4, #16]
 800163a:	4798      	blx	r3
}
 800163c:	b002      	add	sp, #8
 800163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001642:	6a23      	ldr	r3, [r4, #32]
 8001644:	f817 0b01 	ldrb.w	r0, [r7], #1
 8001648:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800164a:	e7f1      	b.n	8001630 <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800164c:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001650:	2103      	movs	r1, #3
 8001652:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001654:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001658:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800165c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800165e:	4641      	mov	r1, r8
 8001660:	4638      	mov	r0, r7
 8001662:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001664:	4798      	blx	r3
 8001666:	e7e5      	b.n	8001634 <WIZCHIP_WRITE_BUF+0x3c>
 8001668:	2000001c 	.word	0x2000001c

0800166c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 800166e:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001670:	0144      	lsls	r4, r0, #5
 8001672:	3408      	adds	r4, #8
 8001674:	f504 5700 	add.w	r7, r4, #8192	@ 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001678:	f504 5404 	add.w	r4, r4, #8448	@ 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800167c:	4638      	mov	r0, r7
 800167e:	f7ff ff21 	bl	80014c4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001682:	0206      	lsls	r6, r0, #8
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff ff1d 	bl	80014c4 <WIZCHIP_READ>
 800168a:	b2b6      	uxth	r6, r6
 800168c:	4406      	add	r6, r0
 800168e:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 8001690:	b14e      	cbz	r6, 80016a6 <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001692:	4638      	mov	r0, r7
 8001694:	f7ff ff16 	bl	80014c4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001698:	0205      	lsls	r5, r0, #8
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff ff12 	bl	80014c4 <WIZCHIP_READ>
 80016a0:	b2ad      	uxth	r5, r5
 80016a2:	4405      	add	r5, r0
 80016a4:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 80016a6:	42b5      	cmp	r5, r6
 80016a8:	d1e8      	bne.n	800167c <getSn_TX_FSR+0x10>
   return val;
}
 80016aa:	4628      	mov	r0, r5
 80016ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016ae <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80016ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 80016b0:	2500      	movs	r5, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016b2:	0144      	lsls	r4, r0, #5
 80016b4:	3408      	adds	r4, #8
 80016b6:	f504 5718 	add.w	r7, r4, #9728	@ 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016ba:	f504 541c 	add.w	r4, r4, #9984	@ 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016be:	4638      	mov	r0, r7
 80016c0:	f7ff ff00 	bl	80014c4 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016c4:	0206      	lsls	r6, r0, #8
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fefc 	bl	80014c4 <WIZCHIP_READ>
 80016cc:	b2b6      	uxth	r6, r6
 80016ce:	4406      	add	r6, r0
 80016d0:	b2b6      	uxth	r6, r6
      if (val1 != 0)
 80016d2:	b14e      	cbz	r6, 80016e8 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80016d4:	4638      	mov	r0, r7
 80016d6:	f7ff fef5 	bl	80014c4 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80016da:	0205      	lsls	r5, r0, #8
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fef1 	bl	80014c4 <WIZCHIP_READ>
 80016e2:	b2ad      	uxth	r5, r5
 80016e4:	4405      	add	r5, r0
 80016e6:	b2ad      	uxth	r5, r5
      }
   }while (val != val1);
 80016e8:	42b5      	cmp	r5, r6
 80016ea:	d1e8      	bne.n	80016be <getSn_RX_RSR+0x10>
   return val;
}
 80016ec:	4628      	mov	r0, r5
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016f0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80016f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016f4:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 80016f6:	4614      	mov	r4, r2
 80016f8:	b32a      	cbz	r2, 8001746 <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 80016fa:	0085      	lsls	r5, r0, #2
 80016fc:	1c6f      	adds	r7, r5, #1
 80016fe:	00ff      	lsls	r7, r7, #3
 8001700:	f507 5810 	add.w	r8, r7, #9216	@ 0x2400
 8001704:	4640      	mov	r0, r8
 8001706:	f7ff fedd 	bl	80014c4 <WIZCHIP_READ>
 800170a:	f507 5714 	add.w	r7, r7, #9472	@ 0x2500
 800170e:	4606      	mov	r6, r0
 8001710:	4638      	mov	r0, r7
 8001712:	f7ff fed7 	bl	80014c4 <WIZCHIP_READ>
 8001716:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800171a:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800171c:	3502      	adds	r5, #2
 800171e:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001720:	4622      	mov	r2, r4
 8001722:	4649      	mov	r1, r9
 8001724:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001728:	f7ff ff66 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800172c:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 800172e:	4640      	mov	r0, r8
   ptr += len;
 8001730:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 8001732:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001736:	f7ff fef3 	bl	8001520 <WIZCHIP_WRITE>
 800173a:	4638      	mov	r0, r7
 800173c:	b2e1      	uxtb	r1, r4
}
 800173e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8001742:	f7ff beed 	b.w	8001520 <WIZCHIP_WRITE>
}
 8001746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800174a <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800174a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800174e:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8001750:	4614      	mov	r4, r2
 8001752:	b32a      	cbz	r2, 80017a0 <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 8001754:	0085      	lsls	r5, r0, #2
 8001756:	1c6f      	adds	r7, r5, #1
 8001758:	00ff      	lsls	r7, r7, #3
 800175a:	f507 5820 	add.w	r8, r7, #10240	@ 0x2800
 800175e:	4640      	mov	r0, r8
 8001760:	f7ff feb0 	bl	80014c4 <WIZCHIP_READ>
 8001764:	f507 5724 	add.w	r7, r7, #10496	@ 0x2900
 8001768:	4606      	mov	r6, r0
 800176a:	4638      	mov	r0, r7
 800176c:	f7ff feaa 	bl	80014c4 <WIZCHIP_READ>
 8001770:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8001774:	b286      	uxth	r6, r0
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001776:	3503      	adds	r5, #3
 8001778:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800177a:	4622      	mov	r2, r4
 800177c:	4649      	mov	r1, r9
 800177e:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8001782:	f7ff feff 	bl	8001584 <WIZCHIP_READ_BUF>
   ptr += len;
 8001786:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 8001788:	4640      	mov	r0, r8
   ptr += len;
 800178a:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 800178c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8001790:	f7ff fec6 	bl	8001520 <WIZCHIP_WRITE>
 8001794:	4638      	mov	r0, r7
 8001796:	b2e1      	uxtb	r1, r4
}
 8001798:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 800179c:	f7ff bec0 	b.w	8001520 <WIZCHIP_WRITE>
}
 80017a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080017a4 <W5500_Unselect>:
}


/* --- Callbacks --- */
static void W5500_Select(void)   { HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); }
static void W5500_Unselect(void) { HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); }
 80017a4:	2201      	movs	r2, #1
 80017a6:	2110      	movs	r1, #16
 80017a8:	4801      	ldr	r0, [pc, #4]	@ (80017b0 <W5500_Unselect+0xc>)
 80017aa:	f001 ba5f 	b.w	8002c6c <HAL_GPIO_WritePin>
 80017ae:	bf00      	nop
 80017b0:	40010800 	.word	0x40010800

080017b4 <W5500_Select>:
static void W5500_Select(void)   { HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET); }
 80017b4:	2200      	movs	r2, #0
 80017b6:	2110      	movs	r1, #16
 80017b8:	4801      	ldr	r0, [pc, #4]	@ (80017c0 <W5500_Select+0xc>)
 80017ba:	f001 ba57 	b.w	8002c6c <HAL_GPIO_WritePin>
 80017be:	bf00      	nop
 80017c0:	40010800 	.word	0x40010800

080017c4 <W5500_WriteByte>:
    uint8_t byte;
    HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
    return byte;
}

static void W5500_WriteByte(uint8_t byte) {
 80017c4:	b507      	push	{r0, r1, r2, lr}
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
static void W5500_WriteByte(uint8_t byte) {
 80017ca:	f88d 0007 	strb.w	r0, [sp, #7]
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f10d 0107 	add.w	r1, sp, #7
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <W5500_WriteByte+0x1c>)
 80017d6:	f001 fd6c 	bl	80032b2 <HAL_SPI_Transmit>
}
 80017da:	b003      	add	sp, #12
 80017dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e0:	200010dc 	.word	0x200010dc

080017e4 <W5500_ReadByte>:
static uint8_t W5500_ReadByte(void) {
 80017e4:	b507      	push	{r0, r1, r2, lr}
    HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ea:	2201      	movs	r2, #1
 80017ec:	f10d 0107 	add.w	r1, sp, #7
 80017f0:	4803      	ldr	r0, [pc, #12]	@ (8001800 <W5500_ReadByte+0x1c>)
 80017f2:	f001 fef3 	bl	80035dc <HAL_SPI_Receive>
}
 80017f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80017fa:	b003      	add	sp, #12
 80017fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001800:	200010dc 	.word	0x200010dc

08001804 <update_gWIZNETINFO_from_device_config>:
        gWIZNETINFO.mac[i] = device_config.mac[i];
 8001804:	4a0c      	ldr	r2, [pc, #48]	@ (8001838 <update_gWIZNETINFO_from_device_config+0x34>)
 8001806:	4b0d      	ldr	r3, [pc, #52]	@ (800183c <update_gWIZNETINFO_from_device_config+0x38>)
 8001808:	8891      	ldrh	r1, [r2, #4]
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	8099      	strh	r1, [r3, #4]
        gWIZNETINFO.ip[i] = device_config.ip[i];
 800180e:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gWIZNETINFO.mac[i] = device_config.mac[i];
 8001812:	6018      	str	r0, [r3, #0]
        gWIZNETINFO.ip[i] = device_config.ip[i];
 8001814:	f8c3 1006 	str.w	r1, [r3, #6]
        gWIZNETINFO.sn[i] = device_config.sn[i];
 8001818:	f8d2 100a 	ldr.w	r1, [r2, #10]
 800181c:	f8c3 100a 	str.w	r1, [r3, #10]
        gWIZNETINFO.gw[i] = device_config.gw[i];
 8001820:	f8d2 100e 	ldr.w	r1, [r2, #14]
 8001824:	f8c3 100e 	str.w	r1, [r3, #14]
        gWIZNETINFO.dns[i] = device_config.dns[i];
 8001828:	f8d2 1012 	ldr.w	r1, [r2, #18]
    gWIZNETINFO.dhcp = device_config.dhcp; // Assigned at runtime
 800182c:	7d92      	ldrb	r2, [r2, #22]
        gWIZNETINFO.dns[i] = device_config.dns[i];
 800182e:	f8c3 1012 	str.w	r1, [r3, #18]
    gWIZNETINFO.dhcp = device_config.dhcp; // Assigned at runtime
 8001832:	759a      	strb	r2, [r3, #22]
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000048 	.word	0x20000048
 800183c:	20000000 	.word	0x20000000

08001840 <ETH_W5500_Init>:

/* --- Public API --- */
void ETH_W5500_Init(void) {
 8001840:	b513      	push	{r0, r1, r4, lr}
	update_gWIZNETINFO_from_device_config();;
    // Reset chip
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001842:	4c19      	ldr	r4, [pc, #100]	@ (80018a8 <ETH_W5500_Init+0x68>)
	update_gWIZNETINFO_from_device_config();;
 8001844:	f7ff ffde 	bl	8001804 <update_gWIZNETINFO_from_device_config>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	4620      	mov	r0, r4
 800184e:	f001 fa0d 	bl	8002c6c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 ffae 	bl	80027b4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	4620      	mov	r0, r4
 800185c:	4611      	mov	r1, r2
 800185e:	f001 fa05 	bl	8002c6c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001862:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001866:	f000 ffa5 	bl	80027b4 <HAL_Delay>

    // Register SPI callbacks
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800186a:	4910      	ldr	r1, [pc, #64]	@ (80018ac <ETH_W5500_Init+0x6c>)
 800186c:	4810      	ldr	r0, [pc, #64]	@ (80018b0 <ETH_W5500_Init+0x70>)
 800186e:	f000 fb3b 	bl	8001ee8 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8001872:	4910      	ldr	r1, [pc, #64]	@ (80018b4 <ETH_W5500_Init+0x74>)
 8001874:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <ETH_W5500_Init+0x78>)
 8001876:	f000 fb45 	bl	8001f04 <reg_wizchip_spi_cbfunc>

    // Init memory
    uint8_t rx_tx_buff_sizes[8] = {2,2,2,2,2,2,2,2};
 800187a:	466b      	mov	r3, sp
 800187c:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <ETH_W5500_Init+0x7c>)
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);

    // Apply default net info
    wizchip_setnetinfo(&gWIZNETINFO);
 800187e:	4c10      	ldr	r4, [pc, #64]	@ (80018c0 <ETH_W5500_Init+0x80>)
    uint8_t rx_tx_buff_sizes[8] = {2,2,2,2,2,2,2,2};
 8001880:	6810      	ldr	r0, [r2, #0]
 8001882:	6851      	ldr	r1, [r2, #4]
 8001884:	c303      	stmia	r3!, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8001886:	4669      	mov	r1, sp
 8001888:	4608      	mov	r0, r1
 800188a:	f000 fb8a 	bl	8001fa2 <wizchip_init>
    wizchip_setnetinfo(&gWIZNETINFO);
 800188e:	4620      	mov	r0, r4
 8001890:	f000 fbca 	bl	8002028 <wizchip_setnetinfo>
    ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8001894:	4621      	mov	r1, r4
 8001896:	2000      	movs	r0, #0
 8001898:	f000 fc60 	bl	800215c <ctlnetwork>
    HAL_Delay(500);
 800189c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018a0:	f000 ff88 	bl	80027b4 <HAL_Delay>
}
 80018a4:	b002      	add	sp, #8
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	080017a5 	.word	0x080017a5
 80018b0:	080017b5 	.word	0x080017b5
 80018b4:	080017c5 	.word	0x080017c5
 80018b8:	080017e5 	.word	0x080017e5
 80018bc:	08004776 	.word	0x08004776
 80018c0:	20000000 	.word	0x20000000

080018c4 <ETH_W5500_Tick>:
    wizchip_getnetinfo(info);
}

void ETH_W5500_Tick(void) {
    // сюда можно вставить проверку линка или dhcp
     ctlnetwork(CN_GET_NETINFO, &gWIZNETINFO);
 80018c4:	2001      	movs	r0, #1
 80018c6:	4901      	ldr	r1, [pc, #4]	@ (80018cc <ETH_W5500_Tick+0x8>)
 80018c8:	f000 bc48 	b.w	800215c <ctlnetwork>
 80018cc:	20000000 	.word	0x20000000

080018d0 <ETH_W5500_PrintNetInfo>:
}

void ETH_W5500_PrintNetInfo(void) {
 80018d0:	b500      	push	{lr}
 80018d2:	b08b      	sub	sp, #44	@ 0x2c
    wiz_NetInfo netinfo;
    wizchip_getnetinfo(&netinfo);
 80018d4:	a804      	add	r0, sp, #16
 80018d6:	f000 fbd5 	bl	8002084 <wizchip_getnetinfo>

    LOGI("W5500 NetInfo:");
 80018da:	2001      	movs	r0, #1
 80018dc:	4933      	ldr	r1, [pc, #204]	@ (80019ac <ETH_W5500_PrintNetInfo+0xdc>)
 80018de:	f000 fcb9 	bl	8002254 <log_message_internal>
    LOGI("  MAC  %02X:%02X:%02X:%02X:%02X:%02X",
 80018e2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80018e6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80018ea:	9303      	str	r3, [sp, #12]
 80018ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80018f0:	2001      	movs	r0, #1
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80018f8:	492d      	ldr	r1, [pc, #180]	@ (80019b0 <ETH_W5500_PrintNetInfo+0xe0>)
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001906:	f000 fca5 	bl	8002254 <log_message_internal>
         netinfo.mac[0], netinfo.mac[1], netinfo.mac[2],
         netinfo.mac[3], netinfo.mac[4], netinfo.mac[5]);
    Logger_Process();
 800190a:	f000 fd23 	bl	8002354 <Logger_Process>

    LOGI("  IP   %d.%d.%d.%d",
 800190e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001912:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800191c:	2001      	movs	r0, #1
 800191e:	4925      	ldr	r1, [pc, #148]	@ (80019b4 <ETH_W5500_PrintNetInfo+0xe4>)
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001926:	f000 fc95 	bl	8002254 <log_message_internal>
         netinfo.ip[0], netinfo.ip[1], netinfo.ip[2], netinfo.ip[3]);
    Logger_Process();
 800192a:	f000 fd13 	bl	8002354 <Logger_Process>

    LOGI("  GW   %d.%d.%d.%d",
 800192e:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8001932:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800193c:	2001      	movs	r0, #1
 800193e:	491e      	ldr	r1, [pc, #120]	@ (80019b8 <ETH_W5500_PrintNetInfo+0xe8>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001946:	f000 fc85 	bl	8002254 <log_message_internal>
         netinfo.gw[0], netinfo.gw[1], netinfo.gw[2], netinfo.gw[3]);
    Logger_Process();
 800194a:	f000 fd03 	bl	8002354 <Logger_Process>

    LOGI("  MASK %d.%d.%d.%d",
 800194e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8001952:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800195c:	2001      	movs	r0, #1
 800195e:	4917      	ldr	r1, [pc, #92]	@ (80019bc <ETH_W5500_PrintNetInfo+0xec>)
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001966:	f000 fc75 	bl	8002254 <log_message_internal>
         netinfo.sn[0], netinfo.sn[1], netinfo.sn[2], netinfo.sn[3]);
    Logger_Process();
 800196a:	f000 fcf3 	bl	8002354 <Logger_Process>

    LOGI("  DNS  %d.%d.%d.%d",
 800196e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8001972:	f89d 2022 	ldrb.w	r2, [sp, #34]	@ 0x22
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800197c:	2001      	movs	r0, #1
 800197e:	4910      	ldr	r1, [pc, #64]	@ (80019c0 <ETH_W5500_PrintNetInfo+0xf0>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001986:	f000 fc65 	bl	8002254 <log_message_internal>
         netinfo.dns[0], netinfo.dns[1], netinfo.dns[2], netinfo.dns[3]);
    Logger_Process();
 800198a:	f000 fce3 	bl	8002354 <Logger_Process>

    LOGI("  DHCP %s", (netinfo.dhcp == NETINFO_DHCP) ? "ON" : "OFF");
 800198e:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <ETH_W5500_PrintNetInfo+0xf4>)
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <ETH_W5500_PrintNetInfo+0xf8>)
 8001996:	2001      	movs	r0, #1
 8001998:	2902      	cmp	r1, #2
 800199a:	bf08      	it	eq
 800199c:	461a      	moveq	r2, r3
 800199e:	490b      	ldr	r1, [pc, #44]	@ (80019cc <ETH_W5500_PrintNetInfo+0xfc>)
 80019a0:	f000 fc58 	bl	8002254 <log_message_internal>
}
 80019a4:	b00b      	add	sp, #44	@ 0x2c
 80019a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019aa:	bf00      	nop
 80019ac:	08004786 	.word	0x08004786
 80019b0:	08004795 	.word	0x08004795
 80019b4:	080047ba 	.word	0x080047ba
 80019b8:	080047cd 	.word	0x080047cd
 80019bc:	080047e0 	.word	0x080047e0
 80019c0:	080047f3 	.word	0x080047f3
 80019c4:	0800477f 	.word	0x0800477f
 80019c8:	08004782 	.word	0x08004782
 80019cc:	08004806 	.word	0x08004806

080019d0 <connect_IO_6>:
static int8_t connect_IO_6 (uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen )
{ 

   // printf(" connect - addrlen = %d \r\n" , addrlen );

   CHECK_SOCKNUM();
 80019d0:	2807      	cmp	r0, #7
{ 
 80019d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019d6:	4606      	mov	r6, r0
 80019d8:	460d      	mov	r5, r1
 80019da:	4617      	mov	r7, r2
 80019dc:	4699      	mov	r9, r3
   CHECK_SOCKNUM();
 80019de:	d865      	bhi.n	8001aac <connect_IO_6+0xdc>
   CHECK_TCPMODE(); // same macro " CHECK_SOCKMODE(Sn_MR_TCP);"
 80019e0:	0144      	lsls	r4, r0, #5
 80019e2:	3408      	adds	r4, #8
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fd6d 	bl	80014c4 <WIZCHIP_READ>
 80019ea:	f000 0003 	and.w	r0, r0, #3
 80019ee:	2801      	cmp	r0, #1
 80019f0:	d003      	beq.n	80019fa <connect_IO_6+0x2a>
 80019f2:	f06f 0004 	mvn.w	r0, #4
         return SOCKERR_SOCKCLOSED;
      }
   } 
   
   return SOCK_OK;
}
 80019f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   CHECK_SOCKINIT();
 80019fa:	f504 7840 	add.w	r8, r4, #768	@ 0x300
 80019fe:	4640      	mov	r0, r8
 8001a00:	f7ff fd60 	bl	80014c4 <WIZCHIP_READ>
 8001a04:	2813      	cmp	r0, #19
 8001a06:	d154      	bne.n	8001ab2 <connect_IO_6+0xe2>
   taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001a08:	882a      	ldrh	r2, [r5, #0]
 8001a0a:	78ab      	ldrb	r3, [r5, #2]
 8001a0c:	ba52      	rev16	r2, r2
 8001a0e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001a12:	78ea      	ldrb	r2, [r5, #3]
   if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001a14:	3a01      	subs	r2, #1
 8001a16:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001a1a:	3203      	adds	r2, #3
 8001a1c:	d84c      	bhi.n	8001ab8 <connect_IO_6+0xe8>
   if(port == 0) return SOCKERR_PORTZERO;
 8001a1e:	2f00      	cmp	r7, #0
 8001a20:	d04d      	beq.n	8001abe <connect_IO_6+0xee>
   setSn_DPORTR(sn, port);
 8001a22:	0a39      	lsrs	r1, r7, #8
 8001a24:	f504 5080 	add.w	r0, r4, #4096	@ 0x1000
 8001a28:	f7ff fd7a 	bl	8001520 <WIZCHIP_WRITE>
 8001a2c:	b2f9      	uxtb	r1, r7
 8001a2e:	f504 5088 	add.w	r0, r4, #4352	@ 0x1100
 8001a32:	f7ff fd75 	bl	8001520 <WIZCHIP_WRITE>
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 8001a36:	f1b9 0f10 	cmp.w	r9, #16
 8001a3a:	d0da      	beq.n	80019f2 <connect_IO_6+0x22>
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff fd41 	bl	80014c4 <WIZCHIP_READ>
 8001a42:	2809      	cmp	r0, #9
 8001a44:	d0d5      	beq.n	80019f2 <connect_IO_6+0x22>
      setSn_DIPR(sn,addr);
 8001a46:	4629      	mov	r1, r5
 8001a48:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
 8001a4c:	2204      	movs	r2, #4
      setSn_CR(sn,Sn_CR_CONNECT);
 8001a4e:	f504 7580 	add.w	r5, r4, #256	@ 0x100
      setSn_DIPR(sn,addr);
 8001a52:	f7ff fdd1 	bl	80015f8 <WIZCHIP_WRITE_BUF>
      setSn_CR(sn,Sn_CR_CONNECT);
 8001a56:	2104      	movs	r1, #4
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f7ff fd61 	bl	8001520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001a5e:	4628      	mov	r0, r5
 8001a60:	f7ff fd30 	bl	80014c4 <WIZCHIP_READ>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d1fa      	bne.n	8001a5e <connect_IO_6+0x8e>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <connect_IO_6+0xf4>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	4133      	asrs	r3, r6
 8001a6e:	07da      	lsls	r2, r3, #31
 8001a70:	d4c1      	bmi.n	80019f6 <connect_IO_6+0x26>
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001a72:	f504 7400 	add.w	r4, r4, #512	@ 0x200
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001a76:	4640      	mov	r0, r8
 8001a78:	f7ff fd24 	bl	80014c4 <WIZCHIP_READ>
 8001a7c:	2817      	cmp	r0, #23
 8001a7e:	d101      	bne.n	8001a84 <connect_IO_6+0xb4>
   return SOCK_OK;
 8001a80:	2001      	movs	r0, #1
 8001a82:	e7b8      	b.n	80019f6 <connect_IO_6+0x26>
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fd1d 	bl	80014c4 <WIZCHIP_READ>
 8001a8a:	0703      	lsls	r3, r0, #28
 8001a8c:	d506      	bpl.n	8001a9c <connect_IO_6+0xcc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	2108      	movs	r1, #8
 8001a92:	f7ff fd45 	bl	8001520 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001a96:	f06f 000c 	mvn.w	r0, #12
 8001a9a:	e7ac      	b.n	80019f6 <connect_IO_6+0x26>
      if (getSn_SR(sn) == SOCK_CLOSED)
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	f7ff fd11 	bl	80014c4 <WIZCHIP_READ>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d1e7      	bne.n	8001a76 <connect_IO_6+0xa6>
         return SOCKERR_SOCKCLOSED;
 8001aa6:	f06f 0003 	mvn.w	r0, #3
 8001aaa:	e7a4      	b.n	80019f6 <connect_IO_6+0x26>
   CHECK_SOCKNUM();
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ab0:	e7a1      	b.n	80019f6 <connect_IO_6+0x26>
   CHECK_SOCKINIT();
 8001ab2:	f06f 0002 	mvn.w	r0, #2
 8001ab6:	e79e      	b.n	80019f6 <connect_IO_6+0x26>
   if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001ab8:	f06f 000b 	mvn.w	r0, #11
 8001abc:	e79b      	b.n	80019f6 <connect_IO_6+0x26>
   if(port == 0) return SOCKERR_PORTZERO;
 8001abe:	f06f 000a 	mvn.w	r0, #10
 8001ac2:	e798      	b.n	80019f6 <connect_IO_6+0x26>
 8001ac4:	20000ece 	.word	0x20000ece

08001ac8 <close>:
   CHECK_SOCKNUM();
 8001ac8:	2807      	cmp	r0, #7
{
 8001aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001acc:	4604      	mov	r4, r0
   CHECK_SOCKNUM();
 8001ace:	d82d      	bhi.n	8001b2c <close+0x64>
   setSn_CR(sn,Sn_CR_CLOSE);
 8001ad0:	0147      	lsls	r7, r0, #5
 8001ad2:	f107 0608 	add.w	r6, r7, #8
 8001ad6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001ada:	2110      	movs	r1, #16
 8001adc:	4638      	mov	r0, r7
 8001ade:	f7ff fd1f 	bl	8001520 <WIZCHIP_WRITE>
   while( getSn_CR(sn) );
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	f7ff fcee 	bl	80014c4 <WIZCHIP_READ>
 8001ae8:	4605      	mov	r5, r0
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d1f9      	bne.n	8001ae2 <close+0x1a>
   setSn_IR(sn, 0xFF);  	
 8001aee:	211f      	movs	r1, #31
 8001af0:	f506 7000 	add.w	r0, r6, #512	@ 0x200
 8001af4:	f7ff fd14 	bl	8001520 <WIZCHIP_WRITE>
   sock_io_mode &= ~(1<<sn); 
 8001af8:	2301      	movs	r3, #1
 8001afa:	40a3      	lsls	r3, r4
 8001afc:	43db      	mvns	r3, r3
 8001afe:	490d      	ldr	r1, [pc, #52]	@ (8001b34 <close+0x6c>)
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	880a      	ldrh	r2, [r1, #0]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8001b04:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_io_mode &= ~(1<<sn); 
 8001b08:	401a      	ands	r2, r3
 8001b0a:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <close+0x70>)
 8001b0e:	8811      	ldrh	r1, [r2, #0]
 8001b10:	400b      	ands	r3, r1
 8001b12:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <close+0x74>)
 8001b16:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <close+0x78>)
 8001b1c:	551d      	strb	r5, [r3, r4]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7ff fcd0 	bl	80014c4 <WIZCHIP_READ>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d1fa      	bne.n	8001b1e <close+0x56>
 8001b28:	2001      	movs	r0, #1
}
 8001b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b30:	e7fb      	b.n	8001b2a <close+0x62>
 8001b32:	bf00      	nop
 8001b34:	20000ece 	.word	0x20000ece
 8001b38:	20000ecc 	.word	0x20000ecc
 8001b3c:	20000ebc 	.word	0x20000ebc
 8001b40:	20000eb3 	.word	0x20000eb3

08001b44 <socket>:
   CHECK_SOCKNUM(); 
 8001b44:	2807      	cmp	r0, #7
{ 
 8001b46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	4688      	mov	r8, r1
 8001b4e:	4617      	mov	r7, r2
 8001b50:	461d      	mov	r5, r3
   CHECK_SOCKNUM(); 
 8001b52:	f200 8082 	bhi.w	8001c5a <socket+0x116>
   switch (protocol & 0x0F)
 8001b56:	f001 030f 	and.w	r3, r1, #15
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	2b0d      	cmp	r3, #13
 8001b5e:	d87f      	bhi.n	8001c60 <socket+0x11c>
 8001b60:	e8df f003 	tbb	[pc, r3]
 8001b64:	15151507 	.word	0x15151507
 8001b68:	7e7e7e7e 	.word	0x7e7e7e7e
 8001b6c:	7e15157e 	.word	0x7e15157e
 8001b70:	157e      	.short	0x157e
            getSIPR((uint8_t*)&taddr);
 8001b72:	2204      	movs	r2, #4
 8001b74:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001b78:	eb0d 0102 	add.w	r1, sp, r2
 8001b7c:	f7ff fd02 	bl	8001584 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	b923      	cbnz	r3, 8001b8e <socket+0x4a>
 8001b84:	f06f 0002 	mvn.w	r0, #2
}  
 8001b88:	b002      	add	sp, #8
 8001b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001b8e:	0768      	lsls	r0, r5, #29
 8001b90:	d457      	bmi.n	8001c42 <socket+0xfe>
   if(flag != 0)
 8001b92:	b12d      	cbz	r5, 8001ba0 <socket+0x5c>
      switch(protocol)
 8001b94:	f1b8 0f01 	cmp.w	r8, #1
 8001b98:	d050      	beq.n	8001c3c <socket+0xf8>
 8001b9a:	f1b8 0f02 	cmp.w	r8, #2
 8001b9e:	d053      	beq.n	8001c48 <socket+0x104>
   close(sn);
 8001ba0:	4620      	mov	r0, r4
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001ba2:	0166      	lsls	r6, r4, #5
   close(sn);
 8001ba4:	f7ff ff90 	bl	8001ac8 <close>
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001ba8:	3608      	adds	r6, #8
 8001baa:	f025 010f 	bic.w	r1, r5, #15
 8001bae:	4630      	mov	r0, r6
 8001bb0:	ea48 0101 	orr.w	r1, r8, r1
 8001bb4:	f7ff fcb4 	bl	8001520 <WIZCHIP_WRITE>
   if(!port)
 8001bb8:	b96f      	cbnz	r7, 8001bd6 <socket+0x92>
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001bba:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
      port = sock_any_port++;
 8001bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <socket+0x124>)
 8001bc0:	8817      	ldrh	r7, [r2, #0]
 8001bc2:	1c7b      	adds	r3, r7, #1
 8001bc4:	b29b      	uxth	r3, r3
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	bf05      	ittet	eq
 8001bca:	f44f 4340 	moveq.w	r3, #49152	@ 0xc000
      port = sock_any_port++;
 8001bce:	f64f 77ef 	movweq	r7, #65519	@ 0xffef
 8001bd2:	8013      	strhne	r3, [r2, #0]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001bd4:	8013      	strheq	r3, [r2, #0]
   setSn_PORTR(sn,port);
 8001bd6:	0a39      	lsrs	r1, r7, #8
 8001bd8:	f506 6080 	add.w	r0, r6, #1024	@ 0x400
 8001bdc:	f7ff fca0 	bl	8001520 <WIZCHIP_WRITE>
 8001be0:	b2f9      	uxtb	r1, r7
 8001be2:	f506 60a0 	add.w	r0, r6, #1280	@ 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8001be6:	f506 7780 	add.w	r7, r6, #256	@ 0x100
   setSn_PORTR(sn,port);
 8001bea:	f7ff fc99 	bl	8001520 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	f7ff fc95 	bl	8001520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	f7ff fc64 	bl	80014c4 <WIZCHIP_READ>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d1fa      	bne.n	8001bf6 <socket+0xb2>
   sock_io_mode &= ~(1 <<sn);
 8001c00:	2301      	movs	r3, #1
 8001c02:	40a3      	lsls	r3, r4
 8001c04:	43db      	mvns	r3, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001c06:	4919      	ldr	r1, [pc, #100]	@ (8001c6c <socket+0x128>)
 8001c08:	b29b      	uxth	r3, r3
   sock_io_mode &= ~(1 <<sn);
 8001c0a:	880a      	ldrh	r2, [r1, #0]
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001c0c:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 8001c10:	401a      	ands	r2, r3
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001c12:	40a5      	lsls	r5, r4
 8001c14:	432a      	orrs	r2, r5
 8001c16:	800a      	strh	r2, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8001c18:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <socket+0x12c>)
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001c1a:	f506 7640 	add.w	r6, r6, #768	@ 0x300
   sock_is_sending &= ~(1<<sn);
 8001c1e:	8811      	ldrh	r1, [r2, #0]
 8001c20:	400b      	ands	r3, r1
 8001c22:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <socket+0x130>)
 8001c26:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8001c2a:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <socket+0x134>)
 8001c2c:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f7ff fc48 	bl	80014c4 <WIZCHIP_READ>
 8001c34:	2800      	cmp	r0, #0
 8001c36:	d0fa      	beq.n	8001c2e <socket+0xea>
   return (int8_t)sn;
 8001c38:	b260      	sxtb	r0, r4
 8001c3a:	e7a5      	b.n	8001b88 <socket+0x44>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001c3c:	f015 0f21 	tst.w	r5, #33	@ 0x21
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001c40:	d1ae      	bne.n	8001ba0 <socket+0x5c>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001c42:	f06f 0005 	mvn.w	r0, #5
 8001c46:	e79f      	b.n	8001b88 <socket+0x44>
   	      if(flag & SF_IGMP_VER2)
 8001c48:	06a9      	lsls	r1, r5, #26
 8001c4a:	d501      	bpl.n	8001c50 <socket+0x10c>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001c4c:	062a      	lsls	r2, r5, #24
 8001c4e:	d5f8      	bpl.n	8001c42 <socket+0xfe>
      	      if(flag & SF_UNI_BLOCK)
 8001c50:	06eb      	lsls	r3, r5, #27
 8001c52:	d5a5      	bpl.n	8001ba0 <socket+0x5c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001c54:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001c58:	e7f2      	b.n	8001c40 <socket+0xfc>
   CHECK_SOCKNUM(); 
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c5e:	e793      	b.n	8001b88 <socket+0x44>
   switch (protocol & 0x0F)
 8001c60:	f06f 0004 	mvn.w	r0, #4
 8001c64:	e790      	b.n	8001b88 <socket+0x44>
 8001c66:	bf00      	nop
 8001c68:	20000018 	.word	0x20000018
 8001c6c:	20000ece 	.word	0x20000ece
 8001c70:	20000ecc 	.word	0x20000ecc
 8001c74:	20000ebc 	.word	0x20000ebc
 8001c78:	20000eb3 	.word	0x20000eb3

08001c7c <connect_W5x00>:
   return connect_IO_6(sn , addr , port, 4 );
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f7ff bea7 	b.w	80019d0 <connect_IO_6>
	...

08001c84 <send>:
}


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8001c88:	2807      	cmp	r0, #7
{
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	4617      	mov	r7, r2
 8001c8e:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8001c90:	f200 80a0 	bhi.w	8001dd4 <send+0x150>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c94:	0146      	lsls	r6, r0, #5
 8001c96:	3608      	adds	r6, #8
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f7ff fc13 	bl	80014c4 <WIZCHIP_READ>
 8001c9e:	f000 000f 	and.w	r0, r0, #15
 8001ca2:	2801      	cmp	r0, #1
 8001ca4:	f040 8099 	bne.w	8001dda <send+0x156>
   CHECK_SOCKDATA();
 8001ca8:	2f00      	cmp	r7, #0
 8001caa:	f000 8099 	beq.w	8001de0 <send+0x15c>
   tmp = getSn_SR(sn);
 8001cae:	f506 7a40 	add.w	sl, r6, #768	@ 0x300
 8001cb2:	4650      	mov	r0, sl
 8001cb4:	f7ff fc06 	bl	80014c4 <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001cb8:	2817      	cmp	r0, #23
 8001cba:	d001      	beq.n	8001cc0 <send+0x3c>
 8001cbc:	281c      	cmp	r0, #28
 8001cbe:	d136      	bne.n	8001d2e <send+0xaa>
   if( sock_is_sending & (1<<sn) )
 8001cc0:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8001de8 <send+0x164>
 8001cc4:	f8b8 3000 	ldrh.w	r3, [r8]
 8001cc8:	412b      	asrs	r3, r5
 8001cca:	07da      	lsls	r2, r3, #31
 8001ccc:	d512      	bpl.n	8001cf4 <send+0x70>
   {
      tmp = getSn_IR(sn);
 8001cce:	f506 7400 	add.w	r4, r6, #512	@ 0x200
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fbf6 	bl	80014c4 <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 8001cd8:	06c3      	lsls	r3, r0, #27
 8001cda:	d52b      	bpl.n	8001d34 <send+0xb0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001cdc:	2110      	movs	r1, #16
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff fc1e 	bl	8001520 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f8b8 3000 	ldrh.w	r3, [r8]
 8001cea:	40aa      	lsls	r2, r5
 8001cec:	ea23 0302 	bic.w	r3, r3, r2
 8001cf0:	f8a8 3000 	strh.w	r3, [r8]
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
#endif 
   freesize = getSn_TxMAX(sn);
 8001cf4:	f506 50f8 	add.w	r0, r6, #7936	@ 0x1f00
 8001cf8:	f7ff fbe4 	bl	80014c4 <WIZCHIP_READ>
 8001cfc:	0280      	lsls	r0, r0, #10
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001cfe:	b280      	uxth	r0, r0
 8001d00:	42b8      	cmp	r0, r7
 8001d02:	bf28      	it	cs
 8001d04:	4638      	movcs	r0, r7
 8001d06:	2701      	movs	r7, #1
 8001d08:	4604      	mov	r4, r0
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
      {
         if(tmp == SOCK_CLOSED) close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8001d0a:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8001dec <send+0x168>
 8001d0e:	40af      	lsls	r7, r5
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8001d10:	4628      	mov	r0, r5
 8001d12:	f7ff fcab 	bl	800166c <getSn_TX_FSR>
 8001d16:	4681      	mov	r9, r0
      tmp = getSn_SR(sn);
 8001d18:	4650      	mov	r0, sl
 8001d1a:	f7ff fbd3 	bl	80014c4 <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001d1e:	2817      	cmp	r0, #23
 8001d20:	d014      	beq.n	8001d4c <send+0xc8>
 8001d22:	281c      	cmp	r0, #28
 8001d24:	d012      	beq.n	8001d4c <send+0xc8>
         if(tmp == SOCK_CLOSED) close(sn);
 8001d26:	b910      	cbnz	r0, 8001d2e <send+0xaa>
 8001d28:	4628      	mov	r0, r5
 8001d2a:	f7ff fecd 	bl	8001ac8 <close>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001d2e:	f06f 0006 	mvn.w	r0, #6
 8001d32:	e002      	b.n	8001d3a <send+0xb6>
      else if(tmp & Sn_IR_TIMEOUT)
 8001d34:	0700      	lsls	r0, r0, #28
 8001d36:	d403      	bmi.n	8001d40 <send+0xbc>
      else return SOCK_BUSY;
 8001d38:	2000      	movs	r0, #0
 
   while(getSn_CR(sn));   // wait to process the command...
   sock_is_sending |= (1<<sn);
 
   return len;
}
 8001d3a:	b003      	add	sp, #12
 8001d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         close(sn);
 8001d40:	4628      	mov	r0, r5
 8001d42:	f7ff fec1 	bl	8001ac8 <close>
         return SOCKERR_TIMEOUT;
 8001d46:	f06f 000c 	mvn.w	r0, #12
 8001d4a:	e7f6      	b.n	8001d3a <send+0xb6>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8001d4c:	f8bb 2000 	ldrh.w	r2, [fp]
 8001d50:	423a      	tst	r2, r7
 8001d52:	d028      	beq.n	8001da6 <send+0x122>
 8001d54:	45a1      	cmp	r9, r4
 8001d56:	d3ef      	bcc.n	8001d38 <send+0xb4>
   wiz_send_data(sn, buf, len);
 8001d58:	9901      	ldr	r1, [sp, #4]
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f7ff fcc7 	bl	80016f0 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8001d62:	f8b8 3000 	ldrh.w	r3, [r8]
 8001d66:	412b      	asrs	r3, r5
 8001d68:	07d9      	lsls	r1, r3, #31
 8001d6a:	d50a      	bpl.n	8001d82 <send+0xfe>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001d6c:	f506 7900 	add.w	r9, r6, #512	@ 0x200
 8001d70:	4648      	mov	r0, r9
 8001d72:	f7ff fba7 	bl	80014c4 <WIZCHIP_READ>
 8001d76:	06c3      	lsls	r3, r0, #27
 8001d78:	d518      	bpl.n	8001dac <send+0x128>
      setSn_IR(sn, Sn_IR_SENDOK);
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	4648      	mov	r0, r9
 8001d7e:	f7ff fbcf 	bl	8001520 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_SEND);
 8001d82:	f506 7680 	add.w	r6, r6, #256	@ 0x100
 8001d86:	2120      	movs	r1, #32
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f7ff fbc9 	bl	8001520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));   // wait to process the command...
 8001d8e:	4630      	mov	r0, r6
 8001d90:	f7ff fb98 	bl	80014c4 <WIZCHIP_READ>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d1fa      	bne.n	8001d8e <send+0x10a>
   sock_is_sending |= (1<<sn);
 8001d98:	f8b8 3000 	ldrh.w	r3, [r8]
   return len;
 8001d9c:	4620      	mov	r0, r4
   sock_is_sending |= (1<<sn);
 8001d9e:	431f      	orrs	r7, r3
 8001da0:	f8a8 7000 	strh.w	r7, [r8]
   return len;
 8001da4:	e7c9      	b.n	8001d3a <send+0xb6>
      if(len <= freesize) break;
 8001da6:	45a1      	cmp	r9, r4
 8001da8:	d3b2      	bcc.n	8001d10 <send+0x8c>
 8001daa:	e7d5      	b.n	8001d58 <send+0xd4>
         tmp = getSn_SR(sn);
 8001dac:	4650      	mov	r0, sl
 8001dae:	f7ff fb89 	bl	80014c4 <WIZCHIP_READ>
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8001db2:	2817      	cmp	r0, #23
 8001db4:	d009      	beq.n	8001dca <send+0x146>
 8001db6:	281c      	cmp	r0, #28
 8001db8:	d007      	beq.n	8001dca <send+0x146>
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d0b4      	beq.n	8001d28 <send+0xa4>
 8001dbe:	4648      	mov	r0, r9
 8001dc0:	f7ff fb80 	bl	80014c4 <WIZCHIP_READ>
 8001dc4:	0702      	lsls	r2, r0, #28
 8001dc6:	d4af      	bmi.n	8001d28 <send+0xa4>
 8001dc8:	e7b1      	b.n	8001d2e <send+0xaa>
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001dca:	f8bb 3000 	ldrh.w	r3, [fp]
 8001dce:	423b      	tst	r3, r7
 8001dd0:	d0ce      	beq.n	8001d70 <send+0xec>
 8001dd2:	e7b1      	b.n	8001d38 <send+0xb4>
   CHECK_SOCKNUM();
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dd8:	e7af      	b.n	8001d3a <send+0xb6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001dda:	f06f 0004 	mvn.w	r0, #4
 8001dde:	e7ac      	b.n	8001d3a <send+0xb6>
   CHECK_SOCKDATA();
 8001de0:	f06f 000d 	mvn.w	r0, #13
 8001de4:	e7a9      	b.n	8001d3a <send+0xb6>
 8001de6:	bf00      	nop
 8001de8:	20000ecc 	.word	0x20000ecc
 8001dec:	20000ece 	.word	0x20000ece

08001df0 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8001df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001df4:	2807      	cmp	r0, #7
{
 8001df6:	b085      	sub	sp, #20
 8001df8:	4606      	mov	r6, r0
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	9101      	str	r1, [sp, #4]
   CHECK_SOCKNUM();
 8001dfe:	d859      	bhi.n	8001eb4 <recv+0xc4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e00:	0145      	lsls	r5, r0, #5
 8001e02:	3508      	adds	r5, #8
 8001e04:	4628      	mov	r0, r5
 8001e06:	f7ff fb5d 	bl	80014c4 <WIZCHIP_READ>
 8001e0a:	f000 070f 	and.w	r7, r0, #15
 8001e0e:	2f01      	cmp	r7, #1
 8001e10:	d153      	bne.n	8001eba <recv+0xca>
   CHECK_SOCKDATA();
 8001e12:	f1b8 0f00 	cmp.w	r8, #0
 8001e16:	d053      	beq.n	8001ec0 <recv+0xd0>
   
   recvsize = getSn_RxMAX(sn); 
 8001e18:	f505 50f0 	add.w	r0, r5, #7680	@ 0x1e00
 8001e1c:	f7ff fb52 	bl	80014c4 <WIZCHIP_READ>
 8001e20:	4681      	mov	r9, r0
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
      tmp = getSn_SR(sn);
 8001e22:	f505 7340 	add.w	r3, r5, #768	@ 0x300
 8001e26:	9302      	str	r3, [sp, #8]
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001e28:	f8df b0a0 	ldr.w	fp, [pc, #160]	@ 8001ecc <recv+0xdc>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001e2c:	f505 53f8 	add.w	r3, r5, #7936	@ 0x1f00
 8001e30:	40b7      	lsls	r7, r6
 8001e32:	9303      	str	r3, [sp, #12]
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8001e34:	4630      	mov	r0, r6
 8001e36:	f7ff fc3a 	bl	80016ae <getSn_RX_RSR>
 8001e3a:	4604      	mov	r4, r0
      tmp = getSn_SR(sn);
 8001e3c:	9802      	ldr	r0, [sp, #8]
 8001e3e:	f7ff fb41 	bl	80014c4 <WIZCHIP_READ>
      if (tmp != SOCK_ESTABLISHED)
 8001e42:	2817      	cmp	r0, #23
 8001e44:	d014      	beq.n	8001e70 <recv+0x80>
         if(tmp == SOCK_CLOSE_WAIT)
 8001e46:	281c      	cmp	r0, #28
 8001e48:	d10a      	bne.n	8001e60 <recv+0x70>
            if(recvsize != 0) break;
 8001e4a:	b9bc      	cbnz	r4, 8001e7c <recv+0x8c>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	f7ff fc0d 	bl	800166c <getSn_TX_FSR>
 8001e52:	4682      	mov	sl, r0
 8001e54:	9803      	ldr	r0, [sp, #12]
 8001e56:	f7ff fb35 	bl	80014c4 <WIZCHIP_READ>
 8001e5a:	ebba 2f80 	cmp.w	sl, r0, lsl #10
 8001e5e:	d107      	bne.n	8001e70 <recv+0x80>
               close(sn);
 8001e60:	4630      	mov	r0, r6
 8001e62:	f7ff fe31 	bl	8001ac8 <close>
               return SOCKERR_SOCKSTATUS;
 8001e66:	f06f 0006 	mvn.w	r0, #6
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
 8001e6a:	b005      	add	sp, #20
 8001e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001e70:	f8bb 2000 	ldrh.w	r2, [fp]
 8001e74:	423a      	tst	r2, r7
 8001e76:	d126      	bne.n	8001ec6 <recv+0xd6>
      if(recvsize != 0) break;
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d0db      	beq.n	8001e34 <recv+0x44>
   recvsize = getSn_RxMAX(sn); 
 8001e7c:	ea4f 2089 	mov.w	r0, r9, lsl #10
   if(recvsize < len) len = recvsize;
 8001e80:	b280      	uxth	r0, r0
   if(recvsize < len) len = recvsize;
 8001e82:	4540      	cmp	r0, r8
 8001e84:	bf28      	it	cs
 8001e86:	4640      	movcs	r0, r8
 8001e88:	42a0      	cmp	r0, r4
 8001e8a:	bf28      	it	cs
 8001e8c:	4620      	movcs	r0, r4
 8001e8e:	b284      	uxth	r4, r0
   wiz_recv_data(sn, buf, len); 
 8001e90:	9901      	ldr	r1, [sp, #4]
 8001e92:	4630      	mov	r0, r6
 8001e94:	4622      	mov	r2, r4
   setSn_CR(sn,Sn_CR_RECV); 
 8001e96:	f505 7580 	add.w	r5, r5, #256	@ 0x100
   wiz_recv_data(sn, buf, len); 
 8001e9a:	f7ff fc56 	bl	800174a <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8001e9e:	2140      	movs	r1, #64	@ 0x40
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	f7ff fb3d 	bl	8001520 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7ff fb0c 	bl	80014c4 <WIZCHIP_READ>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1fa      	bne.n	8001ea6 <recv+0xb6>
   return (int32_t)len;
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	e7da      	b.n	8001e6a <recv+0x7a>
   CHECK_SOCKNUM();
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eb8:	e7d7      	b.n	8001e6a <recv+0x7a>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001eba:	f06f 0004 	mvn.w	r0, #4
 8001ebe:	e7d4      	b.n	8001e6a <recv+0x7a>
   CHECK_SOCKDATA();
 8001ec0:	f06f 000d 	mvn.w	r0, #13
 8001ec4:	e7d1      	b.n	8001e6a <recv+0x7a>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	e7cf      	b.n	8001e6a <recv+0x7a>
 8001eca:	bf00      	nop
 8001ecc:	20000ece 	.word	0x20000ece

08001ed0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001ed0:	4770      	bx	lr

08001ed2 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001ed2:	7800      	ldrb	r0, [r0, #0]
 8001ed4:	4770      	bx	lr

08001ed6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001ed6:	7001      	strb	r1, [r0, #0]
 8001ed8:	4770      	bx	lr

08001eda <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001eda:	2000      	movs	r0, #0
 8001edc:	4770      	bx	lr

08001ede <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001ede:	4770      	bx	lr

08001ee0 <wizchip_cris_exit>:
void 	  wizchip_cris_exit(void)          {}
 8001ee0:	4770      	bx	lr

08001ee2 <wizchip_cs_select>:
void 	wizchip_cs_select(void)            {}
 8001ee2:	4770      	bx	lr

08001ee4 <wizchip_cs_deselect>:
void 	wizchip_cs_deselect(void)          {}
 8001ee4:	4770      	bx	lr
	...

08001ee8 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8001ee8:	b100      	cbz	r0, 8001eec <reg_wizchip_cs_cbfunc+0x4>
 8001eea:	b909      	cbnz	r1, 8001ef0 <reg_wizchip_cs_cbfunc+0x8>
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <reg_wizchip_cs_cbfunc+0x10>)
 8001eee:	4903      	ldr	r1, [pc, #12]	@ (8001efc <reg_wizchip_cs_cbfunc+0x14>)
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <reg_wizchip_cs_cbfunc+0x18>)
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001ef2:	e9c3 0105 	strd	r0, r1, [r3, #20]
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
 8001ef6:	4770      	bx	lr
 8001ef8:	08001ee3 	.word	0x08001ee3
 8001efc:	08001ee5 	.word	0x08001ee5
 8001f00:	2000001c 	.word	0x2000001c

08001f04 <reg_wizchip_spi_cbfunc>:
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <reg_wizchip_spi_cbfunc+0x18>)
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	0592      	lsls	r2, r2, #22
 8001f0a:	d400      	bmi.n	8001f0e <reg_wizchip_spi_cbfunc+0xa>
 8001f0c:	e7fe      	b.n	8001f0c <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8001f0e:	b100      	cbz	r0, 8001f12 <reg_wizchip_spi_cbfunc+0xe>
 8001f10:	b909      	cbnz	r1, 8001f16 <reg_wizchip_spi_cbfunc+0x12>
 8001f12:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <reg_wizchip_spi_cbfunc+0x1c>)
 8001f14:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <reg_wizchip_spi_cbfunc+0x20>)
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001f16:	e9c3 0107 	strd	r0, r1, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
 8001f1a:	4770      	bx	lr
 8001f1c:	2000001c 	.word	0x2000001c
 8001f20:	08001edb 	.word	0x08001edb
 8001f24:	08001edf 	.word	0x08001edf

08001f28 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001f28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001f2a:	2206      	movs	r2, #6
 8001f2c:	a904      	add	r1, sp, #16
 8001f2e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001f32:	f7ff fb27 	bl	8001584 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001f36:	2204      	movs	r2, #4
 8001f38:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f3c:	eb0d 0102 	add.w	r1, sp, r2
 8001f40:	f7ff fb20 	bl	8001584 <WIZCHIP_READ_BUF>
 8001f44:	a902      	add	r1, sp, #8
 8001f46:	2204      	movs	r2, #4
 8001f48:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001f4c:	f7ff fb1a 	bl	8001584 <WIZCHIP_READ_BUF>
 8001f50:	2204      	movs	r2, #4
 8001f52:	a903      	add	r1, sp, #12
 8001f54:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001f58:	f7ff fb14 	bl	8001584 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff fade 	bl	8001520 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff faad 	bl	80014c4 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001f6a:	a904      	add	r1, sp, #16
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001f72:	f7ff fb41 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001f76:	2204      	movs	r2, #4
 8001f78:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f7c:	eb0d 0102 	add.w	r1, sp, r2
 8001f80:	f7ff fb3a 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001f84:	a902      	add	r1, sp, #8
 8001f86:	2204      	movs	r2, #4
 8001f88:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001f8c:	f7ff fb34 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001f90:	2204      	movs	r2, #4
 8001f92:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001f96:	a903      	add	r1, sp, #12
 8001f98:	f7ff fb2e 	bl	80015f8 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8001f9c:	b007      	add	sp, #28
 8001f9e:	f85d fb04 	ldr.w	pc, [sp], #4

08001fa2 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001fa8:	f7ff ffbe 	bl	8001f28 <wizchip_sw_reset>
   if(txsize)
 8001fac:	b1d5      	cbz	r5, 8001fe4 <wizchip_init+0x42>
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8001fae:	f995 3000 	ldrsb.w	r3, [r5]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	dc35      	bgt.n	8002022 <wizchip_init+0x80>
 8001fb6:	462a      	mov	r2, r5
 8001fb8:	1de9      	adds	r1, r5, #7
			tmp += txsize[i];
 8001fba:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8001fbe:	4403      	add	r3, r0
 8001fc0:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	dc2d      	bgt.n	8002022 <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fc6:	428a      	cmp	r2, r1
 8001fc8:	d1f7      	bne.n	8001fba <wizchip_init+0x18>
 8001fca:	f641 7608 	movw	r6, #7944	@ 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fce:	f242 0708 	movw	r7, #8200	@ 0x2008
 8001fd2:	3d01      	subs	r5, #1
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fda:	3620      	adds	r6, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001fdc:	f7ff faa0 	bl	8001520 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fe0:	42be      	cmp	r6, r7
 8001fe2:	d1f7      	bne.n	8001fd4 <wizchip_init+0x32>
#endif
		}	
   }

   if(rxsize)
 8001fe4:	b90c      	cbnz	r4, 8001fea <wizchip_init+0x48>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			tmp += rxsize[i];
 8001fea:	f994 3000 	ldrsb.w	r3, [r4]
			if(tmp > 16) return -1;
 8001fee:	2b10      	cmp	r3, #16
 8001ff0:	dc17      	bgt.n	8002022 <wizchip_init+0x80>
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	1de1      	adds	r1, r4, #7
			tmp += rxsize[i];
 8001ff6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8001ffa:	4403      	add	r3, r0
 8001ffc:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	dc0f      	bgt.n	8002022 <wizchip_init+0x80>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002002:	4291      	cmp	r1, r2
 8002004:	d1f7      	bne.n	8001ff6 <wizchip_init+0x54>
 8002006:	f641 6508 	movw	r5, #7688	@ 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800200a:	f641 7608 	movw	r6, #7944	@ 0x1f08
 800200e:	3c01      	subs	r4, #1
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002010:	4628      	mov	r0, r5
 8002012:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002016:	3520      	adds	r5, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002018:	f7ff fa82 	bl	8001520 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800201c:	42b5      	cmp	r5, r6
 800201e:	d1f7      	bne.n	8002010 <wizchip_init+0x6e>
 8002020:	e7e1      	b.n	8001fe6 <wizchip_init+0x44>
			if(tmp > 16) return -1;
 8002022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002026:	e7df      	b.n	8001fe8 <wizchip_init+0x46>

08002028 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 800202c:	4601      	mov	r1, r0
 800202e:	2206      	movs	r2, #6
 8002030:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002034:	f7ff fae0 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002038:	2204      	movs	r2, #4
 800203a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800203e:	f104 010e 	add.w	r1, r4, #14
 8002042:	f7ff fad9 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002046:	2204      	movs	r2, #4
 8002048:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800204c:	f104 010a 	add.w	r1, r4, #10
 8002050:	f7ff fad2 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002054:	2204      	movs	r2, #4
 8002056:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800205a:	1da1      	adds	r1, r4, #6
 800205c:	f7ff facc 	bl	80015f8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <wizchip_setnetinfo+0x54>)
 8002062:	7ca2      	ldrb	r2, [r4, #18]
 8002064:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002066:	7ce2      	ldrb	r2, [r4, #19]
 8002068:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800206a:	7d22      	ldrb	r2, [r4, #20]
 800206c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800206e:	7d62      	ldrb	r2, [r4, #21]
 8002070:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002072:	7da2      	ldrb	r2, [r4, #22]
 8002074:	4b02      	ldr	r3, [pc, #8]	@ (8002080 <wizchip_setnetinfo+0x58>)
 8002076:	701a      	strb	r2, [r3, #0]
}
 8002078:	bd10      	pop	{r4, pc}
 800207a:	bf00      	nop
 800207c:	20000ed1 	.word	0x20000ed1
 8002080:	20000ed0 	.word	0x20000ed0

08002084 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002084:	b510      	push	{r4, lr}
 8002086:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002088:	4601      	mov	r1, r0
 800208a:	2206      	movs	r2, #6
 800208c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002090:	f7ff fa78 	bl	8001584 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002094:	2204      	movs	r2, #4
 8002096:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800209a:	f104 010e 	add.w	r1, r4, #14
 800209e:	f7ff fa71 	bl	8001584 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80020a2:	2204      	movs	r2, #4
 80020a4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80020a8:	f104 010a 	add.w	r1, r4, #10
 80020ac:	f7ff fa6a 	bl	8001584 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80020b0:	2204      	movs	r2, #4
 80020b2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80020b6:	1da1      	adds	r1, r4, #6
 80020b8:	f7ff fa64 	bl	8001584 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <wizchip_getnetinfo+0x54>)
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80020c2:	785a      	ldrb	r2, [r3, #1]
 80020c4:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80020c6:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 80020c8:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 80020ca:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80020cc:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 80020ce:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <wizchip_getnetinfo+0x58>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	75a3      	strb	r3, [r4, #22]
}
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	bf00      	nop
 80020d8:	20000ed1 	.word	0x20000ed1
 80020dc:	20000ed0 	.word	0x20000ed0

080020e0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80020e0:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80020e2:	f030 053a 	bics.w	r5, r0, #58	@ 0x3a
{
 80020e6:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80020e8:	d10a      	bne.n	8002100 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 80020ea:	4628      	mov	r0, r5
 80020ec:	f7ff f9ea 	bl	80014c4 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 80020f0:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 80020f4:	b2c9      	uxtb	r1, r1
 80020f6:	4628      	mov	r0, r5
 80020f8:	f7ff fa12 	bl	8001520 <WIZCHIP_WRITE>
   return 0;
 80020fc:	4628      	mov	r0, r5
}
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002104:	e7fb      	b.n	80020fe <wizchip_setnetmode+0x1e>

08002106 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 8002106:	2000      	movs	r0, #0
 8002108:	f7ff b9dc 	b.w	80014c4 <WIZCHIP_READ>

0800210c <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800210c:	b510      	push	{r4, lr}
 800210e:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8002110:	7801      	ldrb	r1, [r0, #0]
 8002112:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002116:	f7ff fa03 	bl	8001520 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800211a:	8861      	ldrh	r1, [r4, #2]
 800211c:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8002120:	0a09      	lsrs	r1, r1, #8
 8002122:	f7ff f9fd 	bl	8001520 <WIZCHIP_WRITE>
 8002126:	78a1      	ldrb	r1, [r4, #2]
 8002128:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
}
 800212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 8002130:	f7ff b9f6 	b.w	8001520 <WIZCHIP_WRITE>

08002134 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 8002138:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800213c:	f7ff f9c2 	bl	80014c4 <WIZCHIP_READ>
 8002140:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 8002142:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8002146:	f7ff f9bd 	bl	80014c4 <WIZCHIP_READ>
 800214a:	4605      	mov	r5, r0
 800214c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8002150:	f7ff f9b8 	bl	80014c4 <WIZCHIP_READ>
 8002154:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002158:	8060      	strh	r0, [r4, #2]
}
 800215a:	bd38      	pop	{r3, r4, r5, pc}

0800215c <ctlnetwork>:
{
 800215c:	b510      	push	{r4, lr}
 800215e:	460c      	mov	r4, r1
   switch(cntype)
 8002160:	2805      	cmp	r0, #5
 8002162:	d81e      	bhi.n	80021a2 <ctlnetwork+0x46>
 8002164:	e8df f000 	tbb	[pc, r0]
 8002168:	110c0803 	.word	0x110c0803
 800216c:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800216e:	4608      	mov	r0, r1
 8002170:	f7ff ff5a 	bl	8002028 <wizchip_setnetinfo>
   return 0;
 8002174:	2000      	movs	r0, #0
}
 8002176:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002178:	4608      	mov	r0, r1
 800217a:	f7ff ff83 	bl	8002084 <wizchip_getnetinfo>
         break;
 800217e:	e7f9      	b.n	8002174 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002180:	7808      	ldrb	r0, [r1, #0]
}
 8002182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 8002186:	f7ff bfab 	b.w	80020e0 <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 800218a:	f7ff ffbc 	bl	8002106 <wizchip_getnetmode>
 800218e:	7020      	strb	r0, [r4, #0]
         break;
 8002190:	e7f0      	b.n	8002174 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8002192:	4608      	mov	r0, r1
 8002194:	f7ff ffba 	bl	800210c <wizchip_settimeout>
         break;
 8002198:	e7ec      	b.n	8002174 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800219a:	4608      	mov	r0, r1
 800219c:	f7ff ffca 	bl	8002134 <wizchip_gettimeout>
         break;
 80021a0:	e7e8      	b.n	8002174 <ctlnetwork+0x18>
   switch(cntype)
 80021a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a6:	e7e6      	b.n	8002176 <ctlnetwork+0x1a>

080021a8 <Flash_Write_Config>:


#define FLASH_CONFIG_START_ADDR 0x08007C00  // Например, предпоследняя страница флеша (уточним ниже)
#define FLASH_PAGE_SIZE 1024

void Flash_Write_Config(Config_t* config) {
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4605      	mov	r5, r0
    uint32_t *flash_ptr = (uint32_t*)FLASH_CONFIG_START_ADDR;
    uint32_t buffer[FLASH_PAGE_SIZE / 4]; // буфер для страницы

    // Считать текущую страницу во временный буфер
    memcpy(buffer, (uint32_t*)FLASH_CONFIG_START_ADDR, FLASH_PAGE_SIZE);
 80021ac:	4c17      	ldr	r4, [pc, #92]	@ (800220c <Flash_Write_Config+0x64>)
void Flash_Write_Config(Config_t* config) {
 80021ae:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
    memcpy(buffer, (uint32_t*)FLASH_CONFIG_START_ADDR, FLASH_PAGE_SIZE);
 80021b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b6:	4621      	mov	r1, r4
 80021b8:	a806      	add	r0, sp, #24
 80021ba:	f001 fbf3 	bl	80039a4 <memcpy>

    // Заменить начало буфера на данные конфига (с учётом выравнивания)
    memcpy(buffer, config, sizeof(Config_t));
 80021be:	4629      	mov	r1, r5
 80021c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021c4:	a806      	add	r0, sp, #24
 80021c6:	f001 fbed 	bl	80039a4 <memcpy>

    HAL_FLASH_Unlock();
 80021ca:	f000 fb83 	bl	80028d4 <HAL_FLASH_Unlock>

    // Стереть страницу
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80021ce:	2300      	movs	r3, #0
 80021d0:	9302      	str	r3, [sp, #8]
    EraseInitStruct.PageAddress = FLASH_CONFIG_START_ADDR;
    EraseInitStruct.NbPages = 1;
 80021d2:	2301      	movs	r3, #1

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 80021d4:	a901      	add	r1, sp, #4
 80021d6:	a802      	add	r0, sp, #8
    EraseInitStruct.PageAddress = FLASH_CONFIG_START_ADDR;
 80021d8:	9404      	str	r4, [sp, #16]
    EraseInitStruct.NbPages = 1;
 80021da:	9305      	str	r3, [sp, #20]
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 80021dc:	f000 fc24 	bl	8002a28 <HAL_FLASHEx_Erase>
 80021e0:	b120      	cbz	r0, 80021ec <Flash_Write_Config+0x44>
            HAL_FLASH_Lock();
            return;
        }
    }

    HAL_FLASH_Lock();
 80021e2:	f000 fb89 	bl	80028f8 <HAL_FLASH_Lock>
}
 80021e6:	f50d 6d83 	add.w	sp, sp, #1048	@ 0x418
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < (FLASH_PAGE_SIZE / 4); i++) {
 80021ec:	4e08      	ldr	r6, [pc, #32]	@ (8002210 <Flash_Write_Config+0x68>)
 80021ee:	ad06      	add	r5, sp, #24
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(FLASH_CONFIG_START_ADDR + i*4), buffer[i]) != HAL_OK) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	4621      	mov	r1, r4
 80021f4:	2002      	movs	r0, #2
 80021f6:	f855 2b04 	ldr.w	r2, [r5], #4
 80021fa:	f000 fbb1 	bl	8002960 <HAL_FLASH_Program>
 80021fe:	2800      	cmp	r0, #0
 8002200:	d1ef      	bne.n	80021e2 <Flash_Write_Config+0x3a>
    for (uint32_t i = 0; i < (FLASH_PAGE_SIZE / 4); i++) {
 8002202:	3404      	adds	r4, #4
 8002204:	42b4      	cmp	r4, r6
 8002206:	d1f3      	bne.n	80021f0 <Flash_Write_Config+0x48>
 8002208:	e7eb      	b.n	80021e2 <Flash_Write_Config+0x3a>
 800220a:	bf00      	nop
 800220c:	08007c00 	.word	0x08007c00
 8002210:	08008000 	.word	0x08008000

08002214 <connect_to_server>:
static uint16_t log_server_port;
static uint8_t log_initialized = 1;
static char buffer[LOG_BUFFER_SIZE];

/* Общая функция соединения */
static int8_t connect_to_server(void) {
 8002214:	b510      	push	{r4, lr}
    close(LOG_SOCKET);
 8002216:	2007      	movs	r0, #7
 8002218:	f7ff fc56 	bl	8001ac8 <close>

    if (socket(LOG_SOCKET, Sn_MR_TCP, 0, 0) != LOG_SOCKET) {
 800221c:	2300      	movs	r3, #0
 800221e:	2101      	movs	r1, #1
 8002220:	461a      	mov	r2, r3
 8002222:	2007      	movs	r0, #7
 8002224:	f7ff fc8e 	bl	8001b44 <socket>
 8002228:	2807      	cmp	r0, #7
 800222a:	4604      	mov	r4, r0
 800222c:	d109      	bne.n	8002242 <connect_to_server+0x2e>
        return -1;
    }

    if (connect(LOG_SOCKET, log_server_ip, log_server_port) != SOCK_OK) {
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <connect_to_server+0x38>)
 8002230:	4907      	ldr	r1, [pc, #28]	@ (8002250 <connect_to_server+0x3c>)
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	f7ff fd22 	bl	8001c7c <connect_W5x00>
 8002238:	2801      	cmp	r0, #1
 800223a:	d005      	beq.n	8002248 <connect_to_server+0x34>
        close(LOG_SOCKET);
 800223c:	4620      	mov	r0, r4
 800223e:	f7ff fc43 	bl	8001ac8 <close>
        return -1;
 8002242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
        return -1;
    }
    return 0;
}
 8002246:	bd10      	pop	{r4, pc}
    return 0;
 8002248:	2000      	movs	r0, #0
 800224a:	e7fc      	b.n	8002246 <connect_to_server+0x32>
 800224c:	200010d6 	.word	0x200010d6
 8002250:	200010d8 	.word	0x200010d8

08002254 <log_message_internal>:

/* Внутренняя универсальная функция */
void log_message_internal(LogLevel level, const char *format, ...) {
 8002254:	b40e      	push	{r1, r2, r3}
 8002256:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8002258:	ab07      	add	r3, sp, #28
 800225a:	f853 6b04 	ldr.w	r6, [r3], #4

    static const char *level_str[] = {"DEBUG", "INFO", "WARN", "ERROR"};
    va_list args;

    va_start(args, format);
    int len = snprintf(buffer, sizeof(buffer), "[%s] ", level_str[level]);
 800225e:	4d22      	ldr	r5, [pc, #136]	@ (80022e8 <log_message_internal+0x94>)
    va_start(args, format);
 8002260:	9301      	str	r3, [sp, #4]
    int len = snprintf(buffer, sizeof(buffer), "[%s] ", level_str[level]);
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <log_message_internal+0x98>)
 8002264:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002268:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800226c:	4a20      	ldr	r2, [pc, #128]	@ (80022f0 <log_message_internal+0x9c>)
 800226e:	4628      	mov	r0, r5
 8002270:	f001 fa50 	bl	8003714 <sniprintf>
    len += vsnprintf(buffer + len, sizeof(buffer) - len, format, args);
 8002274:	4632      	mov	r2, r6
    int len = snprintf(buffer, sizeof(buffer), "[%s] ", level_str[level]);
 8002276:	4604      	mov	r4, r0
    len += vsnprintf(buffer + len, sizeof(buffer) - len, format, args);
 8002278:	f5c0 7100 	rsb	r1, r0, #512	@ 0x200
 800227c:	9b01      	ldr	r3, [sp, #4]
 800227e:	1828      	adds	r0, r5, r0
 8002280:	f001 face 	bl	8003820 <vsniprintf>
 8002284:	4404      	add	r4, r0
    va_end(args);

    if (len < (int)sizeof(buffer) - 2) {
 8002286:	f5b4 7fff 	cmp.w	r4, #510	@ 0x1fe
 800228a:	da0c      	bge.n	80022a6 <log_message_internal+0x52>
        if (buffer[len-1] != '\n') {
 800228c:	192b      	adds	r3, r5, r4
 800228e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d007      	beq.n	80022a6 <log_message_internal+0x52>
            buffer[len++] = '\r';
 8002296:	220d      	movs	r2, #13
 8002298:	552a      	strb	r2, [r5, r4]
            buffer[len++] = '\n';
 800229a:	220a      	movs	r2, #10
            buffer[len++] = '\r';
 800229c:	1c63      	adds	r3, r4, #1
            buffer[len++] = '\n';
 800229e:	54ea      	strb	r2, [r5, r3]
            buffer[len] = '\0';
 80022a0:	2300      	movs	r3, #0
            buffer[len++] = '\n';
 80022a2:	3402      	adds	r4, #2
            buffer[len] = '\0';
 80022a4:	552b      	strb	r3, [r5, r4]
void log_message_internal(LogLevel level, const char *format, ...) {
 80022a6:	2503      	movs	r5, #3
                HAL_Delay(50);
                continue;
            }
        }

        uint16_t sent = send(LOG_SOCKET, (uint8_t*)buffer, len);
 80022a8:	4e0f      	ldr	r6, [pc, #60]	@ (80022e8 <log_message_internal+0x94>)
 80022aa:	b2a7      	uxth	r7, r4
        if (getSn_SR(LOG_SOCKET) != SOCK_ESTABLISHED) {
 80022ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022b0:	f7ff f908 	bl	80014c4 <WIZCHIP_READ>
 80022b4:	2817      	cmp	r0, #23
 80022b6:	d00e      	beq.n	80022d6 <log_message_internal+0x82>
            if (connect_to_server() != 0) {
 80022b8:	f7ff ffac 	bl	8002214 <connect_to_server>
 80022bc:	b158      	cbz	r0, 80022d6 <log_message_internal+0x82>
                HAL_Delay(50);
 80022be:	2032      	movs	r0, #50	@ 0x32
    for (uint8_t attempt = 0; attempt < MAX_RETRIES; attempt++) {
 80022c0:	3d01      	subs	r5, #1
                HAL_Delay(50);
 80022c2:	f000 fa77 	bl	80027b4 <HAL_Delay>
    for (uint8_t attempt = 0; attempt < MAX_RETRIES; attempt++) {
 80022c6:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 80022ca:	d1ef      	bne.n	80022ac <log_message_internal+0x58>
        if (sent == len) break;

        HAL_Delay(50);
    }
}
 80022cc:	b002      	add	sp, #8
 80022ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80022d2:	b003      	add	sp, #12
 80022d4:	4770      	bx	lr
        uint16_t sent = send(LOG_SOCKET, (uint8_t*)buffer, len);
 80022d6:	463a      	mov	r2, r7
 80022d8:	4631      	mov	r1, r6
 80022da:	2007      	movs	r0, #7
 80022dc:	f7ff fcd2 	bl	8001c84 <send>
        if (sent == len) break;
 80022e0:	b280      	uxth	r0, r0
 80022e2:	42a0      	cmp	r0, r4
 80022e4:	d1eb      	bne.n	80022be <log_message_internal+0x6a>
 80022e6:	e7f1      	b.n	80022cc <log_message_internal+0x78>
 80022e8:	20000ed5 	.word	0x20000ed5
 80022ec:	080048cc 	.word	0x080048cc
 80022f0:	08004810 	.word	0x08004810

080022f4 <log_printf>:

/* printf без уровня */
void log_printf(const char *format, ...) {
 80022f4:	b40f      	push	{r0, r1, r2, r3}
 80022f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022f8:	ab08      	add	r3, sp, #32
 80022fa:	f853 2b04 	ldr.w	r2, [r3], #4
    if (!log_initialized) return;

    va_list args;
    va_start(args, format);
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 80022fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002302:	4813      	ldr	r0, [pc, #76]	@ (8002350 <log_printf+0x5c>)
    va_start(args, format);
 8002304:	9301      	str	r3, [sp, #4]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8002306:	f001 fa8b 	bl	8003820 <vsniprintf>
    va_end(args);

    if (len > 0) {
 800230a:	1e04      	subs	r4, r0, #0
 800230c:	dd12      	ble.n	8002334 <log_printf+0x40>
 800230e:	2503      	movs	r5, #3
                if (connect_to_server() != 0) {
                    HAL_Delay(50);
                    continue;
                }
            }
            uint16_t sent = send(LOG_SOCKET, (uint8_t*)buffer, len);
 8002310:	4e0f      	ldr	r6, [pc, #60]	@ (8002350 <log_printf+0x5c>)
 8002312:	b2a7      	uxth	r7, r4
            if (getSn_SR(LOG_SOCKET) != SOCK_ESTABLISHED) {
 8002314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002318:	f7ff f8d4 	bl	80014c4 <WIZCHIP_READ>
 800231c:	2817      	cmp	r0, #23
 800231e:	d00e      	beq.n	800233e <log_printf+0x4a>
                if (connect_to_server() != 0) {
 8002320:	f7ff ff78 	bl	8002214 <connect_to_server>
 8002324:	b158      	cbz	r0, 800233e <log_printf+0x4a>
                    HAL_Delay(50);
 8002326:	2032      	movs	r0, #50	@ 0x32
        for (uint8_t attempt = 0; attempt < MAX_RETRIES; attempt++) {
 8002328:	3d01      	subs	r5, #1
                    HAL_Delay(50);
 800232a:	f000 fa43 	bl	80027b4 <HAL_Delay>
        for (uint8_t attempt = 0; attempt < MAX_RETRIES; attempt++) {
 800232e:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8002332:	d1ef      	bne.n	8002314 <log_printf+0x20>
            if (sent == len) break;
            HAL_Delay(50);
        }
    }
}
 8002334:	b003      	add	sp, #12
 8002336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800233a:	b004      	add	sp, #16
 800233c:	4770      	bx	lr
            uint16_t sent = send(LOG_SOCKET, (uint8_t*)buffer, len);
 800233e:	463a      	mov	r2, r7
 8002340:	4631      	mov	r1, r6
 8002342:	2007      	movs	r0, #7
 8002344:	f7ff fc9e 	bl	8001c84 <send>
            if (sent == len) break;
 8002348:	b280      	uxth	r0, r0
 800234a:	4284      	cmp	r4, r0
 800234c:	d1eb      	bne.n	8002326 <log_printf+0x32>
 800234e:	e7f1      	b.n	8002334 <log_printf+0x40>
 8002350:	20000ed5 	.word	0x20000ed5

08002354 <Logger_Process>:

/* Проверка и авто-реконнект */
void Logger_Process(void) {
 8002354:	b508      	push	{r3, lr}
    if (getSn_SR(LOG_SOCKET) == SOCK_CLOSED) {
 8002356:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800235a:	f7ff f8b3 	bl	80014c4 <WIZCHIP_READ>
 800235e:	b918      	cbnz	r0, 8002368 <Logger_Process+0x14>
        connect_to_server();
    }
}
 8002360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        connect_to_server();
 8002364:	f7ff bf56 	b.w	8002214 <connect_to_server>
}
 8002368:	bd08      	pop	{r3, pc}
	...

0800236c <Logger_SetServer>:

void Logger_SetServer(uint8_t *server_ip, uint16_t port) {
    memcpy(log_server_ip, server_ip, 4);
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <Logger_SetServer+0xc>)
 800236e:	6802      	ldr	r2, [r0, #0]
 8002370:	601a      	str	r2, [r3, #0]
    log_server_port = port;
 8002372:	4b02      	ldr	r3, [pc, #8]	@ (800237c <Logger_SetServer+0x10>)
 8002374:	8019      	strh	r1, [r3, #0]
}
 8002376:	4770      	bx	lr
 8002378:	200010d8 	.word	0x200010d8
 800237c:	200010d6 	.word	0x200010d6

08002380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002380:	b500      	push	{lr}
 8002382:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002384:	2224      	movs	r2, #36	@ 0x24
 8002386:	2100      	movs	r1, #0
 8002388:	a807      	add	r0, sp, #28
 800238a:	f001 fa57 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800238e:	2214      	movs	r2, #20
 8002390:	2100      	movs	r1, #0
 8002392:	a801      	add	r0, sp, #4
 8002394:	f001 fa52 	bl	800383c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002398:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239a:	2101      	movs	r1, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800239c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239e:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a2:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a6:	f000 fc67 	bl	8002c78 <HAL_RCC_OscConfig>
 80023aa:	4601      	mov	r1, r0
 80023ac:	b108      	cbz	r0, 80023b2 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ae:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023b8:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023bc:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023be:	a801      	add	r0, sp, #4
 80023c0:	f000 fe30 	bl	8003024 <HAL_RCC_ClockConfig>
 80023c4:	b108      	cbz	r0, 80023ca <SystemClock_Config+0x4a>
 80023c6:	b672      	cpsid	i
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <SystemClock_Config+0x48>
}
 80023ca:	b011      	add	sp, #68	@ 0x44
 80023cc:	f85d fb04 	ldr.w	pc, [sp], #4

080023d0 <main>:
{
 80023d0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	2410      	movs	r4, #16
{
 80023d4:	b088      	sub	sp, #32
  HAL_Init();
 80023d6:	f000 f9c9 	bl	800276c <HAL_Init>
  SystemClock_Config();
 80023da:	f7ff ffd1 	bl	8002380 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023de:	4622      	mov	r2, r4
 80023e0:	2100      	movs	r1, #0
 80023e2:	eb0d 0004 	add.w	r0, sp, r4
 80023e6:	f001 fa29 	bl	800383c <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b44      	ldr	r3, [pc, #272]	@ (80024fc <main+0x12c>)
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80023ec:	4621      	mov	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80023f0:	4843      	ldr	r0, [pc, #268]	@ (8002500 <main+0x130>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	f042 0204 	orr.w	r2, r2, #4
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	f002 0204 	and.w	r2, r2, #4
 8002400:	9202      	str	r2, [sp, #8]
 8002402:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	f042 0208 	orr.w	r2, r2, #8
 800240c:	619a      	str	r2, [r3, #24]
 800240e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	9303      	str	r3, [sp, #12]
 8002418:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800241a:	f000 fc27 	bl	8002c6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RST_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f240 2101 	movw	r1, #513	@ 0x201
 8002424:	4837      	ldr	r0, [pc, #220]	@ (8002504 <main+0x134>)
 8002426:	f000 fc21 	bl	8002c6c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800242a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2400      	movs	r4, #0
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800242e:	4834      	ldr	r0, [pc, #208]	@ (8002500 <main+0x130>)
 8002430:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	e9cd 6405 	strd	r6, r4, [sp, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002438:	f000 fb4a 	bl	8002ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RST_Pin|RELAY_Pin;
 800243c:	f240 2301 	movw	r3, #513	@ 0x201
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	4830      	ldr	r0, [pc, #192]	@ (8002504 <main+0x134>)
 8002442:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002444:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f000 fb40 	bl	8002ad0 <HAL_GPIO_Init>
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8002450:	482c      	ldr	r0, [pc, #176]	@ (8002504 <main+0x134>)
 8002452:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800245a:	f000 fb39 	bl	8002ad0 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245e:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8002462:	4829      	ldr	r0, [pc, #164]	@ (8002508 <main+0x138>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002464:	4a29      	ldr	r2, [pc, #164]	@ (800250c <main+0x13c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002466:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800246a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800246e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002472:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8002476:	230a      	movs	r3, #10
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002478:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247c:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002482:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002484:	f000 feda 	bl	800323c <HAL_SPI_Init>
 8002488:	4605      	mov	r5, r0
 800248a:	b108      	cbz	r0, 8002490 <main+0xc0>
 800248c:	b672      	cpsid	i
  while (1)
 800248e:	e7fe      	b.n	800248e <main+0xbe>
	Logger_SetServer(device_config.logger_server_ip, device_config.logger_server_port);
 8002490:	4c1f      	ldr	r4, [pc, #124]	@ (8002510 <main+0x140>)
	Relay_Init();
 8002492:	f000 f853 	bl	800253c <Relay_Init>
	ETH_W5500_Init();
 8002496:	f7ff f9d3 	bl	8001840 <ETH_W5500_Init>
	HAL_Delay(500);
 800249a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800249e:	f000 f989 	bl	80027b4 <HAL_Delay>
	ETH_W5500_Tick();
 80024a2:	f7ff fa0f 	bl	80018c4 <ETH_W5500_Tick>
	Logger_SetServer(device_config.logger_server_ip, device_config.logger_server_port);
 80024a6:	8ba1      	ldrh	r1, [r4, #28]
 80024a8:	f104 0017 	add.w	r0, r4, #23
 80024ac:	f7ff ff5e 	bl	800236c <Logger_SetServer>
	LOGI("Hi from stm32\n");
 80024b0:	4918      	ldr	r1, [pc, #96]	@ (8002514 <main+0x144>)
 80024b2:	4630      	mov	r0, r6
 80024b4:	f7ff fece 	bl	8002254 <log_message_internal>
	Logger_Process();
 80024b8:	f7ff ff4c 	bl	8002354 <Logger_Process>
	Flash_Write_Config(&device_config);
 80024bc:	4620      	mov	r0, r4
 80024be:	f7ff fe73 	bl	80021a8 <Flash_Write_Config>
	ETH_W5500_PrintNetInfo();
 80024c2:	f7ff fa05 	bl	80018d0 <ETH_W5500_PrintNetInfo>
    http_digest_init(CLIENT_SOCKET, device_config.camera_ip, device_config.camera_port,
 80024c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 80024d4:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 80024d8:	f104 011e 	add.w	r1, r4, #30
 80024dc:	4628      	mov	r0, r5
 80024de:	f7fd ffdd 	bl	800049c <http_digest_init>
			LOGE("http_digest_process() finished in the loop: %d\n", err);
 80024e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002518 <main+0x148>)
		http_digest_status_t err = http_digest_process();
 80024e4:	f7fe f800 	bl	80004e8 <http_digest_process>
		if (err != HTTP_DIGEST_OK)
 80024e8:	4602      	mov	r2, r0
 80024ea:	b118      	cbz	r0, 80024f4 <main+0x124>
			LOGE("http_digest_process() finished in the loop: %d\n", err);
 80024ec:	4621      	mov	r1, r4
 80024ee:	2003      	movs	r0, #3
 80024f0:	f7ff feb0 	bl	8002254 <log_message_internal>
		Logger_Process();
 80024f4:	f7ff ff2e 	bl	8002354 <Logger_Process>
	{
 80024f8:	e7f4      	b.n	80024e4 <main+0x114>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010800 	.word	0x40010800
 8002504:	40010c00 	.word	0x40010c00
 8002508:	200010dc 	.word	0x200010dc
 800250c:	40013000 	.word	0x40013000
 8002510:	20000048 	.word	0x20000048
 8002514:	0800482c 	.word	0x0800482c
 8002518:	0800483b 	.word	0x0800483b

0800251c <Relay_Off>:
    relay_state = 1;
}

void Relay_Off(void)
{
    HAL_GPIO_WritePin(RELAY_GPIO_PORT, RELAY_PIN, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
{
 800251e:	b508      	push	{r3, lr}
    HAL_GPIO_WritePin(RELAY_GPIO_PORT, RELAY_PIN, GPIO_PIN_RESET);
 8002520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002524:	4803      	ldr	r0, [pc, #12]	@ (8002534 <Relay_Off+0x18>)
 8002526:	f000 fba1 	bl	8002c6c <HAL_GPIO_WritePin>
    relay_state = 0;
 800252a:	2200      	movs	r2, #0
 800252c:	4b02      	ldr	r3, [pc, #8]	@ (8002538 <Relay_Off+0x1c>)
 800252e:	701a      	strb	r2, [r3, #0]
}
 8002530:	bd08      	pop	{r3, pc}
 8002532:	bf00      	nop
 8002534:	40010c00 	.word	0x40010c00
 8002538:	20001134 	.word	0x20001134

0800253c <Relay_Init>:
{
 800253c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253e:	2300      	movs	r3, #0
 8002540:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002546:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800254a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(RELAY_GPIO_PORT, &GPIO_InitStruct);
 800254c:	480b      	ldr	r0, [pc, #44]	@ (800257c <Relay_Init+0x40>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	f042 0208 	orr.w	r2, r2, #8
 8002552:	619a      	str	r2, [r3, #24]
 8002554:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	f44f 7200 	mov.w	r2, #512	@ 0x200
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2302      	movs	r3, #2
    HAL_GPIO_Init(RELAY_GPIO_PORT, &GPIO_InitStruct);
 800256a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RELAY_GPIO_PORT, &GPIO_InitStruct);
 800256e:	f000 faaf 	bl	8002ad0 <HAL_GPIO_Init>
    Relay_Off();
 8002572:	f7ff ffd3 	bl	800251c <Relay_Off>
}
 8002576:	b007      	add	sp, #28
 8002578:	f85d fb04 	ldr.w	pc, [sp], #4
 800257c:	40010c00 	.word	0x40010c00

08002580 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002580:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <HAL_MspInit+0x3c>)
{
 8002582:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	699a      	ldr	r2, [r3, #24]
 800258e:	f002 0201 	and.w	r2, r2, #1
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800259c:	61da      	str	r2, [r3, #28]
 800259e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80025aa:	6853      	ldr	r3, [r2, #4]
 80025ac:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	b002      	add	sp, #8
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000

080025c4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	4604      	mov	r4, r0
 80025c8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	2210      	movs	r2, #16
 80025cc:	2100      	movs	r1, #0
 80025ce:	a802      	add	r0, sp, #8
 80025d0:	f001 f934 	bl	800383c <memset>
  if(hspi->Instance==SPI1)
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	4b16      	ldr	r3, [pc, #88]	@ (8002630 <HAL_SPI_MspInit+0x6c>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d126      	bne.n	800262a <HAL_SPI_MspInit+0x66>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025dc:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 80025e0:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	4814      	ldr	r0, [pc, #80]	@ (8002634 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ee:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	f042 0204 	orr.w	r2, r2, #4
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	22a0      	movs	r2, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f000 fa5c 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002618:	2140      	movs	r1, #64	@ 0x40
 800261a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	4805      	ldr	r0, [pc, #20]	@ (8002634 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f000 fa53 	bl	8002ad0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800262a:	b006      	add	sp, #24
 800262c:	bd10      	pop	{r4, pc}
 800262e:	bf00      	nop
 8002630:	40013000 	.word	0x40013000
 8002634:	40010800 	.word	0x40010800

08002638 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler>

0800263a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <HardFault_Handler>

0800263c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <MemManage_Handler>

0800263e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <BusFault_Handler>

08002640 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <UsageFault_Handler>

08002642 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002644:	4770      	bx	lr

08002646 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002648:	f000 b8a2 	b.w	8002790 <HAL_IncTick>

0800264c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <_sbrk+0x30>)
{
 800264e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002650:	6811      	ldr	r1, [r2, #0]
{
 8002652:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002654:	b909      	cbnz	r1, 800265a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002656:	490a      	ldr	r1, [pc, #40]	@ (8002680 <_sbrk+0x34>)
 8002658:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	6810      	ldr	r0, [r2, #0]
 800265c:	4909      	ldr	r1, [pc, #36]	@ (8002684 <_sbrk+0x38>)
 800265e:	4c0a      	ldr	r4, [pc, #40]	@ (8002688 <_sbrk+0x3c>)
 8002660:	4403      	add	r3, r0
 8002662:	1b09      	subs	r1, r1, r4
 8002664:	428b      	cmp	r3, r1
 8002666:	d906      	bls.n	8002676 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002668:	f001 f970 	bl	800394c <__errno>
 800266c:	230c      	movs	r3, #12
 800266e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002674:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002676:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002678:	e7fc      	b.n	8002674 <_sbrk+0x28>
 800267a:	bf00      	nop
 800267c:	20001138 	.word	0x20001138
 8002680:	200012a8 	.word	0x200012a8
 8002684:	20002800 	.word	0x20002800
 8002688:	00000400 	.word	0x00000400

0800268c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800268c:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <SystemInit+0x40>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <SystemInit+0x44>)
 800269a:	400a      	ands	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 80026a4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	f422 02fe 	bic.w	r2, r2, #8323072	@ 0x7f0000
 80026b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026ba:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 80026be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026c4:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <SystemInit+0x48>)
 80026c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	f8ff0000 	.word	0xf8ff0000
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026da:	e003      	b.n	80026e4 <LoopCopyDataInit>

080026dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026e2:	3104      	adds	r1, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026e4:	480a      	ldr	r0, [pc, #40]	@ (8002710 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026ec:	d3f6      	bcc.n	80026dc <CopyDataInit>
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026f0:	e002      	b.n	80026f8 <LoopFillZerobss>

080026f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026f4:	f842 3b04 	str.w	r3, [r2], #4

080026f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026fc:	d3f9      	bcc.n	80026f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026fe:	f7ff ffc5 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002702:	f001 f929 	bl	8003958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002706:	f7ff fe63 	bl	80023d0 <main>
  bx lr
 800270a:	4770      	bx	lr
  ldr r3, =_sidata
 800270c:	08004a00 	.word	0x08004a00
  ldr r0, =_sdata
 8002710:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002714:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8002718:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 800271c:	200012a8 	.word	0x200012a8

08002720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_2_IRQHandler>
	...

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002726:	4b0e      	ldr	r3, [pc, #56]	@ (8002760 <HAL_InitTick+0x3c>)
{
 8002728:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002730:	fbb3 f3f2 	udiv	r3, r3, r2
 8002734:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_InitTick+0x40>)
 8002736:	6810      	ldr	r0, [r2, #0]
 8002738:	fbb0 f0f3 	udiv	r0, r0, r3
 800273c:	f000 f88e 	bl	800285c <HAL_SYSTICK_Config>
 8002740:	4604      	mov	r4, r0
 8002742:	b958      	cbnz	r0, 800275c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002744:	2d0f      	cmp	r5, #15
 8002746:	d809      	bhi.n	800275c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002748:	4602      	mov	r2, r0
 800274a:	4629      	mov	r1, r5
 800274c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002750:	f000 f854 	bl	80027fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002754:	4620      	mov	r0, r4
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_InitTick+0x44>)
 8002758:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800275a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
 800275e:	e7fc      	b.n	800275a <HAL_InitTick+0x36>
 8002760:	20000150 	.word	0x20000150
 8002764:	2000014c 	.word	0x2000014c
 8002768:	20000154 	.word	0x20000154

0800276c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_Init+0x20>)
{
 800276e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002772:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277a:	f000 f82d 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	200f      	movs	r0, #15
 8002780:	f7ff ffd0 	bl	8002724 <HAL_InitTick>
  HAL_MspInit();
 8002784:	f7ff fefc 	bl	8002580 <HAL_MspInit>
}
 8002788:	2000      	movs	r0, #0
 800278a:	bd08      	pop	{r3, pc}
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002790:	4a03      	ldr	r2, [pc, #12]	@ (80027a0 <HAL_IncTick+0x10>)
 8002792:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <HAL_IncTick+0x14>)
 8002794:	6811      	ldr	r1, [r2, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	440b      	add	r3, r1
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	2000113c 	.word	0x2000113c
 80027a4:	20000150 	.word	0x20000150

080027a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027a8:	4b01      	ldr	r3, [pc, #4]	@ (80027b0 <HAL_GetTick+0x8>)
 80027aa:	6818      	ldr	r0, [r3, #0]
}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000113c 	.word	0x2000113c

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b538      	push	{r3, r4, r5, lr}
 80027b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff fff6 	bl	80027a8 <HAL_GetTick>
 80027bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80027c0:	bf1e      	ittt	ne
 80027c2:	4b04      	ldrne	r3, [pc, #16]	@ (80027d4 <HAL_Delay+0x20>)
 80027c4:	781b      	ldrbne	r3, [r3, #0]
 80027c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	1b43      	subs	r3, r0, r5
 80027ce:	42a3      	cmp	r3, r4
 80027d0:	d3fa      	bcc.n	80027c8 <HAL_Delay+0x14>
  {
  }
}
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000150 	.word	0x20000150

080027d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d8:	4907      	ldr	r1, [pc, #28]	@ (80027f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027e6:	0412      	lsls	r2, r2, #16
 80027e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80027f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b530      	push	{r4, r5, lr}
 8002800:	68dc      	ldr	r4, [r3, #12]
 8002802:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002806:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	2b04      	cmp	r3, #4
 800280e:	bf28      	it	cs
 8002810:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002818:	bf94      	ite	ls
 800281a:	2400      	movls	r4, #0
 800281c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281e:	fa05 f303 	lsl.w	r3, r5, r3
 8002822:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002826:	40a5      	lsls	r5, r4
 8002828:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800282e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002834:	bfac      	ite	ge
 8002836:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	4a07      	ldrlt	r2, [pc, #28]	@ (8002858 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002840:	b2db      	uxtb	r3, r3
 8002842:	bfab      	itete	ge
 8002844:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002852:	bd30      	pop	{r4, r5, pc}
 8002854:	e000ed00 	.word	0xe000ed00
 8002858:	e000ed14 	.word	0xe000ed14

0800285c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	3801      	subs	r0, #1
 800285e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002862:	d20b      	bcs.n	800287c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002864:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	21f0      	movs	r1, #240	@ 0xf0
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002872:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002874:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002876:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002878:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800287c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002884:	4a11      	ldr	r2, [pc, #68]	@ (80028cc <FLASH_SetErrorCode+0x48>)
 8002886:	68d3      	ldr	r3, [r2, #12]
 8002888:	f013 0310 	ands.w	r3, r3, #16
 800288c:	d005      	beq.n	800289a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800288e:	4910      	ldr	r1, [pc, #64]	@ (80028d0 <FLASH_SetErrorCode+0x4c>)
 8002890:	69cb      	ldr	r3, [r1, #28]
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002898:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800289a:	68d2      	ldr	r2, [r2, #12]
 800289c:	0750      	lsls	r0, r2, #29
 800289e:	d506      	bpl.n	80028ae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028a0:	490b      	ldr	r1, [pc, #44]	@ (80028d0 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80028a2:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028a6:	69ca      	ldr	r2, [r1, #28]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80028ae:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <FLASH_SetErrorCode+0x48>)
 80028b0:	69d1      	ldr	r1, [r2, #28]
 80028b2:	07c9      	lsls	r1, r1, #31
 80028b4:	d508      	bpl.n	80028c8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80028b6:	4806      	ldr	r0, [pc, #24]	@ (80028d0 <FLASH_SetErrorCode+0x4c>)
 80028b8:	69c1      	ldr	r1, [r0, #28]
 80028ba:	f041 0104 	orr.w	r1, r1, #4
 80028be:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80028c0:	69d1      	ldr	r1, [r2, #28]
 80028c2:	f021 0101 	bic.w	r1, r1, #1
 80028c6:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028c8:	60d3      	str	r3, [r2, #12]
}  
 80028ca:	4770      	bx	lr
 80028cc:	40022000 	.word	0x40022000
 80028d0:	20001140 	.word	0x20001140

080028d4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_FLASH_Unlock+0x1c>)
 80028d6:	6918      	ldr	r0, [r3, #16]
 80028d8:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 80028dc:	d007      	beq.n	80028ee <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <HAL_FLASH_Unlock+0x20>)
 80028e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028e2:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 80028e6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028e8:	6918      	ldr	r0, [r3, #16]
 80028ea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80028ee:	4770      	bx	lr
 80028f0:	40022000 	.word	0x40022000
 80028f4:	45670123 	.word	0x45670123

080028f8 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80028f8:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <HAL_FLASH_Lock+0x10>)
}
 80028fa:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80028fc:	6913      	ldr	r3, [r2, #16]
 80028fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002902:	6113      	str	r3, [r2, #16]
}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000

0800290c <FLASH_WaitForLastOperation>:
{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ff4a 	bl	80027a8 <HAL_GetTick>
 8002914:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002916:	4c11      	ldr	r4, [pc, #68]	@ (800295c <FLASH_WaitForLastOperation+0x50>)
 8002918:	68e3      	ldr	r3, [r4, #12]
 800291a:	07d8      	lsls	r0, r3, #31
 800291c:	d412      	bmi.n	8002944 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002922:	bf44      	itt	mi
 8002924:	2320      	movmi	r3, #32
 8002926:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002928:	68e3      	ldr	r3, [r4, #12]
 800292a:	06da      	lsls	r2, r3, #27
 800292c:	d406      	bmi.n	800293c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800292e:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002930:	07db      	lsls	r3, r3, #31
 8002932:	d403      	bmi.n	800293c <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002934:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002936:	f010 0004 	ands.w	r0, r0, #4
 800293a:	d007      	beq.n	800294c <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 800293c:	f7ff ffa2 	bl	8002884 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002940:	2001      	movs	r0, #1
 8002942:	e003      	b.n	800294c <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8002944:	1c6b      	adds	r3, r5, #1
 8002946:	d0e7      	beq.n	8002918 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002948:	b90d      	cbnz	r5, 800294e <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
}
 800294c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800294e:	f7ff ff2b 	bl	80027a8 <HAL_GetTick>
 8002952:	1b80      	subs	r0, r0, r6
 8002954:	42a8      	cmp	r0, r5
 8002956:	d9df      	bls.n	8002918 <FLASH_WaitForLastOperation+0xc>
 8002958:	e7f7      	b.n	800294a <FLASH_WaitForLastOperation+0x3e>
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000

08002960 <HAL_FLASH_Program>:
{
 8002960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8002964:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80029fc <HAL_FLASH_Program+0x9c>
{
 8002968:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800296a:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 800296e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002970:	2b01      	cmp	r3, #1
{
 8002972:	4688      	mov	r8, r1
 8002974:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8002976:	d03f      	beq.n	80029f8 <HAL_FLASH_Program+0x98>
 8002978:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800297a:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 800297e:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002982:	f7ff ffc3 	bl	800290c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002986:	bb90      	cbnz	r0, 80029ee <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002988:	2d01      	cmp	r5, #1
 800298a:	d003      	beq.n	8002994 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 800298c:	2d02      	cmp	r5, #2
 800298e:	bf14      	ite	ne
 8002990:	2504      	movne	r5, #4
 8002992:	2502      	moveq	r5, #2
      nbiterations = 4U;
 8002994:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002996:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002998:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8002a00 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800299c:	0134      	lsls	r4, r6, #4
 800299e:	f1c4 0120 	rsb	r1, r4, #32
 80029a2:	f1a4 0220 	sub.w	r2, r4, #32
 80029a6:	fa07 f101 	lsl.w	r1, r7, r1
 80029aa:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029ae:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029b2:	430c      	orrs	r4, r1
 80029b4:	fa27 f202 	lsr.w	r2, r7, r2
 80029b8:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029ba:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80029be:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029c0:	f042 0201 	orr.w	r2, r2, #1
 80029c4:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 80029cc:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80029d0:	f7ff ff9c 	bl	800290c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80029d4:	f8db 2010 	ldr.w	r2, [fp, #16]
 80029d8:	f022 0201 	bic.w	r2, r2, #1
 80029dc:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80029e0:	b928      	cbnz	r0, 80029ee <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80029e2:	3601      	adds	r6, #1
 80029e4:	b2f2      	uxtb	r2, r6
 80029e6:	4295      	cmp	r5, r2
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	d8d6      	bhi.n	800299c <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 80029ee:	2300      	movs	r3, #0
 80029f0:	f88a 3018 	strb.w	r3, [sl, #24]
}
 80029f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80029f8:	2002      	movs	r0, #2
 80029fa:	e7fb      	b.n	80029f4 <HAL_FLASH_Program+0x94>
 80029fc:	20001140 	.word	0x20001140
 8002a00:	40022000 	.word	0x40022000

08002a04 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a04:	2200      	movs	r2, #0
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <FLASH_PageErase+0x1c>)
 8002a08:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <FLASH_PageErase+0x20>)
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	f042 0202 	orr.w	r2, r2, #2
 8002a12:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a14:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a1c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002a1e:	4770      	bx	lr
 8002a20:	20001140 	.word	0x20001140
 8002a24:	40022000 	.word	0x40022000

08002a28 <HAL_FLASHEx_Erase>:
{
 8002a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8002a2c:	4f26      	ldr	r7, [pc, #152]	@ (8002ac8 <HAL_FLASHEx_Erase+0xa0>)
{
 8002a2e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002a30:	7e3b      	ldrb	r3, [r7, #24]
{
 8002a32:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d044      	beq.n	8002ac2 <HAL_FLASHEx_Erase+0x9a>
 8002a38:	2401      	movs	r4, #1
 8002a3a:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a3c:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a3e:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d11a      	bne.n	8002a7c <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a46:	f7ff ff61 	bl	800290c <FLASH_WaitForLastOperation>
 8002a4a:	b120      	cbz	r0, 8002a56 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	763b      	strb	r3, [r7, #24]
}
 8002a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a56:	4c1d      	ldr	r4, [pc, #116]	@ (8002acc <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a58:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a5a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a5c:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a6c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6e:	f7ff ff4d 	bl	800290c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6123      	str	r3, [r4, #16]
 8002a7a:	e7e8      	b.n	8002a4e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002a7c:	f7ff ff46 	bl	800290c <FLASH_WaitForLastOperation>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1e3      	bne.n	8002a4c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a88:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a8c:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8002a8e:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002a90:	4c0e      	ldr	r4, [pc, #56]	@ (8002acc <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002a92:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8002a96:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8002a9a:	42b3      	cmp	r3, r6
 8002a9c:	d9d7      	bls.n	8002a4e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f7ff ffb0 	bl	8002a04 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002aa8:	f7ff ff30 	bl	800290c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002aac:	6923      	ldr	r3, [r4, #16]
 8002aae:	f023 0302 	bic.w	r3, r3, #2
 8002ab2:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8002ab4:	b110      	cbz	r0, 8002abc <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 8002ab6:	f8c8 6000 	str.w	r6, [r8]
            break;
 8002aba:	e7c8      	b.n	8002a4e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002abc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ac0:	e7e7      	b.n	8002a92 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8002ac2:	2002      	movs	r0, #2
 8002ac4:	e7c5      	b.n	8002a52 <HAL_FLASHEx_Erase+0x2a>
 8002ac6:	bf00      	nop
 8002ac8:	20001140 	.word	0x20001140
 8002acc:	40022000 	.word	0x40022000

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ad4:	2200      	movs	r2, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad6:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8002ada:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002adc:	f8df c178 	ldr.w	ip, [pc, #376]	@ 8002c58 <HAL_GPIO_Init+0x188>
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8002c5c <HAL_GPIO_Init+0x18c>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ae2:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae6:	680d      	ldr	r5, [r1, #0]
 8002ae8:	fa35 f406 	lsrs.w	r4, r5, r6
 8002aec:	d102      	bne.n	8002af4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8002aee:	b003      	add	sp, #12
 8002af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002af4:	2401      	movs	r4, #1
 8002af6:	fa04 f706 	lsl.w	r7, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8002afe:	ea37 0505 	bics.w	r5, r7, r5
 8002b02:	d172      	bne.n	8002bea <HAL_GPIO_Init+0x11a>
      switch (GPIO_Init->Mode)
 8002b04:	684d      	ldr	r5, [r1, #4]
 8002b06:	2d03      	cmp	r5, #3
 8002b08:	d806      	bhi.n	8002b18 <HAL_GPIO_Init+0x48>
 8002b0a:	3d01      	subs	r5, #1
 8002b0c:	2d02      	cmp	r5, #2
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_GPIO_Init+0x140>
 8002b10:	e8df f005 	tbb	[pc, r5]
 8002b14:	948f      	.short	0x948f
 8002b16:	9a          	.byte	0x9a
 8002b17:	00          	.byte	0x00
 8002b18:	2d12      	cmp	r5, #18
 8002b1a:	f000 8092 	beq.w	8002c42 <HAL_GPIO_Init+0x172>
 8002b1e:	d866      	bhi.n	8002bee <HAL_GPIO_Init+0x11e>
 8002b20:	2d11      	cmp	r5, #17
 8002b22:	f000 8088 	beq.w	8002c36 <HAL_GPIO_Init+0x166>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b26:	2cff      	cmp	r4, #255	@ 0xff
 8002b28:	bf94      	ite	ls
 8002b2a:	4681      	movls	r9, r0
 8002b2c:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b2e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b32:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b36:	bf88      	it	hi
 8002b38:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b3a:	fa0e fa05 	lsl.w	sl, lr, r5
 8002b3e:	ea27 070a 	bic.w	r7, r7, sl
 8002b42:	fa02 f505 	lsl.w	r5, r2, r5
 8002b46:	432f      	orrs	r7, r5
 8002b48:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002b50:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002b54:	d049      	beq.n	8002bea <HAL_GPIO_Init+0x11a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b56:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8002b5a:	f026 0703 	bic.w	r7, r6, #3
 8002b5e:	f045 0501 	orr.w	r5, r5, #1
 8002b62:	f8cc 5018 	str.w	r5, [ip, #24]
 8002b66:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8002b6a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002b6e:	f005 0501 	and.w	r5, r5, #1
 8002b72:	9501      	str	r5, [sp, #4]
 8002b74:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b78:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b7c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b82:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b84:	fa0e fb0a 	lsl.w	fp, lr, sl
 8002b88:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b8c:	4d34      	ldr	r5, [pc, #208]	@ (8002c60 <HAL_GPIO_Init+0x190>)
 8002b8e:	42a8      	cmp	r0, r5
 8002b90:	d05e      	beq.n	8002c50 <HAL_GPIO_Init+0x180>
 8002b92:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b96:	42a8      	cmp	r0, r5
 8002b98:	d05c      	beq.n	8002c54 <HAL_GPIO_Init+0x184>
 8002b9a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002b9e:	42a8      	cmp	r0, r5
 8002ba0:	bf14      	ite	ne
 8002ba2:	2503      	movne	r5, #3
 8002ba4:	2502      	moveq	r5, #2
 8002ba6:	fa05 f50a 	lsl.w	r5, r5, sl
 8002baa:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002bae:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bb2:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb6:	bf14      	ite	ne
 8002bb8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bba:	43a5      	biceq	r5, r4
 8002bbc:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bbe:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc0:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc4:	bf14      	ite	ne
 8002bc6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bc8:	43a5      	biceq	r5, r4
 8002bca:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bcc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bce:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd2:	bf14      	ite	ne
 8002bd4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd6:	43a5      	biceq	r5, r4
 8002bd8:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bda:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bdc:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be0:	bf14      	ite	ne
 8002be2:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002be4:	ea25 0404 	biceq.w	r4, r5, r4
 8002be8:	60dc      	str	r4, [r3, #12]
	position++;
 8002bea:	3601      	adds	r6, #1
 8002bec:	e77b      	b.n	8002ae6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002bee:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 8002c64 <HAL_GPIO_Init+0x194>
 8002bf2:	454d      	cmp	r5, r9
 8002bf4:	d00c      	beq.n	8002c10 <HAL_GPIO_Init+0x140>
 8002bf6:	d815      	bhi.n	8002c24 <HAL_GPIO_Init+0x154>
 8002bf8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002bfc:	454d      	cmp	r5, r9
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x140>
 8002c00:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 8002c04:	454d      	cmp	r5, r9
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x140>
 8002c08:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002c0c:	454d      	cmp	r5, r9
 8002c0e:	d18a      	bne.n	8002b26 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c10:	688a      	ldr	r2, [r1, #8]
 8002c12:	b1da      	cbz	r2, 8002c4c <HAL_GPIO_Init+0x17c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c14:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002c16:	bf08      	it	eq
 8002c18:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c1a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002c1e:	bf18      	it	ne
 8002c20:	6147      	strne	r7, [r0, #20]
 8002c22:	e780      	b.n	8002b26 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002c24:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8002c68 <HAL_GPIO_Init+0x198>
 8002c28:	454d      	cmp	r5, r9
 8002c2a:	d0f1      	beq.n	8002c10 <HAL_GPIO_Init+0x140>
 8002c2c:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8002c30:	e7ec      	b.n	8002c0c <HAL_GPIO_Init+0x13c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c32:	68ca      	ldr	r2, [r1, #12]
          break;
 8002c34:	e777      	b.n	8002b26 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c36:	68ca      	ldr	r2, [r1, #12]
 8002c38:	3204      	adds	r2, #4
          break;
 8002c3a:	e774      	b.n	8002b26 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c3c:	68ca      	ldr	r2, [r1, #12]
 8002c3e:	3208      	adds	r2, #8
          break;
 8002c40:	e771      	b.n	8002b26 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c42:	68ca      	ldr	r2, [r1, #12]
 8002c44:	320c      	adds	r2, #12
          break;
 8002c46:	e76e      	b.n	8002b26 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	e76c      	b.n	8002b26 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	e76a      	b.n	8002b26 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	2500      	movs	r5, #0
 8002c52:	e7a8      	b.n	8002ba6 <HAL_GPIO_Init+0xd6>
 8002c54:	2501      	movs	r5, #1
 8002c56:	e7a6      	b.n	8002ba6 <HAL_GPIO_Init+0xd6>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40010800 	.word	0x40010800
 8002c64:	10220000 	.word	0x10220000
 8002c68:	10310000 	.word	0x10310000

08002c6c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c6c:	b10a      	cbz	r2, 8002c72 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c6e:	6101      	str	r1, [r0, #16]
  }
}
 8002c70:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c72:	0409      	lsls	r1, r1, #16
 8002c74:	e7fb      	b.n	8002c6e <HAL_GPIO_WritePin+0x2>
	...

08002c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c7c:	4605      	mov	r5, r0
 8002c7e:	b338      	cbz	r0, 8002cd0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c80:	6803      	ldr	r3, [r0, #0]
 8002c82:	07db      	lsls	r3, r3, #31
 8002c84:	d410      	bmi.n	8002ca8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c86:	682b      	ldr	r3, [r5, #0]
 8002c88:	079f      	lsls	r7, r3, #30
 8002c8a:	d45e      	bmi.n	8002d4a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	0719      	lsls	r1, r3, #28
 8002c90:	f100 8095 	bmi.w	8002dbe <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	075a      	lsls	r2, r3, #29
 8002c98:	f100 80c1 	bmi.w	8002e1e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	69eb      	ldr	r3, [r5, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 812c 	bne.w	8002efc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e029      	b.n	8002cfc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	4c90      	ldr	r4, [pc, #576]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002caa:	6863      	ldr	r3, [r4, #4]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
 8002cbe:	6863      	ldr	r3, [r4, #4]
 8002cc0:	03de      	lsls	r6, r3, #15
 8002cc2:	d507      	bpl.n	8002cd4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	039c      	lsls	r4, r3, #14
 8002cc8:	d5dd      	bpl.n	8002c86 <HAL_RCC_OscConfig+0xe>
 8002cca:	686b      	ldr	r3, [r5, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1da      	bne.n	8002c86 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd4:	686b      	ldr	r3, [r5, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x8a>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ce4:	f7ff fd60 	bl	80027a8 <HAL_GetTick>
 8002ce8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	0398      	lsls	r0, r3, #14
 8002cee:	d4ca      	bmi.n	8002c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf0:	f7ff fd5a 	bl	80027a8 <HAL_GetTick>
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	2864      	cmp	r0, #100	@ 0x64
 8002cf8:	d9f7      	bls.n	8002cea <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002cfa:	2003      	movs	r0, #3
}
 8002cfc:	b002      	add	sp, #8
 8002cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	b99b      	cbnz	r3, 8002d2c <HAL_RCC_OscConfig+0xb4>
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d14:	f7ff fd48 	bl	80027a8 <HAL_GetTick>
 8002d18:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	0399      	lsls	r1, r3, #14
 8002d1e:	d5b2      	bpl.n	8002c86 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff fd42 	bl	80027a8 <HAL_GetTick>
 8002d24:	1b80      	subs	r0, r0, r6
 8002d26:	2864      	cmp	r0, #100	@ 0x64
 8002d28:	d9f7      	bls.n	8002d1a <HAL_RCC_OscConfig+0xa2>
 8002d2a:	e7e6      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	d103      	bne.n	8002d3c <HAL_RCC_OscConfig+0xc4>
 8002d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	e7cf      	b.n	8002cdc <HAL_RCC_OscConfig+0x64>
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d48:	e7cb      	b.n	8002ce2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4a:	4c68      	ldr	r4, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002d4c:	6863      	ldr	r3, [r4, #4]
 8002d4e:	f013 0f0c 	tst.w	r3, #12
 8002d52:	d007      	beq.n	8002d64 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d54:	6863      	ldr	r3, [r4, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d110      	bne.n	8002d80 <HAL_RCC_OscConfig+0x108>
 8002d5e:	6863      	ldr	r3, [r4, #4]
 8002d60:	03da      	lsls	r2, r3, #15
 8002d62:	d40d      	bmi.n	8002d80 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	079b      	lsls	r3, r3, #30
 8002d68:	d502      	bpl.n	8002d70 <HAL_RCC_OscConfig+0xf8>
 8002d6a:	692b      	ldr	r3, [r5, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d1af      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	696a      	ldr	r2, [r5, #20]
 8002d74:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002d78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	e785      	b.n	8002c8c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	692a      	ldr	r2, [r5, #16]
 8002d82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002d84:	b16a      	cbz	r2, 8002da2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fd0d 	bl	80027a8 <HAL_GetTick>
 8002d8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	079f      	lsls	r7, r3, #30
 8002d94:	d4ec      	bmi.n	8002d70 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7ff fd07 	bl	80027a8 <HAL_GetTick>
 8002d9a:	1b80      	subs	r0, r0, r6
 8002d9c:	2802      	cmp	r0, #2
 8002d9e:	d9f7      	bls.n	8002d90 <HAL_RCC_OscConfig+0x118>
 8002da0:	e7ab      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002da2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002da4:	f7ff fd00 	bl	80027a8 <HAL_GetTick>
 8002da8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	0798      	lsls	r0, r3, #30
 8002dae:	f57f af6d 	bpl.w	8002c8c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7ff fcf9 	bl	80027a8 <HAL_GetTick>
 8002db6:	1b80      	subs	r0, r0, r6
 8002db8:	2802      	cmp	r0, #2
 8002dba:	d9f6      	bls.n	8002daa <HAL_RCC_OscConfig+0x132>
 8002dbc:	e79d      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbe:	69aa      	ldr	r2, [r5, #24]
 8002dc0:	4e4a      	ldr	r6, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef0 <HAL_RCC_OscConfig+0x278>)
 8002dc4:	b1e2      	cbz	r2, 8002e00 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002dcc:	f7ff fcec 	bl	80027a8 <HAL_GetTick>
 8002dd0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002dd4:	079b      	lsls	r3, r3, #30
 8002dd6:	d50d      	bpl.n	8002df4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dd8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002de6:	bf00      	nop
  }
  while (Delay --);
 8002de8:	9b01      	ldr	r3, [sp, #4]
 8002dea:	1e5a      	subs	r2, r3, #1
 8002dec:	9201      	str	r2, [sp, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_RCC_OscConfig+0x16e>
 8002df2:	e74f      	b.n	8002c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7ff fcd8 	bl	80027a8 <HAL_GetTick>
 8002df8:	1b00      	subs	r0, r0, r4
 8002dfa:	2802      	cmp	r0, #2
 8002dfc:	d9e9      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x15a>
 8002dfe:	e77c      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002e00:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002e04:	f7ff fcd0 	bl	80027a8 <HAL_GetTick>
 8002e08:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002e0c:	079f      	lsls	r7, r3, #30
 8002e0e:	f57f af41 	bpl.w	8002c94 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7ff fcc9 	bl	80027a8 <HAL_GetTick>
 8002e16:	1b00      	subs	r0, r0, r4
 8002e18:	2802      	cmp	r0, #2
 8002e1a:	d9f6      	bls.n	8002e0a <HAL_RCC_OscConfig+0x192>
 8002e1c:	e76d      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4c33      	ldr	r4, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x274>)
 8002e20:	69e3      	ldr	r3, [r4, #28]
 8002e22:	00d8      	lsls	r0, r3, #3
 8002e24:	d424      	bmi.n	8002e70 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8002e26:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	69e3      	ldr	r3, [r4, #28]
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	61e3      	str	r3, [r4, #28]
 8002e30:	69e3      	ldr	r3, [r4, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4e2f      	ldr	r6, [pc, #188]	@ (8002ef8 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	6833      	ldr	r3, [r6, #0]
 8002e3e:	05d9      	lsls	r1, r3, #23
 8002e40:	d518      	bpl.n	8002e74 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e42:	68eb      	ldr	r3, [r5, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d126      	bne.n	8002e96 <HAL_RCC_OscConfig+0x21e>
 8002e48:	6a23      	ldr	r3, [r4, #32]
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002e50:	f7ff fcaa 	bl	80027a8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002e58:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	6a23      	ldr	r3, [r4, #32]
 8002e5c:	079b      	lsls	r3, r3, #30
 8002e5e:	d53f      	bpl.n	8002ee0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002e60:	2f00      	cmp	r7, #0
 8002e62:	f43f af1b 	beq.w	8002c9c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e66:	69e3      	ldr	r3, [r4, #28]
 8002e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	61e3      	str	r3, [r4, #28]
 8002e6e:	e715      	b.n	8002c9c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	2700      	movs	r7, #0
 8002e72:	e7e2      	b.n	8002e3a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e74:	6833      	ldr	r3, [r6, #0]
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e7c:	f7ff fc94 	bl	80027a8 <HAL_GetTick>
 8002e80:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	6833      	ldr	r3, [r6, #0]
 8002e84:	05da      	lsls	r2, r3, #23
 8002e86:	d4dc      	bmi.n	8002e42 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7ff fc8e 	bl	80027a8 <HAL_GetTick>
 8002e8c:	eba0 0008 	sub.w	r0, r0, r8
 8002e90:	2864      	cmp	r0, #100	@ 0x64
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x20a>
 8002e94:	e731      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e96:	b9ab      	cbnz	r3, 8002ec4 <HAL_RCC_OscConfig+0x24c>
 8002e98:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6223      	str	r3, [r4, #32]
 8002ea4:	6a23      	ldr	r3, [r4, #32]
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002eac:	f7ff fc7c 	bl	80027a8 <HAL_GetTick>
 8002eb0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb2:	6a23      	ldr	r3, [r4, #32]
 8002eb4:	0798      	lsls	r0, r3, #30
 8002eb6:	d5d3      	bpl.n	8002e60 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7ff fc76 	bl	80027a8 <HAL_GetTick>
 8002ebc:	1b80      	subs	r0, r0, r6
 8002ebe:	4540      	cmp	r0, r8
 8002ec0:	d9f7      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x23a>
 8002ec2:	e71a      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	6a23      	ldr	r3, [r4, #32]
 8002ec8:	d103      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x25a>
 8002eca:	f043 0304 	orr.w	r3, r3, #4
 8002ece:	6223      	str	r3, [r4, #32]
 8002ed0:	e7ba      	b.n	8002e48 <HAL_RCC_OscConfig+0x1d0>
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6223      	str	r3, [r4, #32]
 8002ed8:	6a23      	ldr	r3, [r4, #32]
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	e7b6      	b.n	8002e4e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fc62 	bl	80027a8 <HAL_GetTick>
 8002ee4:	1b80      	subs	r0, r0, r6
 8002ee6:	4540      	cmp	r0, r8
 8002ee8:	d9b7      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1e2>
 8002eea:	e706      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420000 	.word	0x42420000
 8002ef4:	2000014c 	.word	0x2000014c
 8002ef8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002efc:	4c2a      	ldr	r4, [pc, #168]	@ (8002fa8 <HAL_RCC_OscConfig+0x330>)
 8002efe:	6862      	ldr	r2, [r4, #4]
 8002f00:	f002 020c 	and.w	r2, r2, #12
 8002f04:	2a08      	cmp	r2, #8
 8002f06:	d03e      	beq.n	8002f86 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	d12c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002f12:	f7ff fc49 	bl	80027a8 <HAL_GetTick>
 8002f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	0199      	lsls	r1, r3, #6
 8002f1c:	d420      	bmi.n	8002f60 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f1e:	6a2b      	ldr	r3, [r5, #32]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	68a9      	ldr	r1, [r5, #8]
 8002f2a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f32:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002f34:	6862      	ldr	r2, [r4, #4]
 8002f36:	430b      	orrs	r3, r1
 8002f38:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8002f3c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002f3e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f40:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f42:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <HAL_RCC_OscConfig+0x334>)
 8002f44:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002f46:	f7ff fc2f 	bl	80027a8 <HAL_GetTick>
 8002f4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	019a      	lsls	r2, r3, #6
 8002f50:	f53f aea8 	bmi.w	8002ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff fc28 	bl	80027a8 <HAL_GetTick>
 8002f58:	1b40      	subs	r0, r0, r5
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d9f6      	bls.n	8002f4c <HAL_RCC_OscConfig+0x2d4>
 8002f5e:	e6cc      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7ff fc22 	bl	80027a8 <HAL_GetTick>
 8002f64:	1b80      	subs	r0, r0, r6
 8002f66:	2802      	cmp	r0, #2
 8002f68:	d9d6      	bls.n	8002f18 <HAL_RCC_OscConfig+0x2a0>
 8002f6a:	e6c6      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002f6c:	f7ff fc1c 	bl	80027a8 <HAL_GetTick>
 8002f70:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	f57f ae95 	bpl.w	8002ca4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7ff fc15 	bl	80027a8 <HAL_GetTick>
 8002f7e:	1b40      	subs	r0, r0, r5
 8002f80:	2802      	cmp	r0, #2
 8002f82:	d9f6      	bls.n	8002f72 <HAL_RCC_OscConfig+0x2fa>
 8002f84:	e6b9      	b.n	8002cfa <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	f43f aea2 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8002f8c:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	6a2b      	ldr	r3, [r5, #32]
 8002f90:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f47f ae9b 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x58>
 8002f9a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f9c:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa0:	1ac0      	subs	r0, r0, r3
 8002fa2:	bf18      	it	ne
 8002fa4:	2001      	movne	r0, #1
 8002fa6:	e6a9      	b.n	8002cfc <HAL_RCC_OscConfig+0x84>
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	42420000 	.word	0x42420000

08002fb0 <HAL_RCC_GetSysClockFreq>:
{
 8002fb0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb2:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002fb4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fb6:	ac02      	add	r4, sp, #8
 8002fb8:	f103 0510 	add.w	r5, r3, #16
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	c203      	stmia	r2!, {r0, r1}
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	4614      	mov	r4, r2
 8002fca:	d1f7      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fcc:	f240 2301 	movw	r3, #513	@ 0x201
  tmpreg = RCC->CFGR;
 8002fd0:	4911      	ldr	r1, [pc, #68]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fd2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002fd6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd8:	f003 020c 	and.w	r2, r3, #12
 8002fdc:	2a08      	cmp	r2, #8
 8002fde:	d117      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002fe4:	3218      	adds	r2, #24
 8002fe6:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fe8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fea:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fee:	d50c      	bpl.n	800300a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ff0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ff4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ff8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	446b      	add	r3, sp
 8002ffe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003002:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003006:	b007      	add	sp, #28
 8003008:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x70>)
 800300c:	4358      	muls	r0, r3
 800300e:	e7fa      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003010:	4802      	ldr	r0, [pc, #8]	@ (800301c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003012:	e7f8      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x56>
 8003014:	0800486b 	.word	0x0800486b
 8003018:	40021000 	.word	0x40021000
 800301c:	007a1200 	.word	0x007a1200
 8003020:	003d0900 	.word	0x003d0900

08003024 <HAL_RCC_ClockConfig>:
{
 8003024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003028:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800302a:	4604      	mov	r4, r0
 800302c:	b910      	cbnz	r0, 8003034 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800302e:	2001      	movs	r0, #1
}
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4a44      	ldr	r2, [pc, #272]	@ (8003148 <HAL_RCC_ClockConfig+0x124>)
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	428b      	cmp	r3, r1
 800303e:	d328      	bcc.n	8003092 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	6821      	ldr	r1, [r4, #0]
 8003042:	078e      	lsls	r6, r1, #30
 8003044:	d430      	bmi.n	80030a8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	07ca      	lsls	r2, r1, #31
 8003048:	d443      	bmi.n	80030d2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304a:	4a3f      	ldr	r2, [pc, #252]	@ (8003148 <HAL_RCC_ClockConfig+0x124>)
 800304c:	6813      	ldr	r3, [r2, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	42ab      	cmp	r3, r5
 8003054:	d865      	bhi.n	8003122 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	4d3c      	ldr	r5, [pc, #240]	@ (800314c <HAL_RCC_ClockConfig+0x128>)
 800305a:	f012 0f04 	tst.w	r2, #4
 800305e:	d16c      	bne.n	800313a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	0713      	lsls	r3, r2, #28
 8003062:	d506      	bpl.n	8003072 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003064:	686b      	ldr	r3, [r5, #4]
 8003066:	6922      	ldr	r2, [r4, #16]
 8003068:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800306c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003070:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003072:	f7ff ff9d 	bl	8002fb0 <HAL_RCC_GetSysClockFreq>
 8003076:	686b      	ldr	r3, [r5, #4]
 8003078:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <HAL_RCC_ClockConfig+0x12c>)
 800307a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	40d8      	lsrs	r0, r3
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_ClockConfig+0x130>)
 8003084:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003086:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_ClockConfig+0x134>)
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f7ff fb4b 	bl	8002724 <HAL_InitTick>
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	e7ce      	b.n	8003030 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	430b      	orrs	r3, r1
 800309a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d1c3      	bne.n	800302e <HAL_RCC_ClockConfig+0xa>
 80030a6:	e7cb      	b.n	8003040 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	4b28      	ldr	r3, [pc, #160]	@ (800314c <HAL_RCC_ClockConfig+0x128>)
 80030aa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ae:	bf1e      	ittt	ne
 80030b0:	685a      	ldrne	r2, [r3, #4]
 80030b2:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80030b6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ba:	bf42      	ittt	mi
 80030bc:	685a      	ldrmi	r2, [r3, #4]
 80030be:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80030c2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68a0      	ldr	r0, [r4, #8]
 80030c8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80030cc:	4302      	orrs	r2, r0
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e7b9      	b.n	8003046 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	4e1d      	ldr	r6, [pc, #116]	@ (800314c <HAL_RCC_ClockConfig+0x128>)
 80030d6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030dc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	d0a5      	beq.n	800302e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e8:	f023 0303 	bic.w	r3, r3, #3
 80030ec:	4313      	orrs	r3, r2
 80030ee:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80030f0:	f7ff fb5a 	bl	80027a8 <HAL_GetTick>
 80030f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	6873      	ldr	r3, [r6, #4]
 80030f8:	6862      	ldr	r2, [r4, #4]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003102:	d0a2      	beq.n	800304a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7ff fb50 	bl	80027a8 <HAL_GetTick>
 8003108:	1bc0      	subs	r0, r0, r7
 800310a:	4540      	cmp	r0, r8
 800310c:	d9f3      	bls.n	80030f6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800310e:	2003      	movs	r0, #3
 8003110:	e78e      	b.n	8003030 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003112:	2a02      	cmp	r2, #2
 8003114:	d102      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800311a:	e7e1      	b.n	80030e0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	f013 0f02 	tst.w	r3, #2
 8003120:	e7de      	b.n	80030e0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	6813      	ldr	r3, [r2, #0]
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	432b      	orrs	r3, r5
 800312a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312c:	6813      	ldr	r3, [r2, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	42ab      	cmp	r3, r5
 8003134:	f47f af7b 	bne.w	800302e <HAL_RCC_ClockConfig+0xa>
 8003138:	e78d      	b.n	8003056 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313a:	686b      	ldr	r3, [r5, #4]
 800313c:	68e1      	ldr	r1, [r4, #12]
 800313e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003142:	430b      	orrs	r3, r1
 8003144:	606b      	str	r3, [r5, #4]
 8003146:	e78b      	b.n	8003060 <HAL_RCC_ClockConfig+0x3c>
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	080048dc 	.word	0x080048dc
 8003154:	2000014c 	.word	0x2000014c
 8003158:	20000154 	.word	0x20000154

0800315c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	4604      	mov	r4, r0
 8003160:	460e      	mov	r6, r1
 8003162:	4615      	mov	r5, r2
 8003164:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	6893      	ldr	r3, [r2, #8]
 800316a:	ea36 0303 	bics.w	r3, r6, r3
 800316e:	d001      	beq.n	8003174 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003170:	2000      	movs	r0, #0
 8003172:	e02d      	b.n	80031d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8003174:	1c6b      	adds	r3, r5, #1
 8003176:	d0f7      	beq.n	8003168 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003178:	f7ff fb16 	bl	80027a8 <HAL_GetTick>
 800317c:	1bc0      	subs	r0, r0, r7
 800317e:	4285      	cmp	r5, r0
 8003180:	d8f1      	bhi.n	8003166 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800318a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318c:	6862      	ldr	r2, [r4, #4]
 800318e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003192:	d10a      	bne.n	80031aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4e>
 8003194:	68a2      	ldr	r2, [r4, #8]
 8003196:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800319a:	d002      	beq.n	80031a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319c:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80031a0:	d103      	bne.n	80031aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80031ac:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80031b0:	d107      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          SPI_RESET_CRC(hspi);
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031c8:	2300      	movs	r3, #0
 80031ca:	2003      	movs	r0, #3
 80031cc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031d2:	b538      	push	{r3, r4, r5, lr}
 80031d4:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d6:	6842      	ldr	r2, [r0, #4]
{
 80031d8:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031da:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80031de:	d116      	bne.n	800320e <SPI_EndRxTransaction+0x3c>
 80031e0:	6882      	ldr	r2, [r0, #8]
 80031e2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80031e6:	d002      	beq.n	80031ee <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80031ec:	d10f      	bne.n	800320e <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031ee:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80031f0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 80031f4:	6828      	ldr	r0, [r5, #0]
 80031f6:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80031fa:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80031fc:	d107      	bne.n	800320e <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031fe:	460a      	mov	r2, r1
 8003200:	2101      	movs	r1, #1
 8003202:	4620      	mov	r0, r4
 8003204:	f7ff ffaa 	bl	800315c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003208:	b920      	cbnz	r0, 8003214 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800320a:	2000      	movs	r0, #0
}
 800320c:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	460a      	mov	r2, r1
 8003210:	2180      	movs	r1, #128	@ 0x80
 8003212:	e7f6      	b.n	8003202 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003214:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003216:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003218:	f043 0320 	orr.w	r3, r3, #32
 800321c:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800321e:	e7f5      	b.n	800320c <SPI_EndRxTransaction+0x3a>

08003220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b510      	push	{r4, lr}
 8003222:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	460a      	mov	r2, r1
 8003226:	2180      	movs	r1, #128	@ 0x80
{
 8003228:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800322a:	f7ff ff97 	bl	800315c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800322e:	b120      	cbz	r0, 800323a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8003230:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003232:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003234:	f043 0320 	orr.w	r3, r3, #32
 8003238:	6563      	str	r3, [r4, #84]	@ 0x54
  }
  return HAL_OK;
}
 800323a:	bd10      	pop	{r4, pc}

0800323c <HAL_SPI_Init>:
{
 800323c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800323e:	4604      	mov	r4, r0
 8003240:	2800      	cmp	r0, #0
 8003242:	d034      	beq.n	80032ae <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	6283      	str	r3, [r0, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003248:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800324c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003250:	b91b      	cbnz	r3, 800325a <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8003252:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003256:	f7ff f9b5 	bl	80025c4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800325a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800325c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800325e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003262:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003264:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800326a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800326c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8003270:	4303      	orrs	r3, r0
 8003272:	68e0      	ldr	r0, [r4, #12]
 8003274:	4303      	orrs	r3, r0
 8003276:	6920      	ldr	r0, [r4, #16]
 8003278:	4303      	orrs	r3, r0
 800327a:	6960      	ldr	r0, [r4, #20]
 800327c:	4303      	orrs	r3, r0
 800327e:	69e0      	ldr	r0, [r4, #28]
 8003280:	4303      	orrs	r3, r0
 8003282:	6a20      	ldr	r0, [r4, #32]
 8003284:	4303      	orrs	r3, r0
 8003286:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003288:	4303      	orrs	r3, r0
 800328a:	f401 7000 	and.w	r0, r1, #512	@ 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800328e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003290:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003292:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003296:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003298:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800329a:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800329c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800329e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032a2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80032a4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a6:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032a8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80032ac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
 80032b0:	e7fc      	b.n	80032ac <HAL_SPI_Init+0x70>

080032b2 <HAL_SPI_Transmit>:
{
 80032b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80032b6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80032b8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80032bc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80032be:	2b01      	cmp	r3, #1
{
 80032c0:	460d      	mov	r5, r1
 80032c2:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80032c4:	f000 8098 	beq.w	80033f8 <HAL_SPI_Transmit+0x146>
 80032c8:	2301      	movs	r3, #1
 80032ca:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80032ce:	f7ff fa6b 	bl	80027a8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80032d2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 80032d6:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80032d8:	2b01      	cmp	r3, #1
 80032da:	b2d8      	uxtb	r0, r3
 80032dc:	f040 808a 	bne.w	80033f4 <HAL_SPI_Transmit+0x142>
  if ((pData == NULL) || (Size == 0U))
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d05b      	beq.n	800339c <HAL_SPI_Transmit+0xea>
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	d059      	beq.n	800339c <HAL_SPI_Transmit+0xea>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032e8:	2303      	movs	r3, #3
 80032ea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f0:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80032f4:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80032f8:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032fa:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 80032fc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = 0U;
 80032fe:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    SPI_1LINE_TX(hspi);
 8003300:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003302:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    SPI_1LINE_TX(hspi);
 8003306:	bf08      	it	eq
 8003308:	681a      	ldreq	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800330a:	6325      	str	r5, [r4, #48]	@ 0x30
    SPI_1LINE_TX(hspi);
 800330c:	bf08      	it	eq
 800330e:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  hspi->TxXferSize  = Size;
 8003312:	86a7      	strh	r7, [r4, #52]	@ 0x34
    SPI_1LINE_TX(hspi);
 8003314:	bf08      	it	eq
 8003316:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003318:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800331a:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800331e:	bf5e      	ittt	pl
 8003320:	681a      	ldrpl	r2, [r3, #0]
 8003322:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8003326:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003328:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800332c:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800332e:	d13e      	bne.n	80033ae <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003330:	b10a      	cbz	r2, 8003336 <HAL_SPI_Transmit+0x84>
 8003332:	2f01      	cmp	r7, #1
 8003334:	d107      	bne.n	8003346 <HAL_SPI_Transmit+0x94>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003336:	f835 2b02 	ldrh.w	r2, [r5], #2
 800333a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800333e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003340:	3b01      	subs	r3, #1
 8003342:	b29b      	uxth	r3, r3
 8003344:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003346:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003348:	b29b      	uxth	r3, r3
 800334a:	b9a3      	cbnz	r3, 8003376 <HAL_SPI_Transmit+0xc4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800334c:	4642      	mov	r2, r8
 800334e:	4631      	mov	r1, r6
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff ff65 	bl	8003220 <SPI_EndRxTxTransaction>
 8003356:	2800      	cmp	r0, #0
 8003358:	d149      	bne.n	80033ee <HAL_SPI_Transmit+0x13c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800335a:	68a3      	ldr	r3, [r4, #8]
 800335c:	b933      	cbnz	r3, 800336c <HAL_SPI_Transmit+0xba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	9201      	str	r2, [sp, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800336c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800336e:	3800      	subs	r0, #0
 8003370:	bf18      	it	ne
 8003372:	2001      	movne	r0, #1
error:
 8003374:	e012      	b.n	800339c <HAL_SPI_Transmit+0xea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	6893      	ldr	r3, [r2, #8]
 800337a:	0798      	lsls	r0, r3, #30
 800337c:	d505      	bpl.n	800338a <HAL_SPI_Transmit+0xd8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003380:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003384:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003386:	6323      	str	r3, [r4, #48]	@ 0x30
 8003388:	e7d9      	b.n	800333e <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338a:	f7ff fa0d 	bl	80027a8 <HAL_GetTick>
 800338e:	eba0 0008 	sub.w	r0, r0, r8
 8003392:	42b0      	cmp	r0, r6
 8003394:	d3d7      	bcc.n	8003346 <HAL_SPI_Transmit+0x94>
 8003396:	1c71      	adds	r1, r6, #1
 8003398:	d0d5      	beq.n	8003346 <HAL_SPI_Transmit+0x94>
          errorcode = HAL_TIMEOUT;
 800339a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800339c:	2301      	movs	r3, #1
 800339e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80033a2:	2300      	movs	r3, #0
 80033a4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80033a8:	b002      	add	sp, #8
 80033aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ae:	b10a      	cbz	r2, 80033b4 <HAL_SPI_Transmit+0x102>
 80033b0:	2f01      	cmp	r7, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_SPI_Transmit+0x114>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b4:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80033ba:	3301      	adds	r3, #1
 80033bc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80033be:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80033c6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0be      	beq.n	800334c <HAL_SPI_Transmit+0x9a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	0792      	lsls	r2, r2, #30
 80033d4:	d502      	bpl.n	80033dc <HAL_SPI_Transmit+0x12a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033d6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	e7ec      	b.n	80033b6 <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033dc:	f7ff f9e4 	bl	80027a8 <HAL_GetTick>
 80033e0:	eba0 0008 	sub.w	r0, r0, r8
 80033e4:	42b0      	cmp	r0, r6
 80033e6:	d3ee      	bcc.n	80033c6 <HAL_SPI_Transmit+0x114>
 80033e8:	1c73      	adds	r3, r6, #1
 80033ea:	d0ec      	beq.n	80033c6 <HAL_SPI_Transmit+0x114>
 80033ec:	e7d5      	b.n	800339a <HAL_SPI_Transmit+0xe8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ee:	2320      	movs	r3, #32
 80033f0:	6563      	str	r3, [r4, #84]	@ 0x54
 80033f2:	e7b2      	b.n	800335a <HAL_SPI_Transmit+0xa8>
    errorcode = HAL_BUSY;
 80033f4:	2002      	movs	r0, #2
 80033f6:	e7d1      	b.n	800339c <HAL_SPI_Transmit+0xea>
  __HAL_LOCK(hspi);
 80033f8:	2002      	movs	r0, #2
 80033fa:	e7d5      	b.n	80033a8 <HAL_SPI_Transmit+0xf6>

080033fc <HAL_SPI_TransmitReceive>:
{
 80033fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003400:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003402:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8003406:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003408:	2b01      	cmp	r3, #1
{
 800340a:	460d      	mov	r5, r1
 800340c:	4691      	mov	r9, r2
 800340e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8003412:	f000 80e1 	beq.w	80035d8 <HAL_SPI_TransmitReceive+0x1dc>
 8003416:	2301      	movs	r3, #1
 8003418:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800341c:	f7ff f9c4 	bl	80027a8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003420:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8003424:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003426:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8003428:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800342a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800342c:	d00a      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x48>
 800342e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003432:	f040 80cf 	bne.w	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003436:	68a3      	ldr	r3, [r4, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 80cb 	bne.w	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
 800343e:	2904      	cmp	r1, #4
 8003440:	f040 80c8 	bne.w	80035d4 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003444:	b115      	cbz	r5, 800344c <HAL_SPI_TransmitReceive+0x50>
 8003446:	f1b9 0f00 	cmp.w	r9, #0
 800344a:	d109      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800344c:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800344e:	2301      	movs	r3, #1
 8003450:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003454:	2300      	movs	r3, #0
 8003456:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800345a:	b003      	add	sp, #12
 800345c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003460:	2e00      	cmp	r6, #0
 8003462:	d0f3      	beq.n	800344c <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003464:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003468:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800346c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800346e:	bf1c      	itt	ne
 8003470:	2305      	movne	r3, #5
 8003472:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 800347a:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800347e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003480:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8003482:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003484:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003486:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003488:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800348a:	bf58      	it	pl
 800348c:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800348e:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8003490:	bf58      	it	pl
 8003492:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8003496:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8003498:	bf58      	it	pl
 800349a:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800349c:	68e1      	ldr	r1, [r4, #12]
 800349e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80034a2:	d148      	bne.n	8003536 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a4:	b10a      	cbz	r2, 80034aa <HAL_SPI_TransmitReceive+0xae>
 80034a6:	2e01      	cmp	r6, #1
 80034a8:	d107      	bne.n	80034ba <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034aa:	f835 2b02 	ldrh.w	r2, [r5], #2
 80034ae:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80034b0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b2:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80034ba:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034bc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80034be:	b29b      	uxth	r3, r3
 80034c0:	b963      	cbnz	r3, 80034dc <HAL_SPI_TransmitReceive+0xe0>
 80034c2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b94b      	cbnz	r3, 80034dc <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034c8:	463a      	mov	r2, r7
 80034ca:	4641      	mov	r1, r8
 80034cc:	4620      	mov	r0, r4
 80034ce:	f7ff fea7 	bl	8003220 <SPI_EndRxTxTransaction>
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d072      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034d6:	2320      	movs	r3, #32
 80034d8:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 80034da:	e7b7      	b.n	800344c <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034dc:	6821      	ldr	r1, [r4, #0]
 80034de:	688b      	ldr	r3, [r1, #8]
 80034e0:	079a      	lsls	r2, r3, #30
 80034e2:	d50d      	bpl.n	8003500 <HAL_SPI_TransmitReceive+0x104>
 80034e4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b153      	cbz	r3, 8003500 <HAL_SPI_TransmitReceive+0x104>
 80034ea:	b145      	cbz	r5, 80034fe <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80034ee:	f833 2b02 	ldrh.w	r2, [r3], #2
 80034f2:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80034f6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 80034fe:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003500:	688a      	ldr	r2, [r1, #8]
 8003502:	f012 0201 	ands.w	r2, r2, #1
 8003506:	d00c      	beq.n	8003522 <HAL_SPI_TransmitReceive+0x126>
 8003508:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	b14b      	cbz	r3, 8003522 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 800350e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003510:	68c9      	ldr	r1, [r1, #12]
 8003512:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003514:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003518:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800351a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800351c:	3b01      	subs	r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003522:	f7ff f941 	bl	80027a8 <HAL_GetTick>
 8003526:	1bc0      	subs	r0, r0, r7
 8003528:	4540      	cmp	r0, r8
 800352a:	d3c7      	bcc.n	80034bc <HAL_SPI_TransmitReceive+0xc0>
 800352c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8003530:	d0c4      	beq.n	80034bc <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8003532:	2003      	movs	r0, #3
 8003534:	e78b      	b.n	800344e <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003536:	b10a      	cbz	r2, 800353c <HAL_SPI_TransmitReceive+0x140>
 8003538:	2e01      	cmp	r6, #1
 800353a:	d108      	bne.n	800354e <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800353c:	782a      	ldrb	r2, [r5, #0]
 800353e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003542:	3301      	adds	r3, #1
 8003544:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003546:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003548:	3b01      	subs	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800354e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003550:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003552:	b29b      	uxth	r3, r3
 8003554:	b91b      	cbnz	r3, 800355e <HAL_SPI_TransmitReceive+0x162>
 8003556:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0b4      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	6893      	ldr	r3, [r2, #8]
 8003562:	079b      	lsls	r3, r3, #30
 8003564:	d50e      	bpl.n	8003584 <HAL_SPI_TransmitReceive+0x188>
 8003566:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003568:	b29b      	uxth	r3, r3
 800356a:	b15b      	cbz	r3, 8003584 <HAL_SPI_TransmitReceive+0x188>
 800356c:	b14d      	cbz	r5, 8003582 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800356e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003574:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003576:	3301      	adds	r3, #1
 8003578:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800357a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003582:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	6891      	ldr	r1, [r2, #8]
 8003588:	f011 0101 	ands.w	r1, r1, #1
 800358c:	d00d      	beq.n	80035aa <HAL_SPI_TransmitReceive+0x1ae>
 800358e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	b153      	cbz	r3, 80035aa <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8003594:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003596:	68d2      	ldr	r2, [r2, #12]
 8003598:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800359a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800359c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800359e:	3301      	adds	r3, #1
 80035a0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80035a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035aa:	f7ff f8fd 	bl	80027a8 <HAL_GetTick>
 80035ae:	1bc0      	subs	r0, r0, r7
 80035b0:	4540      	cmp	r0, r8
 80035b2:	d3cd      	bcc.n	8003550 <HAL_SPI_TransmitReceive+0x154>
 80035b4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80035b8:	d0ca      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x154>
 80035ba:	e7ba      	b.n	8003532 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035bc:	68a3      	ldr	r3, [r4, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f47f af45 	bne.w	800344e <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	9001      	str	r0, [sp, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	9201      	str	r2, [sp, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	9b01      	ldr	r3, [sp, #4]
 80035d2:	e73c      	b.n	800344e <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 80035d4:	2002      	movs	r0, #2
 80035d6:	e73a      	b.n	800344e <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80035d8:	2002      	movs	r0, #2
 80035da:	e73e      	b.n	800345a <HAL_SPI_TransmitReceive+0x5e>

080035dc <HAL_SPI_Receive>:
{
 80035dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035e0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035e2:	6843      	ldr	r3, [r0, #4]
{
 80035e4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80035ea:	4689      	mov	r9, r1
 80035ec:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035ee:	d10c      	bne.n	800360a <HAL_SPI_Receive+0x2e>
 80035f0:	6883      	ldr	r3, [r0, #8]
 80035f2:	b953      	cbnz	r3, 800360a <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035f4:	2304      	movs	r3, #4
 80035f6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035fa:	4613      	mov	r3, r2
 80035fc:	9500      	str	r5, [sp, #0]
 80035fe:	460a      	mov	r2, r1
 8003600:	f7ff fefc 	bl	80033fc <HAL_SPI_TransmitReceive>
}
 8003604:	b003      	add	sp, #12
 8003606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800360a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 800360e:	2b01      	cmp	r3, #1
 8003610:	d07d      	beq.n	800370e <HAL_SPI_Receive+0x132>
 8003612:	2301      	movs	r3, #1
 8003614:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8003618:	f7ff f8c6 	bl	80027a8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800361c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8003620:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	2b01      	cmp	r3, #1
 8003624:	b2d8      	uxtb	r0, r3
 8003626:	d170      	bne.n	800370a <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 8003628:	f1b9 0f00 	cmp.w	r9, #0
 800362c:	d05a      	beq.n	80036e4 <HAL_SPI_Receive+0x108>
 800362e:	2f00      	cmp	r7, #0
 8003630:	d058      	beq.n	80036e4 <HAL_SPI_Receive+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003632:	2304      	movs	r3, #4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	2600      	movs	r6, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003636:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003638:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    SPI_1LINE_RX(hspi);
 800363c:	6823      	ldr	r3, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363e:	6566      	str	r6, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003640:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->RxXferCount = Size;
 8003644:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003646:	86e6      	strh	r6, [r4, #54]	@ 0x36
    SPI_1LINE_RX(hspi);
 8003648:	bf08      	it	eq
 800364a:	681a      	ldreq	r2, [r3, #0]
  hspi->TxISR       = NULL;
 800364c:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
    SPI_1LINE_RX(hspi);
 8003650:	bf08      	it	eq
 8003652:	f422 4280 	biceq.w	r2, r2, #16384	@ 0x4000
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003656:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003658:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800365a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800365e:	87a7      	strh	r7, [r4, #60]	@ 0x3c
    SPI_1LINE_RX(hspi);
 8003660:	bf08      	it	eq
 8003662:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003668:	bf5e      	ittt	pl
 800366a:	681a      	ldrpl	r2, [r3, #0]
 800366c:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8003670:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003672:	68e3      	ldr	r3, [r4, #12]
 8003674:	b1f3      	cbz	r3, 80036b4 <HAL_SPI_Receive+0xd8>
    while (hspi->RxXferCount > 0U)
 8003676:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	b1fb      	cbz	r3, 80036bc <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	07d2      	lsls	r2, r2, #31
 8003682:	d536      	bpl.n	80036f2 <HAL_SPI_Receive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003688:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800368c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800368e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003690:	3b01      	subs	r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8003696:	e7ee      	b.n	8003676 <HAL_SPI_Receive+0x9a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	07d0      	lsls	r0, r2, #31
 800369e:	d518      	bpl.n	80036d2 <HAL_SPI_Receive+0xf6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036a0:	7b1b      	ldrb	r3, [r3, #12]
 80036a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036a4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80036a8:	3301      	adds	r3, #1
 80036aa:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80036ac:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 80036b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ed      	bne.n	8003698 <HAL_SPI_Receive+0xbc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036bc:	4642      	mov	r2, r8
 80036be:	4629      	mov	r1, r5
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff fd86 	bl	80031d2 <SPI_EndRxTransaction>
 80036c6:	b9e8      	cbnz	r0, 8003704 <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80036ca:	3800      	subs	r0, #0
 80036cc:	bf18      	it	ne
 80036ce:	2001      	movne	r0, #1
error :
 80036d0:	e008      	b.n	80036e4 <HAL_SPI_Receive+0x108>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d2:	f7ff f869 	bl	80027a8 <HAL_GetTick>
 80036d6:	eba0 0008 	sub.w	r0, r0, r8
 80036da:	42a8      	cmp	r0, r5
 80036dc:	d3ea      	bcc.n	80036b4 <HAL_SPI_Receive+0xd8>
 80036de:	1c69      	adds	r1, r5, #1
 80036e0:	d0e8      	beq.n	80036b4 <HAL_SPI_Receive+0xd8>
          errorcode = HAL_TIMEOUT;
 80036e2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80036ea:	2300      	movs	r3, #0
 80036ec:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 80036f0:	e788      	b.n	8003604 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036f2:	f7ff f859 	bl	80027a8 <HAL_GetTick>
 80036f6:	eba0 0008 	sub.w	r0, r0, r8
 80036fa:	42a8      	cmp	r0, r5
 80036fc:	d3bb      	bcc.n	8003676 <HAL_SPI_Receive+0x9a>
 80036fe:	1c6b      	adds	r3, r5, #1
 8003700:	d0b9      	beq.n	8003676 <HAL_SPI_Receive+0x9a>
 8003702:	e7ee      	b.n	80036e2 <HAL_SPI_Receive+0x106>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	2320      	movs	r3, #32
 8003706:	6563      	str	r3, [r4, #84]	@ 0x54
 8003708:	e7de      	b.n	80036c8 <HAL_SPI_Receive+0xec>
    errorcode = HAL_BUSY;
 800370a:	2002      	movs	r0, #2
 800370c:	e7ea      	b.n	80036e4 <HAL_SPI_Receive+0x108>
  __HAL_LOCK(hspi);
 800370e:	2002      	movs	r0, #2
 8003710:	e778      	b.n	8003604 <HAL_SPI_Receive+0x28>
	...

08003714 <sniprintf>:
 8003714:	b40c      	push	{r2, r3}
 8003716:	b530      	push	{r4, r5, lr}
 8003718:	4b18      	ldr	r3, [pc, #96]	@ (800377c <sniprintf+0x68>)
 800371a:	1e0c      	subs	r4, r1, #0
 800371c:	681d      	ldr	r5, [r3, #0]
 800371e:	b09d      	sub	sp, #116	@ 0x74
 8003720:	da08      	bge.n	8003734 <sniprintf+0x20>
 8003722:	238b      	movs	r3, #139	@ 0x8b
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	b01d      	add	sp, #116	@ 0x74
 800372c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003730:	b002      	add	sp, #8
 8003732:	4770      	bx	lr
 8003734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003742:	bf0c      	ite	eq
 8003744:	4623      	moveq	r3, r4
 8003746:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	9307      	str	r3, [sp, #28]
 800374e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003752:	9002      	str	r0, [sp, #8]
 8003754:	9006      	str	r0, [sp, #24]
 8003756:	f8ad 3016 	strh.w	r3, [sp, #22]
 800375a:	4628      	mov	r0, r5
 800375c:	ab21      	add	r3, sp, #132	@ 0x84
 800375e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003760:	a902      	add	r1, sp, #8
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	f000 fa7e 	bl	8003c64 <_svfiprintf_r>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	bfbc      	itt	lt
 800376c:	238b      	movlt	r3, #139	@ 0x8b
 800376e:	602b      	strlt	r3, [r5, #0]
 8003770:	2c00      	cmp	r4, #0
 8003772:	d0da      	beq.n	800372a <sniprintf+0x16>
 8003774:	2200      	movs	r2, #0
 8003776:	9b02      	ldr	r3, [sp, #8]
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e7d6      	b.n	800372a <sniprintf+0x16>
 800377c:	20000158 	.word	0x20000158

08003780 <siprintf>:
 8003780:	b40e      	push	{r1, r2, r3}
 8003782:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003786:	b510      	push	{r4, lr}
 8003788:	2400      	movs	r4, #0
 800378a:	b09d      	sub	sp, #116	@ 0x74
 800378c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800378e:	9002      	str	r0, [sp, #8]
 8003790:	9006      	str	r0, [sp, #24]
 8003792:	9107      	str	r1, [sp, #28]
 8003794:	9104      	str	r1, [sp, #16]
 8003796:	4809      	ldr	r0, [pc, #36]	@ (80037bc <siprintf+0x3c>)
 8003798:	4909      	ldr	r1, [pc, #36]	@ (80037c0 <siprintf+0x40>)
 800379a:	f853 2b04 	ldr.w	r2, [r3], #4
 800379e:	9105      	str	r1, [sp, #20]
 80037a0:	6800      	ldr	r0, [r0, #0]
 80037a2:	a902      	add	r1, sp, #8
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80037a8:	f000 fa5c 	bl	8003c64 <_svfiprintf_r>
 80037ac:	9b02      	ldr	r3, [sp, #8]
 80037ae:	701c      	strb	r4, [r3, #0]
 80037b0:	b01d      	add	sp, #116	@ 0x74
 80037b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b6:	b003      	add	sp, #12
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000158 	.word	0x20000158
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <_vsniprintf_r>:
 80037c4:	b530      	push	{r4, r5, lr}
 80037c6:	4614      	mov	r4, r2
 80037c8:	2c00      	cmp	r4, #0
 80037ca:	4605      	mov	r5, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	b09b      	sub	sp, #108	@ 0x6c
 80037d0:	da05      	bge.n	80037de <_vsniprintf_r+0x1a>
 80037d2:	238b      	movs	r3, #139	@ 0x8b
 80037d4:	6003      	str	r3, [r0, #0]
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037da:	b01b      	add	sp, #108	@ 0x6c
 80037dc:	bd30      	pop	{r4, r5, pc}
 80037de:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	9319      	str	r3, [sp, #100]	@ 0x64
 80037ec:	bf0c      	ite	eq
 80037ee:	4623      	moveq	r3, r4
 80037f0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80037f4:	9302      	str	r3, [sp, #8]
 80037f6:	9305      	str	r3, [sp, #20]
 80037f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fc:	9100      	str	r1, [sp, #0]
 80037fe:	9104      	str	r1, [sp, #16]
 8003800:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003804:	4669      	mov	r1, sp
 8003806:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003808:	f000 fa2c 	bl	8003c64 <_svfiprintf_r>
 800380c:	1c43      	adds	r3, r0, #1
 800380e:	bfbc      	itt	lt
 8003810:	238b      	movlt	r3, #139	@ 0x8b
 8003812:	602b      	strlt	r3, [r5, #0]
 8003814:	2c00      	cmp	r4, #0
 8003816:	d0e0      	beq.n	80037da <_vsniprintf_r+0x16>
 8003818:	2200      	movs	r2, #0
 800381a:	9b00      	ldr	r3, [sp, #0]
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e7dc      	b.n	80037da <_vsniprintf_r+0x16>

08003820 <vsniprintf>:
 8003820:	b507      	push	{r0, r1, r2, lr}
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	460a      	mov	r2, r1
 8003828:	4601      	mov	r1, r0
 800382a:	4803      	ldr	r0, [pc, #12]	@ (8003838 <vsniprintf+0x18>)
 800382c:	6800      	ldr	r0, [r0, #0]
 800382e:	f7ff ffc9 	bl	80037c4 <_vsniprintf_r>
 8003832:	b003      	add	sp, #12
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
 8003838:	20000158 	.word	0x20000158

0800383c <memset>:
 800383c:	4603      	mov	r3, r0
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <strchr>:
 800384c:	4603      	mov	r3, r0
 800384e:	b2c9      	uxtb	r1, r1
 8003850:	4618      	mov	r0, r3
 8003852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003856:	b112      	cbz	r2, 800385e <strchr+0x12>
 8003858:	428a      	cmp	r2, r1
 800385a:	d1f9      	bne.n	8003850 <strchr+0x4>
 800385c:	4770      	bx	lr
 800385e:	2900      	cmp	r1, #0
 8003860:	bf18      	it	ne
 8003862:	2000      	movne	r0, #0
 8003864:	4770      	bx	lr
	...

08003868 <strdup>:
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <strdup+0xc>)
 800386a:	4601      	mov	r1, r0
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	f000 b803 	b.w	8003878 <_strdup_r>
 8003872:	bf00      	nop
 8003874:	20000158 	.word	0x20000158

08003878 <_strdup_r>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4604      	mov	r4, r0
 800387c:	4608      	mov	r0, r1
 800387e:	460d      	mov	r5, r1
 8003880:	f7fc fc64 	bl	800014c <strlen>
 8003884:	1c46      	adds	r6, r0, #1
 8003886:	4631      	mov	r1, r6
 8003888:	4620      	mov	r0, r4
 800388a:	f000 f903 	bl	8003a94 <_malloc_r>
 800388e:	4604      	mov	r4, r0
 8003890:	b118      	cbz	r0, 800389a <_strdup_r+0x22>
 8003892:	4632      	mov	r2, r6
 8003894:	4629      	mov	r1, r5
 8003896:	f000 f885 	bl	80039a4 <memcpy>
 800389a:	4620      	mov	r0, r4
 800389c:	bd70      	pop	{r4, r5, r6, pc}

0800389e <strncmp>:
 800389e:	b510      	push	{r4, lr}
 80038a0:	b16a      	cbz	r2, 80038be <strncmp+0x20>
 80038a2:	3901      	subs	r1, #1
 80038a4:	1884      	adds	r4, r0, r2
 80038a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d103      	bne.n	80038ba <strncmp+0x1c>
 80038b2:	42a0      	cmp	r0, r4
 80038b4:	d001      	beq.n	80038ba <strncmp+0x1c>
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d1f5      	bne.n	80038a6 <strncmp+0x8>
 80038ba:	1ad0      	subs	r0, r2, r3
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	4610      	mov	r0, r2
 80038c0:	e7fc      	b.n	80038bc <strncmp+0x1e>

080038c2 <strstr>:
 80038c2:	780a      	ldrb	r2, [r1, #0]
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	b96a      	cbnz	r2, 80038e4 <strstr+0x22>
 80038c8:	bd70      	pop	{r4, r5, r6, pc}
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d109      	bne.n	80038e2 <strstr+0x20>
 80038ce:	460c      	mov	r4, r1
 80038d0:	4605      	mov	r5, r0
 80038d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f6      	beq.n	80038c8 <strstr+0x6>
 80038da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80038de:	429e      	cmp	r6, r3
 80038e0:	d0f7      	beq.n	80038d2 <strstr+0x10>
 80038e2:	3001      	adds	r0, #1
 80038e4:	7803      	ldrb	r3, [r0, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ef      	bne.n	80038ca <strstr+0x8>
 80038ea:	4618      	mov	r0, r3
 80038ec:	e7ec      	b.n	80038c8 <strstr+0x6>
	...

080038f0 <time>:
 80038f0:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80038f2:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80038f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80038fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <time+0x34>)
 80038fc:	4604      	mov	r4, r0
 80038fe:	2200      	movs	r2, #0
 8003900:	4669      	mov	r1, sp
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	e9cd 6700 	strd	r6, r7, [sp]
 8003908:	f000 f80e 	bl	8003928 <_gettimeofday_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	da01      	bge.n	8003914 <time+0x24>
 8003910:	e9cd 6700 	strd	r6, r7, [sp]
 8003914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003918:	b10c      	cbz	r4, 800391e <time+0x2e>
 800391a:	e9c4 0100 	strd	r0, r1, [r4]
 800391e:	b004      	add	sp, #16
 8003920:	bdd0      	pop	{r4, r6, r7, pc}
 8003922:	bf00      	nop
 8003924:	20000158 	.word	0x20000158

08003928 <_gettimeofday_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	2300      	movs	r3, #0
 800392c:	4d06      	ldr	r5, [pc, #24]	@ (8003948 <_gettimeofday_r+0x20>)
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	4611      	mov	r1, r2
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	f000 fc8f 	bl	8004258 <_gettimeofday>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	d102      	bne.n	8003944 <_gettimeofday_r+0x1c>
 800393e:	682b      	ldr	r3, [r5, #0]
 8003940:	b103      	cbz	r3, 8003944 <_gettimeofday_r+0x1c>
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	bf00      	nop
 8003948:	20001298 	.word	0x20001298

0800394c <__errno>:
 800394c:	4b01      	ldr	r3, [pc, #4]	@ (8003954 <__errno+0x8>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000158 	.word	0x20000158

08003958 <__libc_init_array>:
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	2600      	movs	r6, #0
 800395c:	4d0c      	ldr	r5, [pc, #48]	@ (8003990 <__libc_init_array+0x38>)
 800395e:	4c0d      	ldr	r4, [pc, #52]	@ (8003994 <__libc_init_array+0x3c>)
 8003960:	1b64      	subs	r4, r4, r5
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	42a6      	cmp	r6, r4
 8003966:	d109      	bne.n	800397c <__libc_init_array+0x24>
 8003968:	f000 fc7e 	bl	8004268 <_init>
 800396c:	2600      	movs	r6, #0
 800396e:	4d0a      	ldr	r5, [pc, #40]	@ (8003998 <__libc_init_array+0x40>)
 8003970:	4c0a      	ldr	r4, [pc, #40]	@ (800399c <__libc_init_array+0x44>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	42a6      	cmp	r6, r4
 8003978:	d105      	bne.n	8003986 <__libc_init_array+0x2e>
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003980:	4798      	blx	r3
 8003982:	3601      	adds	r6, #1
 8003984:	e7ee      	b.n	8003964 <__libc_init_array+0xc>
 8003986:	f855 3b04 	ldr.w	r3, [r5], #4
 800398a:	4798      	blx	r3
 800398c:	3601      	adds	r6, #1
 800398e:	e7f2      	b.n	8003976 <__libc_init_array+0x1e>
 8003990:	080049f8 	.word	0x080049f8
 8003994:	080049f8 	.word	0x080049f8
 8003998:	080049f8 	.word	0x080049f8
 800399c:	080049fc 	.word	0x080049fc

080039a0 <__retarget_lock_acquire_recursive>:
 80039a0:	4770      	bx	lr

080039a2 <__retarget_lock_release_recursive>:
 80039a2:	4770      	bx	lr

080039a4 <memcpy>:
 80039a4:	440a      	add	r2, r1
 80039a6:	4291      	cmp	r1, r2
 80039a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80039ac:	d100      	bne.n	80039b0 <memcpy+0xc>
 80039ae:	4770      	bx	lr
 80039b0:	b510      	push	{r4, lr}
 80039b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039b6:	4291      	cmp	r1, r2
 80039b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039bc:	d1f9      	bne.n	80039b2 <memcpy+0xe>
 80039be:	bd10      	pop	{r4, pc}

080039c0 <_free_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d040      	beq.n	8003a4a <_free_r+0x8a>
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	18e4      	addlt	r4, r4, r3
 80039d4:	f000 f8de 	bl	8003b94 <__malloc_lock>
 80039d8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a4c <_free_r+0x8c>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	b933      	cbnz	r3, 80039ec <_free_r+0x2c>
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	6014      	str	r4, [r2, #0]
 80039e2:	4628      	mov	r0, r5
 80039e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e8:	f000 b8da 	b.w	8003ba0 <__malloc_unlock>
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	d908      	bls.n	8003a02 <_free_r+0x42>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf01      	itttt	eq
 80039f8:	6819      	ldreq	r1, [r3, #0]
 80039fa:	685b      	ldreq	r3, [r3, #4]
 80039fc:	1809      	addeq	r1, r1, r0
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	e7ed      	b.n	80039de <_free_r+0x1e>
 8003a02:	461a      	mov	r2, r3
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	b10b      	cbz	r3, 8003a0c <_free_r+0x4c>
 8003a08:	42a3      	cmp	r3, r4
 8003a0a:	d9fa      	bls.n	8003a02 <_free_r+0x42>
 8003a0c:	6811      	ldr	r1, [r2, #0]
 8003a0e:	1850      	adds	r0, r2, r1
 8003a10:	42a0      	cmp	r0, r4
 8003a12:	d10b      	bne.n	8003a2c <_free_r+0x6c>
 8003a14:	6820      	ldr	r0, [r4, #0]
 8003a16:	4401      	add	r1, r0
 8003a18:	1850      	adds	r0, r2, r1
 8003a1a:	4283      	cmp	r3, r0
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	d1e0      	bne.n	80039e2 <_free_r+0x22>
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4408      	add	r0, r1
 8003a26:	6010      	str	r0, [r2, #0]
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	e7da      	b.n	80039e2 <_free_r+0x22>
 8003a2c:	d902      	bls.n	8003a34 <_free_r+0x74>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	e7d6      	b.n	80039e2 <_free_r+0x22>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	1821      	adds	r1, r4, r0
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	bf01      	itttt	eq
 8003a3c:	6819      	ldreq	r1, [r3, #0]
 8003a3e:	685b      	ldreq	r3, [r3, #4]
 8003a40:	1809      	addeq	r1, r1, r0
 8003a42:	6021      	streq	r1, [r4, #0]
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	6054      	str	r4, [r2, #4]
 8003a48:	e7cb      	b.n	80039e2 <_free_r+0x22>
 8003a4a:	bd38      	pop	{r3, r4, r5, pc}
 8003a4c:	200012a4 	.word	0x200012a4

08003a50 <sbrk_aligned>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	4e0f      	ldr	r6, [pc, #60]	@ (8003a90 <sbrk_aligned+0x40>)
 8003a54:	460c      	mov	r4, r1
 8003a56:	6831      	ldr	r1, [r6, #0]
 8003a58:	4605      	mov	r5, r0
 8003a5a:	b911      	cbnz	r1, 8003a62 <sbrk_aligned+0x12>
 8003a5c:	f000 fba8 	bl	80041b0 <_sbrk_r>
 8003a60:	6030      	str	r0, [r6, #0]
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 fba3 	bl	80041b0 <_sbrk_r>
 8003a6a:	1c43      	adds	r3, r0, #1
 8003a6c:	d103      	bne.n	8003a76 <sbrk_aligned+0x26>
 8003a6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003a72:	4620      	mov	r0, r4
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
 8003a76:	1cc4      	adds	r4, r0, #3
 8003a78:	f024 0403 	bic.w	r4, r4, #3
 8003a7c:	42a0      	cmp	r0, r4
 8003a7e:	d0f8      	beq.n	8003a72 <sbrk_aligned+0x22>
 8003a80:	1a21      	subs	r1, r4, r0
 8003a82:	4628      	mov	r0, r5
 8003a84:	f000 fb94 	bl	80041b0 <_sbrk_r>
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d1f2      	bne.n	8003a72 <sbrk_aligned+0x22>
 8003a8c:	e7ef      	b.n	8003a6e <sbrk_aligned+0x1e>
 8003a8e:	bf00      	nop
 8003a90:	200012a0 	.word	0x200012a0

08003a94 <_malloc_r>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	1ccd      	adds	r5, r1, #3
 8003a9a:	f025 0503 	bic.w	r5, r5, #3
 8003a9e:	3508      	adds	r5, #8
 8003aa0:	2d0c      	cmp	r5, #12
 8003aa2:	bf38      	it	cc
 8003aa4:	250c      	movcc	r5, #12
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	db01      	blt.n	8003ab0 <_malloc_r+0x1c>
 8003aac:	42a9      	cmp	r1, r5
 8003aae:	d904      	bls.n	8003aba <_malloc_r+0x26>
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	6033      	str	r3, [r6, #0]
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b90 <_malloc_r+0xfc>
 8003abe:	f000 f869 	bl	8003b94 <__malloc_lock>
 8003ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac6:	461c      	mov	r4, r3
 8003ac8:	bb44      	cbnz	r4, 8003b1c <_malloc_r+0x88>
 8003aca:	4629      	mov	r1, r5
 8003acc:	4630      	mov	r0, r6
 8003ace:	f7ff ffbf 	bl	8003a50 <sbrk_aligned>
 8003ad2:	1c43      	adds	r3, r0, #1
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	d158      	bne.n	8003b8a <_malloc_r+0xf6>
 8003ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8003adc:	4627      	mov	r7, r4
 8003ade:	2f00      	cmp	r7, #0
 8003ae0:	d143      	bne.n	8003b6a <_malloc_r+0xd6>
 8003ae2:	2c00      	cmp	r4, #0
 8003ae4:	d04b      	beq.n	8003b7e <_malloc_r+0xea>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	4639      	mov	r1, r7
 8003aea:	4630      	mov	r0, r6
 8003aec:	eb04 0903 	add.w	r9, r4, r3
 8003af0:	f000 fb5e 	bl	80041b0 <_sbrk_r>
 8003af4:	4581      	cmp	r9, r0
 8003af6:	d142      	bne.n	8003b7e <_malloc_r+0xea>
 8003af8:	6821      	ldr	r1, [r4, #0]
 8003afa:	4630      	mov	r0, r6
 8003afc:	1a6d      	subs	r5, r5, r1
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7ff ffa6 	bl	8003a50 <sbrk_aligned>
 8003b04:	3001      	adds	r0, #1
 8003b06:	d03a      	beq.n	8003b7e <_malloc_r+0xea>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	442b      	add	r3, r5
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	bb62      	cbnz	r2, 8003b70 <_malloc_r+0xdc>
 8003b16:	f8c8 7000 	str.w	r7, [r8]
 8003b1a:	e00f      	b.n	8003b3c <_malloc_r+0xa8>
 8003b1c:	6822      	ldr	r2, [r4, #0]
 8003b1e:	1b52      	subs	r2, r2, r5
 8003b20:	d420      	bmi.n	8003b64 <_malloc_r+0xd0>
 8003b22:	2a0b      	cmp	r2, #11
 8003b24:	d917      	bls.n	8003b56 <_malloc_r+0xc2>
 8003b26:	1961      	adds	r1, r4, r5
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	6025      	str	r5, [r4, #0]
 8003b2c:	bf18      	it	ne
 8003b2e:	6059      	strne	r1, [r3, #4]
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	bf08      	it	eq
 8003b34:	f8c8 1000 	streq.w	r1, [r8]
 8003b38:	5162      	str	r2, [r4, r5]
 8003b3a:	604b      	str	r3, [r1, #4]
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 f82f 	bl	8003ba0 <__malloc_unlock>
 8003b42:	f104 000b 	add.w	r0, r4, #11
 8003b46:	1d23      	adds	r3, r4, #4
 8003b48:	f020 0007 	bic.w	r0, r0, #7
 8003b4c:	1ac2      	subs	r2, r0, r3
 8003b4e:	bf1c      	itt	ne
 8003b50:	1a1b      	subne	r3, r3, r0
 8003b52:	50a3      	strne	r3, [r4, r2]
 8003b54:	e7af      	b.n	8003ab6 <_malloc_r+0x22>
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	42a3      	cmp	r3, r4
 8003b5a:	bf0c      	ite	eq
 8003b5c:	f8c8 2000 	streq.w	r2, [r8]
 8003b60:	605a      	strne	r2, [r3, #4]
 8003b62:	e7eb      	b.n	8003b3c <_malloc_r+0xa8>
 8003b64:	4623      	mov	r3, r4
 8003b66:	6864      	ldr	r4, [r4, #4]
 8003b68:	e7ae      	b.n	8003ac8 <_malloc_r+0x34>
 8003b6a:	463c      	mov	r4, r7
 8003b6c:	687f      	ldr	r7, [r7, #4]
 8003b6e:	e7b6      	b.n	8003ade <_malloc_r+0x4a>
 8003b70:	461a      	mov	r2, r3
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	42a3      	cmp	r3, r4
 8003b76:	d1fb      	bne.n	8003b70 <_malloc_r+0xdc>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	6053      	str	r3, [r2, #4]
 8003b7c:	e7de      	b.n	8003b3c <_malloc_r+0xa8>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	4630      	mov	r0, r6
 8003b82:	6033      	str	r3, [r6, #0]
 8003b84:	f000 f80c 	bl	8003ba0 <__malloc_unlock>
 8003b88:	e794      	b.n	8003ab4 <_malloc_r+0x20>
 8003b8a:	6005      	str	r5, [r0, #0]
 8003b8c:	e7d6      	b.n	8003b3c <_malloc_r+0xa8>
 8003b8e:	bf00      	nop
 8003b90:	200012a4 	.word	0x200012a4

08003b94 <__malloc_lock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	@ (8003b9c <__malloc_lock+0x8>)
 8003b96:	f7ff bf03 	b.w	80039a0 <__retarget_lock_acquire_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	2000129c 	.word	0x2000129c

08003ba0 <__malloc_unlock>:
 8003ba0:	4801      	ldr	r0, [pc, #4]	@ (8003ba8 <__malloc_unlock+0x8>)
 8003ba2:	f7ff befe 	b.w	80039a2 <__retarget_lock_release_recursive>
 8003ba6:	bf00      	nop
 8003ba8:	2000129c 	.word	0x2000129c

08003bac <__ssputs_r>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	461f      	mov	r7, r3
 8003bb2:	688e      	ldr	r6, [r1, #8]
 8003bb4:	4682      	mov	sl, r0
 8003bb6:	42be      	cmp	r6, r7
 8003bb8:	460c      	mov	r4, r1
 8003bba:	4690      	mov	r8, r2
 8003bbc:	680b      	ldr	r3, [r1, #0]
 8003bbe:	d82d      	bhi.n	8003c1c <__ssputs_r+0x70>
 8003bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bc8:	d026      	beq.n	8003c18 <__ssputs_r+0x6c>
 8003bca:	6965      	ldr	r5, [r4, #20]
 8003bcc:	6909      	ldr	r1, [r1, #16]
 8003bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bd2:	eba3 0901 	sub.w	r9, r3, r1
 8003bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bda:	1c7b      	adds	r3, r7, #1
 8003bdc:	444b      	add	r3, r9
 8003bde:	106d      	asrs	r5, r5, #1
 8003be0:	429d      	cmp	r5, r3
 8003be2:	bf38      	it	cc
 8003be4:	461d      	movcc	r5, r3
 8003be6:	0553      	lsls	r3, r2, #21
 8003be8:	d527      	bpl.n	8003c3a <__ssputs_r+0x8e>
 8003bea:	4629      	mov	r1, r5
 8003bec:	f7ff ff52 	bl	8003a94 <_malloc_r>
 8003bf0:	4606      	mov	r6, r0
 8003bf2:	b360      	cbz	r0, 8003c4e <__ssputs_r+0xa2>
 8003bf4:	464a      	mov	r2, r9
 8003bf6:	6921      	ldr	r1, [r4, #16]
 8003bf8:	f7ff fed4 	bl	80039a4 <memcpy>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	6126      	str	r6, [r4, #16]
 8003c0a:	444e      	add	r6, r9
 8003c0c:	6026      	str	r6, [r4, #0]
 8003c0e:	463e      	mov	r6, r7
 8003c10:	6165      	str	r5, [r4, #20]
 8003c12:	eba5 0509 	sub.w	r5, r5, r9
 8003c16:	60a5      	str	r5, [r4, #8]
 8003c18:	42be      	cmp	r6, r7
 8003c1a:	d900      	bls.n	8003c1e <__ssputs_r+0x72>
 8003c1c:	463e      	mov	r6, r7
 8003c1e:	4632      	mov	r2, r6
 8003c20:	4641      	mov	r1, r8
 8003c22:	6820      	ldr	r0, [r4, #0]
 8003c24:	f000 faaa 	bl	800417c <memmove>
 8003c28:	2000      	movs	r0, #0
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	1b9b      	subs	r3, r3, r6
 8003c2e:	60a3      	str	r3, [r4, #8]
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	4433      	add	r3, r6
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3a:	462a      	mov	r2, r5
 8003c3c:	f000 fad6 	bl	80041ec <_realloc_r>
 8003c40:	4606      	mov	r6, r0
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d1e0      	bne.n	8003c08 <__ssputs_r+0x5c>
 8003c46:	4650      	mov	r0, sl
 8003c48:	6921      	ldr	r1, [r4, #16]
 8003c4a:	f7ff feb9 	bl	80039c0 <_free_r>
 8003c4e:	230c      	movs	r3, #12
 8003c50:	f8ca 3000 	str.w	r3, [sl]
 8003c54:	89a3      	ldrh	r3, [r4, #12]
 8003c56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	e7e9      	b.n	8003c36 <__ssputs_r+0x8a>
	...

08003c64 <_svfiprintf_r>:
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	4698      	mov	r8, r3
 8003c6a:	898b      	ldrh	r3, [r1, #12]
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	460d      	mov	r5, r1
 8003c72:	4614      	mov	r4, r2
 8003c74:	b09d      	sub	sp, #116	@ 0x74
 8003c76:	d510      	bpl.n	8003c9a <_svfiprintf_r+0x36>
 8003c78:	690b      	ldr	r3, [r1, #16]
 8003c7a:	b973      	cbnz	r3, 8003c9a <_svfiprintf_r+0x36>
 8003c7c:	2140      	movs	r1, #64	@ 0x40
 8003c7e:	f7ff ff09 	bl	8003a94 <_malloc_r>
 8003c82:	6028      	str	r0, [r5, #0]
 8003c84:	6128      	str	r0, [r5, #16]
 8003c86:	b930      	cbnz	r0, 8003c96 <_svfiprintf_r+0x32>
 8003c88:	230c      	movs	r3, #12
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c90:	b01d      	add	sp, #116	@ 0x74
 8003c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c96:	2340      	movs	r3, #64	@ 0x40
 8003c98:	616b      	str	r3, [r5, #20]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ca4:	2330      	movs	r3, #48	@ 0x30
 8003ca6:	f04f 0901 	mov.w	r9, #1
 8003caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e48 <_svfiprintf_r+0x1e4>
 8003cb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	469a      	mov	sl, r3
 8003cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cbe:	b10a      	cbz	r2, 8003cc4 <_svfiprintf_r+0x60>
 8003cc0:	2a25      	cmp	r2, #37	@ 0x25
 8003cc2:	d1f9      	bne.n	8003cb8 <_svfiprintf_r+0x54>
 8003cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003cc8:	d00b      	beq.n	8003ce2 <_svfiprintf_r+0x7e>
 8003cca:	465b      	mov	r3, fp
 8003ccc:	4622      	mov	r2, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ff6b 	bl	8003bac <__ssputs_r>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f000 80a7 	beq.w	8003e2a <_svfiprintf_r+0x1c6>
 8003cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cde:	445a      	add	r2, fp
 8003ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 809f 	beq.w	8003e2a <_svfiprintf_r+0x1c6>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cf6:	f10a 0a01 	add.w	sl, sl, #1
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	9307      	str	r3, [sp, #28]
 8003cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d04:	4654      	mov	r4, sl
 8003d06:	2205      	movs	r2, #5
 8003d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d0c:	484e      	ldr	r0, [pc, #312]	@ (8003e48 <_svfiprintf_r+0x1e4>)
 8003d0e:	f000 fa5f 	bl	80041d0 <memchr>
 8003d12:	9a04      	ldr	r2, [sp, #16]
 8003d14:	b9d8      	cbnz	r0, 8003d4e <_svfiprintf_r+0xea>
 8003d16:	06d0      	lsls	r0, r2, #27
 8003d18:	bf44      	itt	mi
 8003d1a:	2320      	movmi	r3, #32
 8003d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d20:	0711      	lsls	r1, r2, #28
 8003d22:	bf44      	itt	mi
 8003d24:	232b      	movmi	r3, #43	@ 0x2b
 8003d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d30:	d015      	beq.n	8003d5e <_svfiprintf_r+0xfa>
 8003d32:	4654      	mov	r4, sl
 8003d34:	2000      	movs	r0, #0
 8003d36:	f04f 0c0a 	mov.w	ip, #10
 8003d3a:	9a07      	ldr	r2, [sp, #28]
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d42:	3b30      	subs	r3, #48	@ 0x30
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d94b      	bls.n	8003de0 <_svfiprintf_r+0x17c>
 8003d48:	b1b0      	cbz	r0, 8003d78 <_svfiprintf_r+0x114>
 8003d4a:	9207      	str	r2, [sp, #28]
 8003d4c:	e014      	b.n	8003d78 <_svfiprintf_r+0x114>
 8003d4e:	eba0 0308 	sub.w	r3, r0, r8
 8003d52:	fa09 f303 	lsl.w	r3, r9, r3
 8003d56:	4313      	orrs	r3, r2
 8003d58:	46a2      	mov	sl, r4
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	e7d2      	b.n	8003d04 <_svfiprintf_r+0xa0>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	1d19      	adds	r1, r3, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	9103      	str	r1, [sp, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bfbb      	ittet	lt
 8003d6a:	425b      	neglt	r3, r3
 8003d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003d70:	9307      	strge	r3, [sp, #28]
 8003d72:	9307      	strlt	r3, [sp, #28]
 8003d74:	bfb8      	it	lt
 8003d76:	9204      	strlt	r2, [sp, #16]
 8003d78:	7823      	ldrb	r3, [r4, #0]
 8003d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d7c:	d10a      	bne.n	8003d94 <_svfiprintf_r+0x130>
 8003d7e:	7863      	ldrb	r3, [r4, #1]
 8003d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d82:	d132      	bne.n	8003dea <_svfiprintf_r+0x186>
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	3402      	adds	r4, #2
 8003d88:	1d1a      	adds	r2, r3, #4
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	9203      	str	r2, [sp, #12]
 8003d8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d92:	9305      	str	r3, [sp, #20]
 8003d94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e4c <_svfiprintf_r+0x1e8>
 8003d98:	2203      	movs	r2, #3
 8003d9a:	4650      	mov	r0, sl
 8003d9c:	7821      	ldrb	r1, [r4, #0]
 8003d9e:	f000 fa17 	bl	80041d0 <memchr>
 8003da2:	b138      	cbz	r0, 8003db4 <_svfiprintf_r+0x150>
 8003da4:	2240      	movs	r2, #64	@ 0x40
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	eba0 000a 	sub.w	r0, r0, sl
 8003dac:	4082      	lsls	r2, r0
 8003dae:	4313      	orrs	r3, r2
 8003db0:	3401      	adds	r4, #1
 8003db2:	9304      	str	r3, [sp, #16]
 8003db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db8:	2206      	movs	r2, #6
 8003dba:	4825      	ldr	r0, [pc, #148]	@ (8003e50 <_svfiprintf_r+0x1ec>)
 8003dbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dc0:	f000 fa06 	bl	80041d0 <memchr>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d036      	beq.n	8003e36 <_svfiprintf_r+0x1d2>
 8003dc8:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <_svfiprintf_r+0x1f0>)
 8003dca:	bb1b      	cbnz	r3, 8003e14 <_svfiprintf_r+0x1b0>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	3307      	adds	r3, #7
 8003dd0:	f023 0307 	bic.w	r3, r3, #7
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dda:	4433      	add	r3, r6
 8003ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dde:	e76a      	b.n	8003cb6 <_svfiprintf_r+0x52>
 8003de0:	460c      	mov	r4, r1
 8003de2:	2001      	movs	r0, #1
 8003de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003de8:	e7a8      	b.n	8003d3c <_svfiprintf_r+0xd8>
 8003dea:	2300      	movs	r3, #0
 8003dec:	f04f 0c0a 	mov.w	ip, #10
 8003df0:	4619      	mov	r1, r3
 8003df2:	3401      	adds	r4, #1
 8003df4:	9305      	str	r3, [sp, #20]
 8003df6:	4620      	mov	r0, r4
 8003df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dfc:	3a30      	subs	r2, #48	@ 0x30
 8003dfe:	2a09      	cmp	r2, #9
 8003e00:	d903      	bls.n	8003e0a <_svfiprintf_r+0x1a6>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0c6      	beq.n	8003d94 <_svfiprintf_r+0x130>
 8003e06:	9105      	str	r1, [sp, #20]
 8003e08:	e7c4      	b.n	8003d94 <_svfiprintf_r+0x130>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e12:	e7f0      	b.n	8003df6 <_svfiprintf_r+0x192>
 8003e14:	ab03      	add	r3, sp, #12
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	462a      	mov	r2, r5
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <_svfiprintf_r+0x1f4>)
 8003e1e:	a904      	add	r1, sp, #16
 8003e20:	f3af 8000 	nop.w
 8003e24:	1c42      	adds	r2, r0, #1
 8003e26:	4606      	mov	r6, r0
 8003e28:	d1d6      	bne.n	8003dd8 <_svfiprintf_r+0x174>
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	065b      	lsls	r3, r3, #25
 8003e2e:	f53f af2d 	bmi.w	8003c8c <_svfiprintf_r+0x28>
 8003e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e34:	e72c      	b.n	8003c90 <_svfiprintf_r+0x2c>
 8003e36:	ab03      	add	r3, sp, #12
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	462a      	mov	r2, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <_svfiprintf_r+0x1f4>)
 8003e40:	a904      	add	r1, sp, #16
 8003e42:	f000 f87d 	bl	8003f40 <_printf_i>
 8003e46:	e7ed      	b.n	8003e24 <_svfiprintf_r+0x1c0>
 8003e48:	0800487c 	.word	0x0800487c
 8003e4c:	08004882 	.word	0x08004882
 8003e50:	08004886 	.word	0x08004886
 8003e54:	00000000 	.word	0x00000000
 8003e58:	08003bad 	.word	0x08003bad

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4616      	mov	r6, r2
 8003e62:	4698      	mov	r8, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	4607      	mov	r7, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bfb8      	it	lt
 8003e6e:	4613      	movlt	r3, r2
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e7c:	b10a      	cbz	r2, 8003e82 <_printf_common+0x26>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	6833      	ldrmi	r3, [r6, #0]
 8003e8a:	3302      	addmi	r3, #2
 8003e8c:	6033      	strmi	r3, [r6, #0]
 8003e8e:	6825      	ldr	r5, [r4, #0]
 8003e90:	f015 0506 	ands.w	r5, r5, #6
 8003e94:	d106      	bne.n	8003ea4 <_printf_common+0x48>
 8003e96:	f104 0a19 	add.w	sl, r4, #25
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dc2b      	bgt.n	8003efc <_printf_common+0xa0>
 8003ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	3b00      	subs	r3, #0
 8003eac:	bf18      	it	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d430      	bmi.n	8003f16 <_printf_common+0xba>
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ebc:	47c8      	blx	r9
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d023      	beq.n	8003f0a <_printf_common+0xae>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	6922      	ldr	r2, [r4, #16]
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf14      	ite	ne
 8003ece:	2500      	movne	r5, #0
 8003ed0:	6833      	ldreq	r3, [r6, #0]
 8003ed2:	f04f 0600 	mov.w	r6, #0
 8003ed6:	bf08      	it	eq
 8003ed8:	68e5      	ldreq	r5, [r4, #12]
 8003eda:	f104 041a 	add.w	r4, r4, #26
 8003ede:	bf08      	it	eq
 8003ee0:	1aed      	subeq	r5, r5, r3
 8003ee2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ee6:	bf08      	it	eq
 8003ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eec:	4293      	cmp	r3, r2
 8003eee:	bfc4      	itt	gt
 8003ef0:	1a9b      	subgt	r3, r3, r2
 8003ef2:	18ed      	addgt	r5, r5, r3
 8003ef4:	42b5      	cmp	r5, r6
 8003ef6:	d11a      	bne.n	8003f2e <_printf_common+0xd2>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e008      	b.n	8003f0e <_printf_common+0xb2>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4652      	mov	r2, sl
 8003f00:	4641      	mov	r1, r8
 8003f02:	4638      	mov	r0, r7
 8003f04:	47c8      	blx	r9
 8003f06:	3001      	adds	r0, #1
 8003f08:	d103      	bne.n	8003f12 <_printf_common+0xb6>
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7c1      	b.n	8003e9a <_printf_common+0x3e>
 8003f16:	2030      	movs	r0, #48	@ 0x30
 8003f18:	18e1      	adds	r1, r4, r3
 8003f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f24:	4422      	add	r2, r4
 8003f26:	3302      	adds	r3, #2
 8003f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f2c:	e7c2      	b.n	8003eb4 <_printf_common+0x58>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4622      	mov	r2, r4
 8003f32:	4641      	mov	r1, r8
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c8      	blx	r9
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0e6      	beq.n	8003f0a <_printf_common+0xae>
 8003f3c:	3601      	adds	r6, #1
 8003f3e:	e7d9      	b.n	8003ef4 <_printf_common+0x98>

08003f40 <_printf_i>:
 8003f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	7e0f      	ldrb	r7, [r1, #24]
 8003f46:	4691      	mov	r9, r2
 8003f48:	2f78      	cmp	r7, #120	@ 0x78
 8003f4a:	4680      	mov	r8, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	469a      	mov	sl, r3
 8003f50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f56:	d807      	bhi.n	8003f68 <_printf_i+0x28>
 8003f58:	2f62      	cmp	r7, #98	@ 0x62
 8003f5a:	d80a      	bhi.n	8003f72 <_printf_i+0x32>
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	f000 80d1 	beq.w	8004104 <_printf_i+0x1c4>
 8003f62:	2f58      	cmp	r7, #88	@ 0x58
 8003f64:	f000 80b8 	beq.w	80040d8 <_printf_i+0x198>
 8003f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f70:	e03a      	b.n	8003fe8 <_printf_i+0xa8>
 8003f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f76:	2b15      	cmp	r3, #21
 8003f78:	d8f6      	bhi.n	8003f68 <_printf_i+0x28>
 8003f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f80 <_printf_i+0x40>)
 8003f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	08003f69 	.word	0x08003f69
 8003f8c:	08003f69 	.word	0x08003f69
 8003f90:	08003f69 	.word	0x08003f69
 8003f94:	08003f69 	.word	0x08003f69
 8003f98:	08003fed 	.word	0x08003fed
 8003f9c:	08003f69 	.word	0x08003f69
 8003fa0:	08003f69 	.word	0x08003f69
 8003fa4:	08003f69 	.word	0x08003f69
 8003fa8:	08003f69 	.word	0x08003f69
 8003fac:	080040eb 	.word	0x080040eb
 8003fb0:	08004017 	.word	0x08004017
 8003fb4:	080040a5 	.word	0x080040a5
 8003fb8:	08003f69 	.word	0x08003f69
 8003fbc:	08003f69 	.word	0x08003f69
 8003fc0:	0800410d 	.word	0x0800410d
 8003fc4:	08003f69 	.word	0x08003f69
 8003fc8:	08004017 	.word	0x08004017
 8003fcc:	08003f69 	.word	0x08003f69
 8003fd0:	08003f69 	.word	0x08003f69
 8003fd4:	080040ad 	.word	0x080040ad
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6032      	str	r2, [r6, #0]
 8003fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e09c      	b.n	8004126 <_printf_i+0x1e6>
 8003fec:	6833      	ldr	r3, [r6, #0]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	1d19      	adds	r1, r3, #4
 8003ff2:	6031      	str	r1, [r6, #0]
 8003ff4:	0606      	lsls	r6, r0, #24
 8003ff6:	d501      	bpl.n	8003ffc <_printf_i+0xbc>
 8003ff8:	681d      	ldr	r5, [r3, #0]
 8003ffa:	e003      	b.n	8004004 <_printf_i+0xc4>
 8003ffc:	0645      	lsls	r5, r0, #25
 8003ffe:	d5fb      	bpl.n	8003ff8 <_printf_i+0xb8>
 8004000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004004:	2d00      	cmp	r5, #0
 8004006:	da03      	bge.n	8004010 <_printf_i+0xd0>
 8004008:	232d      	movs	r3, #45	@ 0x2d
 800400a:	426d      	negs	r5, r5
 800400c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004010:	230a      	movs	r3, #10
 8004012:	4858      	ldr	r0, [pc, #352]	@ (8004174 <_printf_i+0x234>)
 8004014:	e011      	b.n	800403a <_printf_i+0xfa>
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	0608      	lsls	r0, r1, #24
 800401c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004020:	d402      	bmi.n	8004028 <_printf_i+0xe8>
 8004022:	0649      	lsls	r1, r1, #25
 8004024:	bf48      	it	mi
 8004026:	b2ad      	uxthmi	r5, r5
 8004028:	2f6f      	cmp	r7, #111	@ 0x6f
 800402a:	6033      	str	r3, [r6, #0]
 800402c:	bf14      	ite	ne
 800402e:	230a      	movne	r3, #10
 8004030:	2308      	moveq	r3, #8
 8004032:	4850      	ldr	r0, [pc, #320]	@ (8004174 <_printf_i+0x234>)
 8004034:	2100      	movs	r1, #0
 8004036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800403a:	6866      	ldr	r6, [r4, #4]
 800403c:	2e00      	cmp	r6, #0
 800403e:	60a6      	str	r6, [r4, #8]
 8004040:	db05      	blt.n	800404e <_printf_i+0x10e>
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	432e      	orrs	r6, r5
 8004046:	f021 0104 	bic.w	r1, r1, #4
 800404a:	6021      	str	r1, [r4, #0]
 800404c:	d04b      	beq.n	80040e6 <_printf_i+0x1a6>
 800404e:	4616      	mov	r6, r2
 8004050:	fbb5 f1f3 	udiv	r1, r5, r3
 8004054:	fb03 5711 	mls	r7, r3, r1, r5
 8004058:	5dc7      	ldrb	r7, [r0, r7]
 800405a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800405e:	462f      	mov	r7, r5
 8004060:	42bb      	cmp	r3, r7
 8004062:	460d      	mov	r5, r1
 8004064:	d9f4      	bls.n	8004050 <_printf_i+0x110>
 8004066:	2b08      	cmp	r3, #8
 8004068:	d10b      	bne.n	8004082 <_printf_i+0x142>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	07df      	lsls	r7, r3, #31
 800406e:	d508      	bpl.n	8004082 <_printf_i+0x142>
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	6861      	ldr	r1, [r4, #4]
 8004074:	4299      	cmp	r1, r3
 8004076:	bfde      	ittt	le
 8004078:	2330      	movle	r3, #48	@ 0x30
 800407a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800407e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004082:	1b92      	subs	r2, r2, r6
 8004084:	6122      	str	r2, [r4, #16]
 8004086:	464b      	mov	r3, r9
 8004088:	4621      	mov	r1, r4
 800408a:	4640      	mov	r0, r8
 800408c:	f8cd a000 	str.w	sl, [sp]
 8004090:	aa03      	add	r2, sp, #12
 8004092:	f7ff fee3 	bl	8003e5c <_printf_common>
 8004096:	3001      	adds	r0, #1
 8004098:	d14a      	bne.n	8004130 <_printf_i+0x1f0>
 800409a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800409e:	b004      	add	sp, #16
 80040a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f043 0320 	orr.w	r3, r3, #32
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	2778      	movs	r7, #120	@ 0x78
 80040ae:	4832      	ldr	r0, [pc, #200]	@ (8004178 <_printf_i+0x238>)
 80040b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	6831      	ldr	r1, [r6, #0]
 80040b8:	061f      	lsls	r7, r3, #24
 80040ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80040be:	d402      	bmi.n	80040c6 <_printf_i+0x186>
 80040c0:	065f      	lsls	r7, r3, #25
 80040c2:	bf48      	it	mi
 80040c4:	b2ad      	uxthmi	r5, r5
 80040c6:	6031      	str	r1, [r6, #0]
 80040c8:	07d9      	lsls	r1, r3, #31
 80040ca:	bf44      	itt	mi
 80040cc:	f043 0320 	orrmi.w	r3, r3, #32
 80040d0:	6023      	strmi	r3, [r4, #0]
 80040d2:	b11d      	cbz	r5, 80040dc <_printf_i+0x19c>
 80040d4:	2310      	movs	r3, #16
 80040d6:	e7ad      	b.n	8004034 <_printf_i+0xf4>
 80040d8:	4826      	ldr	r0, [pc, #152]	@ (8004174 <_printf_i+0x234>)
 80040da:	e7e9      	b.n	80040b0 <_printf_i+0x170>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	f023 0320 	bic.w	r3, r3, #32
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	e7f6      	b.n	80040d4 <_printf_i+0x194>
 80040e6:	4616      	mov	r6, r2
 80040e8:	e7bd      	b.n	8004066 <_printf_i+0x126>
 80040ea:	6833      	ldr	r3, [r6, #0]
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	1d18      	adds	r0, r3, #4
 80040f0:	6961      	ldr	r1, [r4, #20]
 80040f2:	6030      	str	r0, [r6, #0]
 80040f4:	062e      	lsls	r6, r5, #24
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	d501      	bpl.n	80040fe <_printf_i+0x1be>
 80040fa:	6019      	str	r1, [r3, #0]
 80040fc:	e002      	b.n	8004104 <_printf_i+0x1c4>
 80040fe:	0668      	lsls	r0, r5, #25
 8004100:	d5fb      	bpl.n	80040fa <_printf_i+0x1ba>
 8004102:	8019      	strh	r1, [r3, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	4616      	mov	r6, r2
 8004108:	6123      	str	r3, [r4, #16]
 800410a:	e7bc      	b.n	8004086 <_printf_i+0x146>
 800410c:	6833      	ldr	r3, [r6, #0]
 800410e:	2100      	movs	r1, #0
 8004110:	1d1a      	adds	r2, r3, #4
 8004112:	6032      	str	r2, [r6, #0]
 8004114:	681e      	ldr	r6, [r3, #0]
 8004116:	6862      	ldr	r2, [r4, #4]
 8004118:	4630      	mov	r0, r6
 800411a:	f000 f859 	bl	80041d0 <memchr>
 800411e:	b108      	cbz	r0, 8004124 <_printf_i+0x1e4>
 8004120:	1b80      	subs	r0, r0, r6
 8004122:	6060      	str	r0, [r4, #4]
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	2300      	movs	r3, #0
 800412a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800412e:	e7aa      	b.n	8004086 <_printf_i+0x146>
 8004130:	4632      	mov	r2, r6
 8004132:	4649      	mov	r1, r9
 8004134:	4640      	mov	r0, r8
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	47d0      	blx	sl
 800413a:	3001      	adds	r0, #1
 800413c:	d0ad      	beq.n	800409a <_printf_i+0x15a>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	d413      	bmi.n	800416c <_printf_i+0x22c>
 8004144:	68e0      	ldr	r0, [r4, #12]
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	4298      	cmp	r0, r3
 800414a:	bfb8      	it	lt
 800414c:	4618      	movlt	r0, r3
 800414e:	e7a6      	b.n	800409e <_printf_i+0x15e>
 8004150:	2301      	movs	r3, #1
 8004152:	4632      	mov	r2, r6
 8004154:	4649      	mov	r1, r9
 8004156:	4640      	mov	r0, r8
 8004158:	47d0      	blx	sl
 800415a:	3001      	adds	r0, #1
 800415c:	d09d      	beq.n	800409a <_printf_i+0x15a>
 800415e:	3501      	adds	r5, #1
 8004160:	68e3      	ldr	r3, [r4, #12]
 8004162:	9903      	ldr	r1, [sp, #12]
 8004164:	1a5b      	subs	r3, r3, r1
 8004166:	42ab      	cmp	r3, r5
 8004168:	dcf2      	bgt.n	8004150 <_printf_i+0x210>
 800416a:	e7eb      	b.n	8004144 <_printf_i+0x204>
 800416c:	2500      	movs	r5, #0
 800416e:	f104 0619 	add.w	r6, r4, #25
 8004172:	e7f5      	b.n	8004160 <_printf_i+0x220>
 8004174:	0800488d 	.word	0x0800488d
 8004178:	0800489e 	.word	0x0800489e

0800417c <memmove>:
 800417c:	4288      	cmp	r0, r1
 800417e:	b510      	push	{r4, lr}
 8004180:	eb01 0402 	add.w	r4, r1, r2
 8004184:	d902      	bls.n	800418c <memmove+0x10>
 8004186:	4284      	cmp	r4, r0
 8004188:	4623      	mov	r3, r4
 800418a:	d807      	bhi.n	800419c <memmove+0x20>
 800418c:	1e43      	subs	r3, r0, #1
 800418e:	42a1      	cmp	r1, r4
 8004190:	d008      	beq.n	80041a4 <memmove+0x28>
 8004192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800419a:	e7f8      	b.n	800418e <memmove+0x12>
 800419c:	4601      	mov	r1, r0
 800419e:	4402      	add	r2, r0
 80041a0:	428a      	cmp	r2, r1
 80041a2:	d100      	bne.n	80041a6 <memmove+0x2a>
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ae:	e7f7      	b.n	80041a0 <memmove+0x24>

080041b0 <_sbrk_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	2300      	movs	r3, #0
 80041b4:	4d05      	ldr	r5, [pc, #20]	@ (80041cc <_sbrk_r+0x1c>)
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fe fa46 	bl	800264c <_sbrk>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_sbrk_r+0x1a>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_sbrk_r+0x1a>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20001298 	.word	0x20001298

080041d0 <memchr>:
 80041d0:	4603      	mov	r3, r0
 80041d2:	b510      	push	{r4, lr}
 80041d4:	b2c9      	uxtb	r1, r1
 80041d6:	4402      	add	r2, r0
 80041d8:	4293      	cmp	r3, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	d101      	bne.n	80041e2 <memchr+0x12>
 80041de:	2000      	movs	r0, #0
 80041e0:	e003      	b.n	80041ea <memchr+0x1a>
 80041e2:	7804      	ldrb	r4, [r0, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	428c      	cmp	r4, r1
 80041e8:	d1f6      	bne.n	80041d8 <memchr+0x8>
 80041ea:	bd10      	pop	{r4, pc}

080041ec <_realloc_r>:
 80041ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f0:	4607      	mov	r7, r0
 80041f2:	4614      	mov	r4, r2
 80041f4:	460d      	mov	r5, r1
 80041f6:	b921      	cbnz	r1, 8004202 <_realloc_r+0x16>
 80041f8:	4611      	mov	r1, r2
 80041fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041fe:	f7ff bc49 	b.w	8003a94 <_malloc_r>
 8004202:	b92a      	cbnz	r2, 8004210 <_realloc_r+0x24>
 8004204:	f7ff fbdc 	bl	80039c0 <_free_r>
 8004208:	4625      	mov	r5, r4
 800420a:	4628      	mov	r0, r5
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	f000 f81a 	bl	8004248 <_malloc_usable_size_r>
 8004214:	4284      	cmp	r4, r0
 8004216:	4606      	mov	r6, r0
 8004218:	d802      	bhi.n	8004220 <_realloc_r+0x34>
 800421a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800421e:	d8f4      	bhi.n	800420a <_realloc_r+0x1e>
 8004220:	4621      	mov	r1, r4
 8004222:	4638      	mov	r0, r7
 8004224:	f7ff fc36 	bl	8003a94 <_malloc_r>
 8004228:	4680      	mov	r8, r0
 800422a:	b908      	cbnz	r0, 8004230 <_realloc_r+0x44>
 800422c:	4645      	mov	r5, r8
 800422e:	e7ec      	b.n	800420a <_realloc_r+0x1e>
 8004230:	42b4      	cmp	r4, r6
 8004232:	4622      	mov	r2, r4
 8004234:	4629      	mov	r1, r5
 8004236:	bf28      	it	cs
 8004238:	4632      	movcs	r2, r6
 800423a:	f7ff fbb3 	bl	80039a4 <memcpy>
 800423e:	4629      	mov	r1, r5
 8004240:	4638      	mov	r0, r7
 8004242:	f7ff fbbd 	bl	80039c0 <_free_r>
 8004246:	e7f1      	b.n	800422c <_realloc_r+0x40>

08004248 <_malloc_usable_size_r>:
 8004248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424c:	1f18      	subs	r0, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfbc      	itt	lt
 8004252:	580b      	ldrlt	r3, [r1, r0]
 8004254:	18c0      	addlt	r0, r0, r3
 8004256:	4770      	bx	lr

08004258 <_gettimeofday>:
 8004258:	2258      	movs	r2, #88	@ 0x58
 800425a:	4b02      	ldr	r3, [pc, #8]	@ (8004264 <_gettimeofday+0xc>)
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	4770      	bx	lr
 8004264:	20001298 	.word	0x20001298

08004268 <_init>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr

08004274 <_fini>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr
